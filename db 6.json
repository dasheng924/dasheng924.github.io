{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/butterfly/source/css/custom.css","path":"css/custom.css","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/ee.png","path":"img/ee.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/go.png","path":"img/go.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/me.png","path":"img/me.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"094af6a92668d0dae0a970451b20b7facc1c786f","modified":1625716878966},{"_id":"source/manifest.json","hash":"8dc5a9f548088e7ccb28e69926ad041ce5e5390b","modified":1625732617621},{"_id":"source/_posts/.DS_Store","hash":"c13fcc29c0efd6d83510bbf11c910d9a09dca3de","modified":1628394119739},{"_id":"source/.DS_Store","hash":"286b123bb0c35b92dba143660f0e04d0ee4ef938","modified":1628393734963},{"_id":"source/_posts/HEXO发生errorspawn-failed错误的解决方法.md","hash":"01d2cf589f8a0c185422e1bae7e81f604149cf7b","modified":1628394454789},{"_id":"source/_posts/Json的使用.md","hash":"154c04a10cbf0c3b7cc88fc03aee14bd901817da","modified":1627117479203},{"_id":"source/_posts/SHELL 脚本.md","hash":"7dd59d2059e20cec5ff93cf2550122196d855089","modified":1625768695541},{"_id":"source/_posts/OSI 七层模型.md","hash":"0ec8fed35f2a99de80988bf70363c6caa8e6b642","modified":1625924536532},{"_id":"source/_posts/FastCGI.md","hash":"8fd31904bd6bab97534575504b51a5d4bf37d7f1","modified":1626750340501},{"_id":"source/_posts/FastDFS.md","hash":"53696e8f25390c87c21d312a96dc6447eac1ec1c","modified":1626168950574},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1625716507593},{"_id":"source/_posts/git 总结.md","hash":"1c5f13166f70bbe096f03838ad92f97901093e07","modified":1626115678567},{"_id":"source/_posts/post 信息返回解析.md","hash":"708e53082f9abdabd89ba98c76bc2f322ea2ffec","modified":1626695664371},{"_id":"source/_posts/nginx.md","hash":"69f64a7b1cecc01ea49c1a690e62523edd3af022","modified":1626745912462},{"_id":"source/_posts/static.md","hash":"08639d04c91560dcff3c040b20f7acedd84e4bd7","modified":1626114513106},{"_id":"source/_posts/可变参函数.md","hash":"d03be43a895ac759bec13dc03dba963be5cd6181","modified":1628096155536},{"_id":"source/_posts/大小端.md","hash":"85ba25a590192389459ed3d1110a168d819fddb2","modified":1625768682454},{"_id":"source/_posts/三次握手-四次挥手.md","hash":"5700823c59d40e2af27d341f6129bc2058609d98","modified":1625775150762},{"_id":"source/_posts/管道.md","hash":"e6659bc8527b1df95c84f1822b2e4d0f1853cfb8","modified":1626249633462},{"_id":"source/_posts/库.md","hash":"afe259b9a59a2b783b7c5dd76660fd42612828f1","modified":1626200239091},{"_id":"source/_posts/字节对齐.md","hash":"d78e02c13b52250e6beb35a5e6d07324cf9c8e12","modified":1625940899749},{"_id":"source/_data/link.yml","hash":"88a7f415f6d85d9620a4037d5a1377263eca5971","modified":1628095896618},{"_id":"source/tags/index.md","hash":"9166c5b06813e06ec2fe769a73fc1c98a068c93d","modified":1625728492845},{"_id":"source/link/index.md","hash":"417552bafce66a81f1467cfe0c7dc20f34eea7c3","modified":1625728725600},{"_id":"source/categories/index.md","hash":"086e19ad8517fc5f7ffd3dfba2241986415d9607","modified":1625734454448},{"_id":"source/_posts/redis的简单使用.md","hash":"c40691083b17c1aa286956d977c8203c4e64d1e2","modified":1628352787858},{"_id":"themes/butterfly/README.md","hash":"cedd13fcd8c75a68742265dd8eced4087e940ffd","modified":1625719498670},{"_id":"themes/butterfly/package.json","hash":"bac7ba152cd2e5798ea62f7c631f6cd68b053b2d","modified":1625719498695},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1625719498670},{"_id":"themes/butterfly/README_CN.md","hash":"459d6f3200863021bee1fe72a719aef236fb4090","modified":1625719498670},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1625719498669},{"_id":"themes/butterfly/_config.yml","hash":"4eabe9cbad125367d36d43137fdbd8327205cc44","modified":1625719498670},{"_id":"themes/butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":1625719498671},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":1625719498671},{"_id":"themes/butterfly/.DS_Store","hash":"403235bb343d87cd9748d5e9cced82848fb20d4d","modified":1625745390180},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1625719498671},{"_id":"themes/butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":1625719498671},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1625719498671},{"_id":"themes/butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":1625719498672},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1625719498693},{"_id":"themes/butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1625719498694},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1625719498694},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1625719498694},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1625719498669},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1625719498669},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1625719498669},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1625719498669},{"_id":"themes/butterfly/source/.DS_Store","hash":"de3306b96f743995a8329ad9a52e61e8f832b112","modified":1625760884736},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"7d378e328a53cc99d5acc9682dce53f5eb61537d","modified":1625719498672},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1625719498672},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1377952022ee0a9eaa7a2fd1098f1571efc468d9","modified":1625719498672},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":1625719498672},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1625719498675},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1625719498678},{"_id":"themes/butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":1625719498695},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1625719498695},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1625719498696},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":1625719498696},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1625719498696},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8dafc2dcd8c33f70a546fee443f0b6d80b3cd243","modified":1625719498680},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1625719498696},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":1625719498679},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1625719498697},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"65f2442e04c4defd16e7c1e67701d3bb41d9577a","modified":1625719498697},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1625719498697},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"54b9324e3506dcc9c9991ef5e11e37e66e21594f","modified":1625719498697},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1625719498698},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":1625719498698},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1625719498698},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1625719498698},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1625719498699},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":1625719498699},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1625719498699},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1625719498699},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1625719498709},{"_id":"themes/butterfly/source/css/var.styl","hash":"4b7ba48942bc25244d155333c3657f5c1448addf","modified":1625719498709},{"_id":"themes/butterfly/source/css/custom.css","hash":"a3edaf3209176cd0a8db6828f8eacbe9afaf49d8","modified":1625721849615},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1625719498710},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1625719498710},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1625719498709},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1625719498711},{"_id":"themes/butterfly/source/img/go.png","hash":"86a8fc5239987561616653e86a97e7670beba95e","modified":1625671381291},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1625719498673},{"_id":"themes/butterfly/source/img/.DS_Store","hash":"efb8817beae524a9eefe2b4369d7233d2e468da3","modified":1625822863257},{"_id":"themes/butterfly/source/js/main.js","hash":"e42d0eb55afcdc3766743c29e597d82734f4dd95","modified":1625719498711},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":1625719498673},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":1625719498673},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":1625719498673},{"_id":"themes/butterfly/source/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1625719498713},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1625719498673},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1625719498673},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":1625719498674},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1625719498674},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1625719498674},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":1625719498675},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1625719498675},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1625719498712},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":1625719498675},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1625719498676},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1625719498677},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":1625719498677},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1625719498676},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1625719498678},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"b53a2d4f9c37b375a4446d2273dcfb7712d91b3e","modified":1625719498678},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1625719498677},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1625719498679},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":1625719498674},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1625719498679},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1625719498680},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1625719498685},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1625719498688},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"933cb710d2dbcea25c6426a57c6f49d2f48b792c","modified":1625719498688},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":1625719498691},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1625719498689},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1625719498691},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1625719498691},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0366c658cdcff839aa1df2e2d252a03a53fd427e","modified":1625719498691},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1625719498691},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1625719498692},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1625719498692},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1625719498692},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":1625719498692},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1625719498693},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1625719498693},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1625719498693},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1625719498693},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"b5525891f6affd02c1ea3b2327c026882efe428b","modified":1625719498693},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":1625719498699},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"e211efbd1952d4b1b881287aa43423133c1d166e","modified":1625719498700},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"85e72c70a0cef29e40be1968f5d23b06c6f8e3aa","modified":1625719498700},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"fa7a4c1685f391d60ed863e869b9604b59746c27","modified":1625719498701},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7feb755ca7c22da36bbad11e74ecd95fdcf3b879","modified":1625719498702},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1625719498702},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":1625719498702},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"dd8cdf639ba2b726437c77fa7aa8d5edbabe8f9b","modified":1625719498702},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1625719498703},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"950cc2afb5c0be5bfc192dc68a2c30c8acfbde95","modified":1625719498702},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":1625719498703},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":1625719498703},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":1625719498703},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":1625719498703},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":1625719498704},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"2c5fb77c448ce0a734040c8ce532b28fed688899","modified":1625719498704},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":1625719498704},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"aac1c0af50a4fa1ecd3eaac06e9574b8890a9f17","modified":1625719498704},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":1625719498704},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"b0488ceacde74af139d66c8db5cb36cc21737b9b","modified":1625719498705},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1625719498705},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1625719498705},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"2cc49d3f6a6beb9f7bff93e292f88aa5681da1d0","modified":1625719498706},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1625719498674},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":1625719498706},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1625719498706},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"917e0e399e117217184ca63d3eb5c4843bcccf7b","modified":1625719498706},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"f168f5c669978f633abe118cdcc4a12cfc883c01","modified":1625719498706},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":1625719498707},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"6befe4c51b86d0c1de130beeecad9e28d6442713","modified":1625719498707},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":1625719498707},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1625719498707},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1625719498708},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":1625719498677},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1625719498708},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1625719498708},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1625719498708},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1625719498708},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1625719498712},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1625719498680},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1625719498681},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1625719498681},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1625719498681},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"90d1ce76b0486ede809bc3b5d4935c22ee376c91","modified":1625719498705},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1625719498681},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1625719498682},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1625719498682},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1625719498682},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1625719498682},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1625719498682},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1625719498682},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1625719498682},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1625719498683},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":1625719498683},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c46a932257212f82e4a9974fbbc5de8878c8b383","modified":1625719498683},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":1625719498684},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1625719498684},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1625719498684},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1625719498684},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":1625719498684},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1625719498685},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":1625719498685},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"360845d02c3864975349ae60b3d0c68253ca001c","modified":1625719498685},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1625719498686},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1625719498686},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fa651ca081af1012de3b22f71501fba43ca1b63f","modified":1625719498686},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":1625719498686},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":1625719498687},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1625719498687},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":1625719498707},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1625719498712},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1625719498687},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":1625719498688},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1625719498687},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":1625719498689},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1625719498689},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":1625719498687},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1625719498690},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":1625719498689},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1625719498690},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1625719498690},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1625719498690},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":1625719498701},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1625719498700},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1625719498701},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":1625719498701},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1625719498701},{"_id":"themes/butterfly/source/img/ee.png","hash":"3acdc7b17e88985eba7ea129013e0cb718949a14","modified":1625760864404},{"_id":"themes/butterfly/source/img/me.png","hash":"7344cd52a327155255ed4206affd3f54a38668e5","modified":1625775269985},{"_id":"public/manifest.json","hash":"e5653018c633c03092c691caf2b17921c60fe633","modified":1628394473033},{"_id":"public/search.xml","hash":"57ab82f4ba18c84667f150d4405c7742a00f7e89","modified":1628394473033},{"_id":"public/404.html","hash":"e2cc1f4f220cf49209b3428f92293cf72efa5838","modified":1628394473033},{"_id":"public/link/index.html","hash":"03f296732dafc2e75f77390b1b5d6cc6b6b64df5","modified":1628394473033},{"_id":"public/tags/index.html","hash":"2dea473609491580e0251d573142d3650cae27d5","modified":1628394473033},{"_id":"public/categories/index.html","hash":"d3efea7106b7bab760b3793579f1afb90b5f7b17","modified":1628394473033},{"_id":"public/2021/07/08/hello-world/index.html","hash":"4e62dc0849f063717568546deef027cee5e88d80","modified":1628394473033},{"_id":"public/2021/05/18/HEXO发生errorspawn-failed错误的解决方法/index.html","hash":"dadec2551ab7a6d21df15b83ed55af1a66880f54","modified":1628394473033},{"_id":"public/2021/05/09/FastDFS/index.html","hash":"1cd4670bcfbb65150b78250143f1dcad3945c14b","modified":1628394473033},{"_id":"public/2021/04/28/Json的使用/index.html","hash":"26eb1e1695d61b69a6f15c7c46058101fd3b26c3","modified":1628394473033},{"_id":"public/2021/04/01/nginx/index.html","hash":"cbebb1b6466ab504ba26b1c958ed399f3a19fcea","modified":1628394473033},{"_id":"public/2021/04/02/FastCGI/index.html","hash":"d904332b269ae80ff92b3d7b14b18f1ab819c529","modified":1628394473033},{"_id":"public/2021/03/22/redis的简单使用/index.html","hash":"359373253d548bed4c1211359c47bdbce0600007","modified":1628394473033},{"_id":"public/2021/03/28/post 信息返回解析/index.html","hash":"cbb9cdc3e9d06f86e372e3378e51b9f0e02a812e","modified":1628394473033},{"_id":"public/2021/03/15/可变参函数/index.html","hash":"6b28e117008805433ac1951188fe090112899d9f","modified":1628394473033},{"_id":"public/2021/02/12/字节对齐/index.html","hash":"9a67cdd6f7829753e446acd89b38bdbaa6eb8424","modified":1628394473033},{"_id":"public/2020/08/23/管道/index.html","hash":"448c5c6254f2a40ea2c9c10ce0449a42ccf9755f","modified":1628394473033},{"_id":"public/2020/08/21/git 总结/index.html","hash":"0feb5d3920bec245785d5609c6e3724d7999b335","modified":1628394473033},{"_id":"public/2020/07/22/库/index.html","hash":"c58c7df0197d4630b679a305a2718031a4cc5df3","modified":1628394473033},{"_id":"public/2020/07/08/static/index.html","hash":"0b8bb2114ff9ce46616de7686008ea44c091e0ad","modified":1628394473033},{"_id":"public/2020/06/20/OSI 七层模型/index.html","hash":"387aa820a5bc2c21fffdc8d201485653aa2c0cd2","modified":1628394473033},{"_id":"public/2020/06/10/三次握手-四次挥手/index.html","hash":"fa2669cf7dfeacbfb48dccd40f58077e36598cba","modified":1628394473033},{"_id":"public/2020/06/08/大小端/index.html","hash":"380940f5b9850338bc394dd563f2868b19c1ae72","modified":1628394473033},{"_id":"public/2020/05/18/SHELL 脚本/index.html","hash":"cb529797e2f589d2eaf647a553d8140aa3d7314d","modified":1628394473033},{"_id":"public/archives/index.html","hash":"a089048fc153fdda0f8a17ea9537de0f60399c6a","modified":1628394473033},{"_id":"public/archives/page/2/index.html","hash":"e07f12a4fb1b0ae8ef6129134b508c1505e007b7","modified":1628394473033},{"_id":"public/archives/2020/index.html","hash":"23f6d70bce4a879540cc0d2b4a120bdf945723d0","modified":1628394473033},{"_id":"public/archives/2020/05/index.html","hash":"cfe06b12ccd7a20d3f43cf47b67dc02d42b21d43","modified":1628394473033},{"_id":"public/archives/2020/06/index.html","hash":"23de1cf9fbe738b848dc90a1bf953c9037525269","modified":1628394473033},{"_id":"public/archives/2020/07/index.html","hash":"d0fffd50b984a617975114050d03710bb9728c08","modified":1628394473033},{"_id":"public/archives/2020/08/index.html","hash":"87befbf4cf0e62184295e7910c9706fed38da2c1","modified":1628394473033},{"_id":"public/archives/2021/index.html","hash":"d44f6f491525fdef320a241a97342236bfbbdced","modified":1628394473033},{"_id":"public/archives/2021/02/index.html","hash":"d27cd630cfd2c1dbae12984f0ce5e3a949cfda65","modified":1628394473033},{"_id":"public/archives/2021/03/index.html","hash":"ec5eeef3cd760b1009a535b3aaf677ebfdcc8294","modified":1628394473033},{"_id":"public/archives/2021/04/index.html","hash":"2950f39dbd929a3ce25654957d9a43769ec433c5","modified":1628394473033},{"_id":"public/archives/2021/05/index.html","hash":"d43992e3fdcef56968f7612fc9f654509922b241","modified":1628394473033},{"_id":"public/archives/2021/07/index.html","hash":"ae661efc522c2682e100f9431767fb82ab541bcd","modified":1628394473033},{"_id":"public/categories/Tools/index.html","hash":"ffe427ffd12766e449a92ac13c04c62d29b95c64","modified":1628394473033},{"_id":"public/categories/Tools/Qt/index.html","hash":"7fc3d66a9330b2163bf1121915e9e5d643e467fd","modified":1628394473033},{"_id":"public/categories/Linux/index.html","hash":"5442d3a87e6af14c018a773d2f52aceb33cb8397","modified":1628394473033},{"_id":"public/categories/C/index.html","hash":"f83fbc688412a731a7225802dcc34e77a941fc7c","modified":1628394473033},{"_id":"public/index.html","hash":"62fdfe61178cbd540816d9e3cfe5d9594bfefa10","modified":1628394473033},{"_id":"public/page/2/index.html","hash":"12229228c19e6c2c2e7bcb8617bf687e3a7eb611","modified":1628394473033},{"_id":"public/tags/fastcgi/index.html","hash":"2335db800ec3d79d0c3b6c654193cc645560ea95","modified":1628394473033},{"_id":"public/tags/FastDFS/index.html","hash":"cdef432f5684f7e8fc3adb150e478404b51ee6d9","modified":1628394473033},{"_id":"public/tags/文件系统/index.html","hash":"1f32bd9b3b0c9ac240a6f8c5fbf12e736fafd154","modified":1628394473033},{"_id":"public/tags/hexo/index.html","hash":"1e4cf0a59002cfe28666845721d3a46ea717d134","modified":1628394473033},{"_id":"public/tags/git/index.html","hash":"d109881943bf0b0d6b611c1341a42f83c5bd69d2","modified":1628394473033},{"_id":"public/tags/JSON/index.html","hash":"ae1370640216182983446196a7507be6b04f4f93","modified":1628394473033},{"_id":"public/tags/网络/index.html","hash":"06cd9aa8b7a8449126ee703389a2887d2b60ba3f","modified":1628394473033},{"_id":"public/tags/底层/index.html","hash":"dbb9369ed8fe99795d10a433ab56084919e8e66d","modified":1628394473033},{"_id":"public/tags/基础/index.html","hash":"edbfe6c2593eb52c409a4823d14b998440509dc7","modified":1628394473033},{"_id":"public/tags/shell/index.html","hash":"1eebba80bf6f77d5ef432819762cdba35ea8cb31","modified":1628394473033},{"_id":"public/tags/nginx/index.html","hash":"33a95985f443f56e2a5ca11a1084ff11f83df4e2","modified":1628394473033},{"_id":"public/tags/数据解析/index.html","hash":"b10c8830fd9d475f3f59539884b77945cc349c3e","modified":1628394473033},{"_id":"public/tags/static/index.html","hash":"f2093df34176259c393783eee1684251082f85fe","modified":1628394473033},{"_id":"public/tags/C/index.html","hash":"f9a6c8d5a879d31d5057bf162fead65b34ee10f2","modified":1628394473033},{"_id":"public/tags/变参/index.html","hash":"96b0f4149140c14f18d5bceb5c3a165cee10b16b","modified":1628394473033},{"_id":"public/tags/字节对齐/index.html","hash":"87e0bd2fbb5622ddd5560218c9b759db980e430b","modified":1628394473033},{"_id":"public/tags/动态库/index.html","hash":"c206bff26990ec7a0ad4b75776d359d2fbfb8e5f","modified":1628394473033},{"_id":"public/tags/静态库/index.html","hash":"772eb4e4775eff918e0b59eeb2d876625aed4472","modified":1628394473033},{"_id":"public/tags/非关系型数据库/index.html","hash":"585c10f887f10a160715d083c134599a2d99d876","modified":1628394473033},{"_id":"public/tags/redis/index.html","hash":"06ddbccddf25531ecbcf46f31d30d6c4d552bda9","modified":1628394473033},{"_id":"public/tags/hiredis/index.html","hash":"b32324244e540f291ea8b94a1ad7dd7f68fc2c2d","modified":1628394473033},{"_id":"public/tags/管道/index.html","hash":"d5d7d8dd8c782452c42c8dbd404c3b5779cf0ce1","modified":1628394473033},{"_id":"public/tags/IPC/index.html","hash":"51b54e8389a2a11a271a80ba43a07aacf8760993","modified":1628394473033},{"_id":"public/CNAME","hash":"094af6a92668d0dae0a970451b20b7facc1c786f","modified":1628394473033},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1628394473033},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1628394473033},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1628394473033},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1628394473033},{"_id":"public/img/go.png","hash":"86a8fc5239987561616653e86a97e7670beba95e","modified":1628394473033},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1628394473033},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1628394473033},{"_id":"public/css/custom.css","hash":"a3edaf3209176cd0a8db6828f8eacbe9afaf49d8","modified":1628394473033},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1628394473033},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1628394473033},{"_id":"public/css/index.css","hash":"008d58669661995a83cba13ef89abff75d680be5","modified":1628394473033},{"_id":"public/js/main.js","hash":"e42d0eb55afcdc3766743c29e597d82734f4dd95","modified":1628394473033},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1628394473033},{"_id":"public/img/ee.png","hash":"3acdc7b17e88985eba7ea129013e0cb718949a14","modified":1628394473033},{"_id":"public/img/me.png","hash":"7344cd52a327155255ed4206affd3f54a38668e5","modified":1628394473033}],"Category":[{"name":"Tools","_id":"cks2o0xen0004k057cwx329zb"},{"name":"Qt","parent":"cks2o0xen0004k057cwx329zb","_id":"cks2o0xf0000lk0577ipdesb2"},{"name":"Linux","_id":"cks2o0xf3000tk0570c50d26r"},{"name":"C++","_id":"cks2o0xf70017k057fd5r8zk3"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}],"Page":[{"_content":"{\n    \"name\": \"string\",\n    \"short_name\": \"Junzhou\",\n    \"theme_color\": \"#49b1f5\",\n    \"background_color\": \"#49b1f5\",\n    \"display\": \"standalone\",\n    \"scope\": \"/\",\n    \"start_url\": \"/\",\n    \"icons\": [\n        {\n          \"src\": \"images/pwaicons/36.png\",\n          \"sizes\": \"36x36\",\n          \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/48.png\",\n          \"sizes\": \"48x48\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"images/pwaicons/72.png\",\n          \"sizes\": \"72x72\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"images/pwaicons/96.png\",\n          \"sizes\": \"96x96\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"images/pwaicons/144.png\",\n          \"sizes\": \"144x144\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"images/pwaicons/192.png\",\n          \"sizes\": \"192x192\",\n          \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/512.png\",\n            \"sizes\": \"512x512\",\n            \"type\": \"image/png\"\n          }\n      ],\n      \"splash_pages\": null\n  }\n\n","source":"manifest.json","raw":"{\n    \"name\": \"string\",\n    \"short_name\": \"Junzhou\",\n    \"theme_color\": \"#49b1f5\",\n    \"background_color\": \"#49b1f5\",\n    \"display\": \"standalone\",\n    \"scope\": \"/\",\n    \"start_url\": \"/\",\n    \"icons\": [\n        {\n          \"src\": \"images/pwaicons/36.png\",\n          \"sizes\": \"36x36\",\n          \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/48.png\",\n          \"sizes\": \"48x48\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"images/pwaicons/72.png\",\n          \"sizes\": \"72x72\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"images/pwaicons/96.png\",\n          \"sizes\": \"96x96\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"images/pwaicons/144.png\",\n          \"sizes\": \"144x144\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"images/pwaicons/192.png\",\n          \"sizes\": \"192x192\",\n          \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/512.png\",\n            \"sizes\": \"512x512\",\n            \"type\": \"image/png\"\n          }\n      ],\n      \"splash_pages\": null\n  }\n\n","date":"2021-07-08T08:23:37.672Z","updated":"2021-07-08T08:23:37.621Z","path":"manifest.json","layout":"false","title":"","comments":1,"_id":"cks2o0xeg0000k057ab4qar07","content":"{\"name\":\"string\",\"short_name\":\"Junzhou\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/pwaicons/36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"cover":"https://tva1.sinaimg.cn/large/008i3skNly1gs9l9ly6j6j31900u0u0z.jpg","excerpt":"","more":"{\"name\":\"string\",\"short_name\":\"Junzhou\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/pwaicons/36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}"},{"title":"友情链接","date":"2021-07-08T07:15:28.000Z","type":"link","aside":false,"_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2021-07-08 15:15:28\ntype: \"link\"\naside: false\n---\n","updated":"2021-07-08T07:18:45.600Z","path":"link/index.html","comments":1,"layout":"page","_id":"cks2o0xel0002k057eygq4qjt","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"cover":"https://tva1.sinaimg.cn/large/008i3skNly1gs9l9ly6j6j31900u0u0z.jpg","excerpt":"","more":""},{"title":"标签","date":"2021-07-08T07:13:38.000Z","type":"tags","aside":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-07-08 15:13:38\ntype: \"tags\"\naside: false\n---\n","updated":"2021-07-08T07:14:52.845Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cks2o0xep0006k057glqj2w8f","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""},{"title":"分类","date":"2021-07-08T07:11:32.000Z","type":"categories","aside":false,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-07-08 15:11:32\ntype: \"categories\"\naside: false\n---\n","updated":"2021-07-08T08:54:14.448Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cks2o0xeq0008k057fl3yaws9","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""}],"Post":[{"title":"fastcgi简单使用","date":"2021-04-01T16:00:00.000Z","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gsn8jaaj62j30zk0k0t8w.jpg","_content":"\n### FastCGI\n\n- nginx 对于动态请求，无法直接处理，需要调用第三方模块去处理。\n- 动态请求，一般可以使用CGI程序去处理\n- 我们需要编写CGI程序，完成对应数据的处理\n\n### CGI\n\n- CGI是一段程序，运行在服务器上，帮助服务器来处理动态请求\n- 处理步骤\n  - 通过internet把用户请求发送到WEB服务器\n  - WEB服务器收到动态请求提交给CGI程序\n  - CGI进行处理，把结果反馈给WEB服务器\n  - WEB服务器把结果反馈给用户\n\n![nginx CGI ](https://tva1.sinaimg.cn/large/008i3skNly1gsn71boctoj31ni0hy77f.jpg)\n\n- WEB服务器没收到一个动态请求，就会创建一个子进程\n- 子进程CGI处理完请求后，就会被WEB服务器杀死\n- 大量的请求就需要不断的创建子进程，不断的杀死子进程，这样的效率就很低下\n- 为了解决子进程大量创建销毁带来的巨大开销，选用FastCGI \n\n### FastCGI\n\n- 主要将CGI程序在内存中进行了管理，也就是不会频繁的创建子进程和销毁子进程。\n\n- WEB服务器启动时会启动FastCGI\n\n- FastCGI 开始启动几个CGI程序，等待WEB服务器的请求到来\n\n- 有请求过来，FastCGI 就处理，处理完之后，不销毁CGI程序，让其阻塞等待。等到下一次任务到来时就继续工作。\n\n  \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7og7yf1j61820mgdhv02.jpg\" alt=\"image-20210720103511539\" style=\"zoom:33%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7po6cboj31ak0iegnt.jpg\" alt=\"image-20210720103633517\" style=\"zoom: 33%;\" />\n\n\n\n### spawn-fcgi\n\n- FastCGI 与nginx 是相互分离的，所以需要`spawn-fcgi`来做中间的桥梁\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7s2eq27j31cs0ka0uy.jpg\" alt=\"image-20210720103904653\" style=\"zoom: 33%;\" />\n\n- `spawn-fcgi`相当于一个代理工具，用于`nginx`和`fastcgi`之间的通信\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7whne3wj31jy0pidju.jpg\" alt=\"image-20210720104319230\" style=\"zoom:67%;\" />\n\n- nginx 中关于spawn-fcgi 的配置\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7zkjxxsj30km05qwev.jpg\" alt=\"image-20210720104617057\" style=\"zoom:50%;\" />\n\n>fastcgi_pass  web 服务器把数据要转发到的spawn-fcgi 的IP和PORT\n\n- spawn-fcgi 的使用\n\n  ```shell\n  spawn-fcgi -a IP -p PORT -f fastcgi程序\t\n  \n  IP 服务器的IP\n  PORT 服务器将数据发送到的端口\n  fastcgi: \tspawn-fcgi 需要启动的fastcgi的程序\n  \n  ```\n\n### fastcgi程序的使用\n\n#### fastcgi 在 nginx 的辅助配置文件\n\n```ini\n\nfastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;\nfastcgi_param  QUERY_STRING       $query_string; #请求的资源\nfastcgi_param  REQUEST_METHOD     $request_method;#请求的方法\nfastcgi_param  CONTENT_TYPE       $content_type;#文件的类型\nfastcgi_param  CONTENT_LENGTH     $content_length;#请求的内容长度\n\nfastcgi_param  SCRIPT_NAME        $fastcgi_script_name;#要处理的指令，nginx中server对应的location\nfastcgi_param  REQUEST_URI        $request_uri;#浏览器中请求的资源，不包括IP PORT\nfastcgi_param  DOCUMENT_URI       $document_uri;\nfastcgi_param  DOCUMENT_ROOT      $document_root;\nfastcgi_param  SERVER_PROTOCOL    $server_protocol;\nfastcgi_param  REQUEST_SCHEME     $scheme;\nfastcgi_param  HTTPS              $https if_not_empty;\n\nfastcgi_param  GATEWAY_INTERFACE  CGI/1.1;\nfastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;\n\nfastcgi_param  REMOTE_ADDR        $remote_addr;\nfastcgi_param  REMOTE_PORT        $remote_port;\nfastcgi_param  SERVER_ADDR        $server_addr;\nfastcgi_param  SERVER_PORT        $server_port;\nfastcgi_param  SERVER_NAME        $server_name;\n\n# PHP only, required if PHP was built with --enable-force-cgi-redirect\nfastcgi_param  REDIRECT_STATUS    200;\n```\n\n#### fastcgi 举例\n\n```c\n/*\n * echo.c --\n *\n *\tProduce a page containing all FastCGI inputs\n *\n *\n * Copyright (c) 1996 Open Market, Inc.\n *\n * See the file \"LICENSE.TERMS\" for information on usage and redistribution\n * of this file, and for a DISCLAIMER OF ALL WARRANTIES.\n *\n */\n#ifndef lint\nstatic const char rcsid[] = \"$Id: echo.c,v 1.5 1999/07/28 00:29:37 roberts Exp $\";\n#endif /* not lint */\n\n#include \"fcgi_config.h\"\n\n#include <stdlib.h>\n\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n#ifdef _WIN32\n#include <process.h>\n#else\nextern char **environ;\n#endif\n\n#include \"fcgi_stdio.h\"\n\n\nstatic void PrintEnv(char *label, char **envp)\n{\n    printf(\"%s:<br>\\n<pre>\\n\", label);\n    for ( ; *envp != NULL; envp++) {\n        printf(\"%s\\n\", *envp);\n    }\n    printf(\"</pre><p>\\n\");\n}\n\nint main ()\n{\n    char **initialEnv = environ;\n    int count = 0;\n\n    while (FCGI_Accept() >= 0) {\n        char *contentLength = getenv(\"CONTENT_LENGTH\");\n        int len;\n\n\tprintf(\"Content-type: text/html\\r\\n\"\n\t    \"\\r\\n\"\n\t    \"<title>FastCGI echo</title>\"\n\t    \"<h1>FastCGI echo</h1>\\n\"\n            \"Request number %d,  Process ID: %d<p>\\n\", ++count, getpid());\n\n        if (contentLength != NULL) {\n            len = strtol(contentLength, NULL, 10);\n        }\n        else {\n            len = 0;\n        }\n\n        if (len <= 0) {\n\t    printf(\"No data from standard input.<p>\\n\");\n        }\n        else {\n            int i, ch;\n\n\t    printf(\"Standard input:<br>\\n<pre>\\n\");\n            for (i = 0; i < len; i++) {\n                if ((ch = getchar()) < 0) {\n                    printf(\"Error: Not enough bytes received on standard input<p>\\n\");\n                    break;\n\t\t}\n                putchar(ch);\n            }\n            printf(\"\\n</pre><p>\\n\");\n        }\n\n        PrintEnv(\"Request environment\", environ);\n        PrintEnv(\"Initial environment\", initialEnv);\n    } /* while */\n\n    return 0;\n}\n\n```\n\n\n\n```c++\n\n#include <stdlib.h>\n#ifdef _WIN32\n#include <process.h>\n#else\n#include <unistd.h>\nextern char ** environ;\n#endif\n#include \"fcgio.h\"\n#include \"fcgi_config.h\"  // HAVE_IOSTREAM_WITHASSIGN_STREAMBUF\n\nusing namespace std;\n\n// Maximum number of bytes allowed to be read from stdin\nstatic const unsigned long STDIN_MAX = 1000000;\n\nstatic void penv(const char * const * envp)\n{\n    cout << \"<PRE>\\n\";\n    for ( ; *envp; ++envp)\n    {\n        cout << *envp << \"\\n\";\n    }\n    cout << \"</PRE>\\n\";\n}\n\nstatic long gstdin(FCGX_Request * request, char ** content)\n{\n    char * clenstr = FCGX_GetParam(\"CONTENT_LENGTH\", request->envp);\n    unsigned long clen = STDIN_MAX;\n\n    if (clenstr)\n    {\n        clen = strtol(clenstr, &clenstr, 10);\n        if (*clenstr)\n        {\n            cerr << \"can't parse \\\"CONTENT_LENGTH=\"\n                 << FCGX_GetParam(\"CONTENT_LENGTH\", request->envp)\n                 << \"\\\"\\n\";\n            clen = STDIN_MAX;\n        }\n\n        // *always* put a cap on the amount of data that will be read\n        if (clen > STDIN_MAX) clen = STDIN_MAX;\n\n        *content = new char[clen];\n\n        cin.read(*content, clen);\n        clen = cin.gcount();\n    }\n    else\n    {\n        // *never* read stdin when CONTENT_LENGTH is missing or unparsable\n        *content = 0;\n        clen = 0;\n    }\n\n    // Chew up any remaining stdin - this shouldn't be necessary\n    // but is because mod_fastcgi doesn't handle it correctly.\n\n    // ignore() doesn't set the eof bit in some versions of glibc++\n    // so use gcount() instead of eof()...\n    do cin.ignore(1024); while (cin.gcount() == 1024);\n\n    return clen;\n}\n\nint main (void)\n{\n    int count = 0;\n    long pid = getpid();\n\n    streambuf * cin_streambuf  = cin.rdbuf();\n    streambuf * cout_streambuf = cout.rdbuf();\n    streambuf * cerr_streambuf = cerr.rdbuf();\n\n    FCGX_Request request;\n\n    FCGX_Init();\n    FCGX_InitRequest(&request, 0, 0);\n\n    while (FCGX_Accept_r(&request) == 0)\n    {\n        // Note that the default bufsize (0) will cause the use of iostream\n        // methods that require positioning (such as peek(), seek(),\n        // unget() and putback()) to fail (in favour of more efficient IO).\n        fcgi_streambuf cin_fcgi_streambuf(request.in);\n        fcgi_streambuf cout_fcgi_streambuf(request.out);\n        fcgi_streambuf cerr_fcgi_streambuf(request.err);\n\n#if HAVE_IOSTREAM_WITHASSIGN_STREAMBUF\n        cin  = &cin_fcgi_streambuf;\n        cout = &cout_fcgi_streambuf;\n        cerr = &cerr_fcgi_streambuf;\n#else\n        cin.rdbuf(&cin_fcgi_streambuf);\n        cout.rdbuf(&cout_fcgi_streambuf);\n        cerr.rdbuf(&cerr_fcgi_streambuf);\n#endif\n\n        // Although FastCGI supports writing before reading,\n        // many http clients (browsers) don't support it (so\n        // the connection deadlocks until a timeout expires!).\n        char * content;\n        unsigned long clen = gstdin(&request, &content);\n\n        cout << \"Content-type: text/html\\r\\n\"\n                \"\\r\\n\"\n                \"<TITLE>echo-cpp</TITLE>\\n\"\n                \"<H1>echo-cpp</H1>\\n\"\n                \"<H4>PID: \" << pid << \"</H4>\\n\"\n                \"<H4>Request Number: \" << ++count << \"</H4>\\n\";\n\n        cout << \"<H4>Request Environment</H4>\\n\";\n        penv(request.envp);\n\n        cout << \"<H4>Process/Initial Environment</H4>\\n\";\n        penv(environ);\n\n        cout << \"<H4>Standard Input - \" << clen;\n        if (clen == STDIN_MAX) cout << \" (STDIN_MAX)\";\n        cout << \" bytes</H4>\\n\";\n        if (clen) cout.write(content, clen);\n\n        if (content) delete []content;\n\n        // If the output streambufs had non-zero bufsizes and\n        // were constructed outside of the accept loop (i.e.\n        // their destructor won't be called here), they would\n        // have to be flushed here.\n    }\n\n#if HAVE_IOSTREAM_WITHASSIGN_STREAMBUF\n    cin  = cin_streambuf;\n    cout = cout_streambuf;\n    cerr = cerr_streambuf;\n#else\n    cin.rdbuf(cin_streambuf);\n    cout.rdbuf(cout_streambuf);\n    cerr.rdbuf(cerr_streambuf);\n#endif\n\n    return 0;\n}\n```\n\n","source":"_posts/FastCGI.md","raw":"---\ntitle: fastcgi简单使用\ndate: 2021-04-02\ntags: \n  - fastcgi\ncategories:\n  - Tools\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gsn8jaaj62j30zk0k0t8w.jpg\n---\n\n### FastCGI\n\n- nginx 对于动态请求，无法直接处理，需要调用第三方模块去处理。\n- 动态请求，一般可以使用CGI程序去处理\n- 我们需要编写CGI程序，完成对应数据的处理\n\n### CGI\n\n- CGI是一段程序，运行在服务器上，帮助服务器来处理动态请求\n- 处理步骤\n  - 通过internet把用户请求发送到WEB服务器\n  - WEB服务器收到动态请求提交给CGI程序\n  - CGI进行处理，把结果反馈给WEB服务器\n  - WEB服务器把结果反馈给用户\n\n![nginx CGI ](https://tva1.sinaimg.cn/large/008i3skNly1gsn71boctoj31ni0hy77f.jpg)\n\n- WEB服务器没收到一个动态请求，就会创建一个子进程\n- 子进程CGI处理完请求后，就会被WEB服务器杀死\n- 大量的请求就需要不断的创建子进程，不断的杀死子进程，这样的效率就很低下\n- 为了解决子进程大量创建销毁带来的巨大开销，选用FastCGI \n\n### FastCGI\n\n- 主要将CGI程序在内存中进行了管理，也就是不会频繁的创建子进程和销毁子进程。\n\n- WEB服务器启动时会启动FastCGI\n\n- FastCGI 开始启动几个CGI程序，等待WEB服务器的请求到来\n\n- 有请求过来，FastCGI 就处理，处理完之后，不销毁CGI程序，让其阻塞等待。等到下一次任务到来时就继续工作。\n\n  \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7og7yf1j61820mgdhv02.jpg\" alt=\"image-20210720103511539\" style=\"zoom:33%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7po6cboj31ak0iegnt.jpg\" alt=\"image-20210720103633517\" style=\"zoom: 33%;\" />\n\n\n\n### spawn-fcgi\n\n- FastCGI 与nginx 是相互分离的，所以需要`spawn-fcgi`来做中间的桥梁\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7s2eq27j31cs0ka0uy.jpg\" alt=\"image-20210720103904653\" style=\"zoom: 33%;\" />\n\n- `spawn-fcgi`相当于一个代理工具，用于`nginx`和`fastcgi`之间的通信\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7whne3wj31jy0pidju.jpg\" alt=\"image-20210720104319230\" style=\"zoom:67%;\" />\n\n- nginx 中关于spawn-fcgi 的配置\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7zkjxxsj30km05qwev.jpg\" alt=\"image-20210720104617057\" style=\"zoom:50%;\" />\n\n>fastcgi_pass  web 服务器把数据要转发到的spawn-fcgi 的IP和PORT\n\n- spawn-fcgi 的使用\n\n  ```shell\n  spawn-fcgi -a IP -p PORT -f fastcgi程序\t\n  \n  IP 服务器的IP\n  PORT 服务器将数据发送到的端口\n  fastcgi: \tspawn-fcgi 需要启动的fastcgi的程序\n  \n  ```\n\n### fastcgi程序的使用\n\n#### fastcgi 在 nginx 的辅助配置文件\n\n```ini\n\nfastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;\nfastcgi_param  QUERY_STRING       $query_string; #请求的资源\nfastcgi_param  REQUEST_METHOD     $request_method;#请求的方法\nfastcgi_param  CONTENT_TYPE       $content_type;#文件的类型\nfastcgi_param  CONTENT_LENGTH     $content_length;#请求的内容长度\n\nfastcgi_param  SCRIPT_NAME        $fastcgi_script_name;#要处理的指令，nginx中server对应的location\nfastcgi_param  REQUEST_URI        $request_uri;#浏览器中请求的资源，不包括IP PORT\nfastcgi_param  DOCUMENT_URI       $document_uri;\nfastcgi_param  DOCUMENT_ROOT      $document_root;\nfastcgi_param  SERVER_PROTOCOL    $server_protocol;\nfastcgi_param  REQUEST_SCHEME     $scheme;\nfastcgi_param  HTTPS              $https if_not_empty;\n\nfastcgi_param  GATEWAY_INTERFACE  CGI/1.1;\nfastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;\n\nfastcgi_param  REMOTE_ADDR        $remote_addr;\nfastcgi_param  REMOTE_PORT        $remote_port;\nfastcgi_param  SERVER_ADDR        $server_addr;\nfastcgi_param  SERVER_PORT        $server_port;\nfastcgi_param  SERVER_NAME        $server_name;\n\n# PHP only, required if PHP was built with --enable-force-cgi-redirect\nfastcgi_param  REDIRECT_STATUS    200;\n```\n\n#### fastcgi 举例\n\n```c\n/*\n * echo.c --\n *\n *\tProduce a page containing all FastCGI inputs\n *\n *\n * Copyright (c) 1996 Open Market, Inc.\n *\n * See the file \"LICENSE.TERMS\" for information on usage and redistribution\n * of this file, and for a DISCLAIMER OF ALL WARRANTIES.\n *\n */\n#ifndef lint\nstatic const char rcsid[] = \"$Id: echo.c,v 1.5 1999/07/28 00:29:37 roberts Exp $\";\n#endif /* not lint */\n\n#include \"fcgi_config.h\"\n\n#include <stdlib.h>\n\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n#ifdef _WIN32\n#include <process.h>\n#else\nextern char **environ;\n#endif\n\n#include \"fcgi_stdio.h\"\n\n\nstatic void PrintEnv(char *label, char **envp)\n{\n    printf(\"%s:<br>\\n<pre>\\n\", label);\n    for ( ; *envp != NULL; envp++) {\n        printf(\"%s\\n\", *envp);\n    }\n    printf(\"</pre><p>\\n\");\n}\n\nint main ()\n{\n    char **initialEnv = environ;\n    int count = 0;\n\n    while (FCGI_Accept() >= 0) {\n        char *contentLength = getenv(\"CONTENT_LENGTH\");\n        int len;\n\n\tprintf(\"Content-type: text/html\\r\\n\"\n\t    \"\\r\\n\"\n\t    \"<title>FastCGI echo</title>\"\n\t    \"<h1>FastCGI echo</h1>\\n\"\n            \"Request number %d,  Process ID: %d<p>\\n\", ++count, getpid());\n\n        if (contentLength != NULL) {\n            len = strtol(contentLength, NULL, 10);\n        }\n        else {\n            len = 0;\n        }\n\n        if (len <= 0) {\n\t    printf(\"No data from standard input.<p>\\n\");\n        }\n        else {\n            int i, ch;\n\n\t    printf(\"Standard input:<br>\\n<pre>\\n\");\n            for (i = 0; i < len; i++) {\n                if ((ch = getchar()) < 0) {\n                    printf(\"Error: Not enough bytes received on standard input<p>\\n\");\n                    break;\n\t\t}\n                putchar(ch);\n            }\n            printf(\"\\n</pre><p>\\n\");\n        }\n\n        PrintEnv(\"Request environment\", environ);\n        PrintEnv(\"Initial environment\", initialEnv);\n    } /* while */\n\n    return 0;\n}\n\n```\n\n\n\n```c++\n\n#include <stdlib.h>\n#ifdef _WIN32\n#include <process.h>\n#else\n#include <unistd.h>\nextern char ** environ;\n#endif\n#include \"fcgio.h\"\n#include \"fcgi_config.h\"  // HAVE_IOSTREAM_WITHASSIGN_STREAMBUF\n\nusing namespace std;\n\n// Maximum number of bytes allowed to be read from stdin\nstatic const unsigned long STDIN_MAX = 1000000;\n\nstatic void penv(const char * const * envp)\n{\n    cout << \"<PRE>\\n\";\n    for ( ; *envp; ++envp)\n    {\n        cout << *envp << \"\\n\";\n    }\n    cout << \"</PRE>\\n\";\n}\n\nstatic long gstdin(FCGX_Request * request, char ** content)\n{\n    char * clenstr = FCGX_GetParam(\"CONTENT_LENGTH\", request->envp);\n    unsigned long clen = STDIN_MAX;\n\n    if (clenstr)\n    {\n        clen = strtol(clenstr, &clenstr, 10);\n        if (*clenstr)\n        {\n            cerr << \"can't parse \\\"CONTENT_LENGTH=\"\n                 << FCGX_GetParam(\"CONTENT_LENGTH\", request->envp)\n                 << \"\\\"\\n\";\n            clen = STDIN_MAX;\n        }\n\n        // *always* put a cap on the amount of data that will be read\n        if (clen > STDIN_MAX) clen = STDIN_MAX;\n\n        *content = new char[clen];\n\n        cin.read(*content, clen);\n        clen = cin.gcount();\n    }\n    else\n    {\n        // *never* read stdin when CONTENT_LENGTH is missing or unparsable\n        *content = 0;\n        clen = 0;\n    }\n\n    // Chew up any remaining stdin - this shouldn't be necessary\n    // but is because mod_fastcgi doesn't handle it correctly.\n\n    // ignore() doesn't set the eof bit in some versions of glibc++\n    // so use gcount() instead of eof()...\n    do cin.ignore(1024); while (cin.gcount() == 1024);\n\n    return clen;\n}\n\nint main (void)\n{\n    int count = 0;\n    long pid = getpid();\n\n    streambuf * cin_streambuf  = cin.rdbuf();\n    streambuf * cout_streambuf = cout.rdbuf();\n    streambuf * cerr_streambuf = cerr.rdbuf();\n\n    FCGX_Request request;\n\n    FCGX_Init();\n    FCGX_InitRequest(&request, 0, 0);\n\n    while (FCGX_Accept_r(&request) == 0)\n    {\n        // Note that the default bufsize (0) will cause the use of iostream\n        // methods that require positioning (such as peek(), seek(),\n        // unget() and putback()) to fail (in favour of more efficient IO).\n        fcgi_streambuf cin_fcgi_streambuf(request.in);\n        fcgi_streambuf cout_fcgi_streambuf(request.out);\n        fcgi_streambuf cerr_fcgi_streambuf(request.err);\n\n#if HAVE_IOSTREAM_WITHASSIGN_STREAMBUF\n        cin  = &cin_fcgi_streambuf;\n        cout = &cout_fcgi_streambuf;\n        cerr = &cerr_fcgi_streambuf;\n#else\n        cin.rdbuf(&cin_fcgi_streambuf);\n        cout.rdbuf(&cout_fcgi_streambuf);\n        cerr.rdbuf(&cerr_fcgi_streambuf);\n#endif\n\n        // Although FastCGI supports writing before reading,\n        // many http clients (browsers) don't support it (so\n        // the connection deadlocks until a timeout expires!).\n        char * content;\n        unsigned long clen = gstdin(&request, &content);\n\n        cout << \"Content-type: text/html\\r\\n\"\n                \"\\r\\n\"\n                \"<TITLE>echo-cpp</TITLE>\\n\"\n                \"<H1>echo-cpp</H1>\\n\"\n                \"<H4>PID: \" << pid << \"</H4>\\n\"\n                \"<H4>Request Number: \" << ++count << \"</H4>\\n\";\n\n        cout << \"<H4>Request Environment</H4>\\n\";\n        penv(request.envp);\n\n        cout << \"<H4>Process/Initial Environment</H4>\\n\";\n        penv(environ);\n\n        cout << \"<H4>Standard Input - \" << clen;\n        if (clen == STDIN_MAX) cout << \" (STDIN_MAX)\";\n        cout << \" bytes</H4>\\n\";\n        if (clen) cout.write(content, clen);\n\n        if (content) delete []content;\n\n        // If the output streambufs had non-zero bufsizes and\n        // were constructed outside of the accept loop (i.e.\n        // their destructor won't be called here), they would\n        // have to be flushed here.\n    }\n\n#if HAVE_IOSTREAM_WITHASSIGN_STREAMBUF\n    cin  = cin_streambuf;\n    cout = cout_streambuf;\n    cerr = cerr_streambuf;\n#else\n    cin.rdbuf(cin_streambuf);\n    cout.rdbuf(cout_streambuf);\n    cerr.rdbuf(cerr_streambuf);\n#endif\n\n    return 0;\n}\n```\n\n","slug":"FastCGI","published":1,"updated":"2021-07-20T03:05:40.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xej0001k0570ke5d6vh","content":"<h3 id=\"FastCGI\"><a href=\"#FastCGI\" class=\"headerlink\" title=\"FastCGI\"></a>FastCGI</h3><ul>\n<li>nginx 对于动态请求，无法直接处理，需要调用第三方模块去处理。</li>\n<li>动态请求，一般可以使用CGI程序去处理</li>\n<li>我们需要编写CGI程序，完成对应数据的处理</li>\n</ul>\n<h3 id=\"CGI\"><a href=\"#CGI\" class=\"headerlink\" title=\"CGI\"></a>CGI</h3><ul>\n<li>CGI是一段程序，运行在服务器上，帮助服务器来处理动态请求</li>\n<li>处理步骤<ul>\n<li>通过internet把用户请求发送到WEB服务器</li>\n<li>WEB服务器收到动态请求提交给CGI程序</li>\n<li>CGI进行处理，把结果反馈给WEB服务器</li>\n<li>WEB服务器把结果反馈给用户</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn71boctoj31ni0hy77f.jpg\" alt=\"nginx CGI \"></p>\n<ul>\n<li>WEB服务器没收到一个动态请求，就会创建一个子进程</li>\n<li>子进程CGI处理完请求后，就会被WEB服务器杀死</li>\n<li>大量的请求就需要不断的创建子进程，不断的杀死子进程，这样的效率就很低下</li>\n<li>为了解决子进程大量创建销毁带来的巨大开销，选用FastCGI </li>\n</ul>\n<h3 id=\"FastCGI-1\"><a href=\"#FastCGI-1\" class=\"headerlink\" title=\"FastCGI\"></a>FastCGI</h3><ul>\n<li><p>主要将CGI程序在内存中进行了管理，也就是不会频繁的创建子进程和销毁子进程。</p>\n</li>\n<li><p>WEB服务器启动时会启动FastCGI</p>\n</li>\n<li><p>FastCGI 开始启动几个CGI程序，等待WEB服务器的请求到来</p>\n</li>\n<li><p>有请求过来，FastCGI 就处理，处理完之后，不销毁CGI程序，让其阻塞等待。等到下一次任务到来时就继续工作。</p>\n</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7og7yf1j61820mgdhv02.jpg\" alt=\"image-20210720103511539\" style=\"zoom:33%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7po6cboj31ak0iegnt.jpg\" alt=\"image-20210720103633517\" style=\"zoom: 33%;\" />\n\n\n\n<h3 id=\"spawn-fcgi\"><a href=\"#spawn-fcgi\" class=\"headerlink\" title=\"spawn-fcgi\"></a>spawn-fcgi</h3><ul>\n<li>FastCGI 与nginx 是相互分离的，所以需要<code>spawn-fcgi</code>来做中间的桥梁</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7s2eq27j31cs0ka0uy.jpg\" alt=\"image-20210720103904653\" style=\"zoom: 33%;\" />\n\n<ul>\n<li><code>spawn-fcgi</code>相当于一个代理工具，用于<code>nginx</code>和<code>fastcgi</code>之间的通信</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7whne3wj31jy0pidju.jpg\" alt=\"image-20210720104319230\" style=\"zoom:67%;\" />\n\n<ul>\n<li>nginx 中关于spawn-fcgi 的配置</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7zkjxxsj30km05qwev.jpg\" alt=\"image-20210720104617057\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>fastcgi_pass  web 服务器把数据要转发到的spawn-fcgi 的IP和PORT</p>\n</blockquote>\n<ul>\n<li><p>spawn-fcgi 的使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spawn-fcgi -a IP -p PORT -f fastcgi程序\t</span><br><span class=\"line\"></span><br><span class=\"line\">IP 服务器的IP</span><br><span class=\"line\">PORT 服务器将数据发送到的端口</span><br><span class=\"line\">fastcgi: \tspawn-fcgi 需要启动的fastcgi的程序</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"fastcgi程序的使用\"><a href=\"#fastcgi程序的使用\" class=\"headerlink\" title=\"fastcgi程序的使用\"></a>fastcgi程序的使用</h3><h4 id=\"fastcgi-在-nginx-的辅助配置文件\"><a href=\"#fastcgi-在-nginx-的辅助配置文件\" class=\"headerlink\" title=\"fastcgi 在 nginx 的辅助配置文件\"></a>fastcgi 在 nginx 的辅助配置文件</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  QUERY_STRING       $query_string<span class=\"comment\">; #请求的资源</span></span><br><span class=\"line\">fastcgi_param  REQUEST_METHOD     $request_method<span class=\"comment\">;#请求的方法</span></span><br><span class=\"line\">fastcgi_param  CONTENT_TYPE       $content_type<span class=\"comment\">;#文件的类型</span></span><br><span class=\"line\">fastcgi_param  CONTENT_LENGTH     $content_length<span class=\"comment\">;#请求的内容长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">fastcgi_param  SCRIPT_NAME        $fastcgi_script_name<span class=\"comment\">;#要处理的指令，nginx中server对应的location</span></span><br><span class=\"line\">fastcgi_param  REQUEST_URI        $request_uri<span class=\"comment\">;#浏览器中请求的资源，不包括IP PORT</span></span><br><span class=\"line\">fastcgi_param  DOCUMENT_URI       $document_uri<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  DOCUMENT_ROOT      $document_root<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  SERVER_PROTOCOL    $server_protocol<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  REQUEST_SCHEME     $scheme<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  HTTPS              $https if_not_empty<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fastcgi_param  GATEWAY_INTERFACE  CGI/1.1<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fastcgi_param  REMOTE_ADDR        $remote_addr<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  REMOTE_PORT        $remote_port<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  SERVER_ADDR        $server_addr<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  SERVER_PORT        $server_port<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  SERVER_NAME        $server_name<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PHP only, required if PHP was built with --enable-force-cgi-redirect</span></span><br><span class=\"line\">fastcgi_param  REDIRECT_STATUS    200<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fastcgi-举例\"><a href=\"#fastcgi-举例\" class=\"headerlink\" title=\"fastcgi 举例\"></a>fastcgi 举例</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * echo.c --</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *\tProduce a page containing all FastCGI inputs</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 1996 Open Market, Inc.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * See the file &quot;LICENSE.TERMS&quot; for information on usage and redistribution</span></span><br><span class=\"line\"><span class=\"comment\"> * of this file, and for a DISCLAIMER OF ALL WARRANTIES.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> lint</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> rcsid[] = <span class=\"string\">&quot;$Id: echo.c,v 1.5 1999/07/28 00:29:37 roberts Exp $&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* not lint */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgi_config.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_UNISTD_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _WIN32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;process.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">char</span> **environ;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgi_stdio.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintEnv</span><span class=\"params\">(<span class=\"keyword\">char</span> *label, <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s:&lt;br&gt;\\n&lt;pre&gt;\\n&quot;</span>, label);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; *envp != <span class=\"literal\">NULL</span>; envp++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, *envp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&lt;/pre&gt;&lt;p&gt;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> **initialEnv = environ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (FCGI_Accept() &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> *contentLength = getenv(<span class=\"string\">&quot;CONTENT_LENGTH&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content-type: text/html\\r\\n&quot;</span></span><br><span class=\"line\">\t    <span class=\"string\">&quot;\\r\\n&quot;</span></span><br><span class=\"line\">\t    <span class=\"string\">&quot;&lt;title&gt;FastCGI echo&lt;/title&gt;&quot;</span></span><br><span class=\"line\">\t    <span class=\"string\">&quot;&lt;h1&gt;FastCGI echo&lt;/h1&gt;\\n&quot;</span></span><br><span class=\"line\">            <span class=\"string\">&quot;Request number %d,  Process ID: %d&lt;p&gt;\\n&quot;</span>, ++count, getpid());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (contentLength != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            len = strtol(contentLength, <span class=\"literal\">NULL</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No data from standard input.&lt;p&gt;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i, ch;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Standard input:&lt;br&gt;\\n&lt;pre&gt;\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((ch = getchar()) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Error: Not enough bytes received on standard input&lt;p&gt;\\n&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(ch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&lt;/pre&gt;&lt;p&gt;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        PrintEnv(<span class=\"string\">&quot;Request environment&quot;</span>, environ);</span><br><span class=\"line\">        PrintEnv(<span class=\"string\">&quot;Initial environment&quot;</span>, initialEnv);</span><br><span class=\"line\">    &#125; <span class=\"comment\">/* while */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _WIN32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;process.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">char</span> ** environ;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgi_config.h&quot;</span>  <span class=\"comment\">// HAVE_IOSTREAM_WITHASSIGN_STREAMBUF</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Maximum number of bytes allowed to be read from stdin</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> STDIN_MAX = <span class=\"number\">1000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">penv</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"keyword\">const</span> * envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&lt;PRE&gt;\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; *envp; ++envp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *envp &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&lt;/PRE&gt;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">gstdin</span><span class=\"params\">(FCGX_Request * request, <span class=\"keyword\">char</span> ** content)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * clenstr = <span class=\"built_in\">FCGX_GetParam</span>(<span class=\"string\">&quot;CONTENT_LENGTH&quot;</span>, request-&gt;envp);</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> clen = STDIN_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clenstr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        clen = <span class=\"built_in\">strtol</span>(clenstr, &amp;clenstr, <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*clenstr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cerr &lt;&lt; <span class=\"string\">&quot;can&#x27;t parse \\&quot;CONTENT_LENGTH=&quot;</span></span><br><span class=\"line\">                 &lt;&lt; <span class=\"built_in\">FCGX_GetParam</span>(<span class=\"string\">&quot;CONTENT_LENGTH&quot;</span>, request-&gt;envp)</span><br><span class=\"line\">                 &lt;&lt; <span class=\"string\">&quot;\\&quot;\\n&quot;</span>;</span><br><span class=\"line\">            clen = STDIN_MAX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// *always* put a cap on the amount of data that will be read</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clen &gt; STDIN_MAX) clen = STDIN_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">        *content = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[clen];</span><br><span class=\"line\"></span><br><span class=\"line\">        cin.<span class=\"built_in\">read</span>(*content, clen);</span><br><span class=\"line\">        clen = cin.<span class=\"built_in\">gcount</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// *never* read stdin when CONTENT_LENGTH is missing or unparsable</span></span><br><span class=\"line\">        *content = <span class=\"number\">0</span>;</span><br><span class=\"line\">        clen = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Chew up any remaining stdin - this shouldn&#x27;t be necessary</span></span><br><span class=\"line\">    <span class=\"comment\">// but is because mod_fastcgi doesn&#x27;t handle it correctly.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ignore() doesn&#x27;t set the eof bit in some versions of glibc++</span></span><br><span class=\"line\">    <span class=\"comment\">// so use gcount() instead of eof()...</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> cin.<span class=\"built_in\">ignore</span>(<span class=\"number\">1024</span>); <span class=\"keyword\">while</span> (cin.<span class=\"built_in\">gcount</span>() == <span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> clen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> pid = <span class=\"built_in\">getpid</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    streambuf * cin_streambuf  = cin.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    streambuf * cout_streambuf = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    streambuf * cerr_streambuf = cerr.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    FCGX_Request request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">FCGX_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">FCGX_InitRequest</span>(&amp;request, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">FCGX_Accept_r</span>(&amp;request) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Note that the default bufsize (0) will cause the use of iostream</span></span><br><span class=\"line\">        <span class=\"comment\">// methods that require positioning (such as peek(), seek(),</span></span><br><span class=\"line\">        <span class=\"comment\">// unget() and putback()) to fail (in favour of more efficient IO).</span></span><br><span class=\"line\">        <span class=\"function\">fcgi_streambuf <span class=\"title\">cin_fcgi_streambuf</span><span class=\"params\">(request.in)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">fcgi_streambuf <span class=\"title\">cout_fcgi_streambuf</span><span class=\"params\">(request.out)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">fcgi_streambuf <span class=\"title\">cerr_fcgi_streambuf</span><span class=\"params\">(request.err)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> HAVE_IOSTREAM_WITHASSIGN_STREAMBUF</span></span><br><span class=\"line\">        cin  = &amp;cin_fcgi_streambuf;</span><br><span class=\"line\">        cout = &amp;cout_fcgi_streambuf;</span><br><span class=\"line\">        cerr = &amp;cerr_fcgi_streambuf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">        cin.<span class=\"built_in\">rdbuf</span>(&amp;cin_fcgi_streambuf);</span><br><span class=\"line\">        cout.<span class=\"built_in\">rdbuf</span>(&amp;cout_fcgi_streambuf);</span><br><span class=\"line\">        cerr.<span class=\"built_in\">rdbuf</span>(&amp;cerr_fcgi_streambuf);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Although FastCGI supports writing before reading,</span></span><br><span class=\"line\">        <span class=\"comment\">// many http clients (browsers) don&#x27;t support it (so</span></span><br><span class=\"line\">        <span class=\"comment\">// the connection deadlocks until a timeout expires!).</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> * content;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> clen = <span class=\"built_in\">gstdin</span>(&amp;request, &amp;content);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Content-type: text/html\\r\\n&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;\\r\\n&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;TITLE&gt;echo-cpp&lt;/TITLE&gt;\\n&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;H1&gt;echo-cpp&lt;/H1&gt;\\n&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;H4&gt;PID: &quot;</span> &lt;&lt; pid &lt;&lt; <span class=\"string\">&quot;&lt;/H4&gt;\\n&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;H4&gt;Request Number: &quot;</span> &lt;&lt; ++count &lt;&lt; <span class=\"string\">&quot;&lt;/H4&gt;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt;H4&gt;Request Environment&lt;/H4&gt;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">penv</span>(request.envp);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt;H4&gt;Process/Initial Environment&lt;/H4&gt;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">penv</span>(environ);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt;H4&gt;Standard Input - &quot;</span> &lt;&lt; clen;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clen == STDIN_MAX) cout &lt;&lt; <span class=\"string\">&quot; (STDIN_MAX)&quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; bytes&lt;/H4&gt;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clen) cout.<span class=\"built_in\">write</span>(content, clen);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content) <span class=\"keyword\">delete</span> []content;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If the output streambufs had non-zero bufsizes and</span></span><br><span class=\"line\">        <span class=\"comment\">// were constructed outside of the accept loop (i.e.</span></span><br><span class=\"line\">        <span class=\"comment\">// their destructor won&#x27;t be called here), they would</span></span><br><span class=\"line\">        <span class=\"comment\">// have to be flushed here.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> HAVE_IOSTREAM_WITHASSIGN_STREAMBUF</span></span><br><span class=\"line\">    cin  = cin_streambuf;</span><br><span class=\"line\">    cout = cout_streambuf;</span><br><span class=\"line\">    cerr = cerr_streambuf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    cin.<span class=\"built_in\">rdbuf</span>(cin_streambuf);</span><br><span class=\"line\">    cout.<span class=\"built_in\">rdbuf</span>(cout_streambuf);</span><br><span class=\"line\">    cerr.<span class=\"built_in\">rdbuf</span>(cerr_streambuf);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"FastCGI\"><a href=\"#FastCGI\" class=\"headerlink\" title=\"FastCGI\"></a>FastCGI</h3><ul>\n<li>nginx 对于动态请求，无法直接处理，需要调用第三方模块去处理。</li>\n<li>动态请求，一般可以使用CGI程序去处理</li>\n<li>我们需要编写CGI程序，完成对应数据的处理</li>\n</ul>\n<h3 id=\"CGI\"><a href=\"#CGI\" class=\"headerlink\" title=\"CGI\"></a>CGI</h3><ul>\n<li>CGI是一段程序，运行在服务器上，帮助服务器来处理动态请求</li>\n<li>处理步骤<ul>\n<li>通过internet把用户请求发送到WEB服务器</li>\n<li>WEB服务器收到动态请求提交给CGI程序</li>\n<li>CGI进行处理，把结果反馈给WEB服务器</li>\n<li>WEB服务器把结果反馈给用户</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn71boctoj31ni0hy77f.jpg\" alt=\"nginx CGI \"></p>\n<ul>\n<li>WEB服务器没收到一个动态请求，就会创建一个子进程</li>\n<li>子进程CGI处理完请求后，就会被WEB服务器杀死</li>\n<li>大量的请求就需要不断的创建子进程，不断的杀死子进程，这样的效率就很低下</li>\n<li>为了解决子进程大量创建销毁带来的巨大开销，选用FastCGI </li>\n</ul>\n<h3 id=\"FastCGI-1\"><a href=\"#FastCGI-1\" class=\"headerlink\" title=\"FastCGI\"></a>FastCGI</h3><ul>\n<li><p>主要将CGI程序在内存中进行了管理，也就是不会频繁的创建子进程和销毁子进程。</p>\n</li>\n<li><p>WEB服务器启动时会启动FastCGI</p>\n</li>\n<li><p>FastCGI 开始启动几个CGI程序，等待WEB服务器的请求到来</p>\n</li>\n<li><p>有请求过来，FastCGI 就处理，处理完之后，不销毁CGI程序，让其阻塞等待。等到下一次任务到来时就继续工作。</p>\n</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7og7yf1j61820mgdhv02.jpg\" alt=\"image-20210720103511539\" style=\"zoom:33%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7po6cboj31ak0iegnt.jpg\" alt=\"image-20210720103633517\" style=\"zoom: 33%;\" />\n\n\n\n<h3 id=\"spawn-fcgi\"><a href=\"#spawn-fcgi\" class=\"headerlink\" title=\"spawn-fcgi\"></a>spawn-fcgi</h3><ul>\n<li>FastCGI 与nginx 是相互分离的，所以需要<code>spawn-fcgi</code>来做中间的桥梁</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7s2eq27j31cs0ka0uy.jpg\" alt=\"image-20210720103904653\" style=\"zoom: 33%;\" />\n\n<ul>\n<li><code>spawn-fcgi</code>相当于一个代理工具，用于<code>nginx</code>和<code>fastcgi</code>之间的通信</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7whne3wj31jy0pidju.jpg\" alt=\"image-20210720104319230\" style=\"zoom:67%;\" />\n\n<ul>\n<li>nginx 中关于spawn-fcgi 的配置</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn7zkjxxsj30km05qwev.jpg\" alt=\"image-20210720104617057\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>fastcgi_pass  web 服务器把数据要转发到的spawn-fcgi 的IP和PORT</p>\n</blockquote>\n<ul>\n<li><p>spawn-fcgi 的使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spawn-fcgi -a IP -p PORT -f fastcgi程序\t</span><br><span class=\"line\"></span><br><span class=\"line\">IP 服务器的IP</span><br><span class=\"line\">PORT 服务器将数据发送到的端口</span><br><span class=\"line\">fastcgi: \tspawn-fcgi 需要启动的fastcgi的程序</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"fastcgi程序的使用\"><a href=\"#fastcgi程序的使用\" class=\"headerlink\" title=\"fastcgi程序的使用\"></a>fastcgi程序的使用</h3><h4 id=\"fastcgi-在-nginx-的辅助配置文件\"><a href=\"#fastcgi-在-nginx-的辅助配置文件\" class=\"headerlink\" title=\"fastcgi 在 nginx 的辅助配置文件\"></a>fastcgi 在 nginx 的辅助配置文件</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  QUERY_STRING       $query_string<span class=\"comment\">; #请求的资源</span></span><br><span class=\"line\">fastcgi_param  REQUEST_METHOD     $request_method<span class=\"comment\">;#请求的方法</span></span><br><span class=\"line\">fastcgi_param  CONTENT_TYPE       $content_type<span class=\"comment\">;#文件的类型</span></span><br><span class=\"line\">fastcgi_param  CONTENT_LENGTH     $content_length<span class=\"comment\">;#请求的内容长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">fastcgi_param  SCRIPT_NAME        $fastcgi_script_name<span class=\"comment\">;#要处理的指令，nginx中server对应的location</span></span><br><span class=\"line\">fastcgi_param  REQUEST_URI        $request_uri<span class=\"comment\">;#浏览器中请求的资源，不包括IP PORT</span></span><br><span class=\"line\">fastcgi_param  DOCUMENT_URI       $document_uri<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  DOCUMENT_ROOT      $document_root<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  SERVER_PROTOCOL    $server_protocol<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  REQUEST_SCHEME     $scheme<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  HTTPS              $https if_not_empty<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fastcgi_param  GATEWAY_INTERFACE  CGI/1.1<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fastcgi_param  REMOTE_ADDR        $remote_addr<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  REMOTE_PORT        $remote_port<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  SERVER_ADDR        $server_addr<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  SERVER_PORT        $server_port<span class=\"comment\">;</span></span><br><span class=\"line\">fastcgi_param  SERVER_NAME        $server_name<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PHP only, required if PHP was built with --enable-force-cgi-redirect</span></span><br><span class=\"line\">fastcgi_param  REDIRECT_STATUS    200<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fastcgi-举例\"><a href=\"#fastcgi-举例\" class=\"headerlink\" title=\"fastcgi 举例\"></a>fastcgi 举例</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * echo.c --</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *\tProduce a page containing all FastCGI inputs</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 1996 Open Market, Inc.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * See the file &quot;LICENSE.TERMS&quot; for information on usage and redistribution</span></span><br><span class=\"line\"><span class=\"comment\"> * of this file, and for a DISCLAIMER OF ALL WARRANTIES.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> lint</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> rcsid[] = <span class=\"string\">&quot;$Id: echo.c,v 1.5 1999/07/28 00:29:37 roberts Exp $&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* not lint */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgi_config.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_UNISTD_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _WIN32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;process.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">char</span> **environ;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgi_stdio.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintEnv</span><span class=\"params\">(<span class=\"keyword\">char</span> *label, <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s:&lt;br&gt;\\n&lt;pre&gt;\\n&quot;</span>, label);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; *envp != <span class=\"literal\">NULL</span>; envp++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, *envp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&lt;/pre&gt;&lt;p&gt;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> **initialEnv = environ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (FCGI_Accept() &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> *contentLength = getenv(<span class=\"string\">&quot;CONTENT_LENGTH&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content-type: text/html\\r\\n&quot;</span></span><br><span class=\"line\">\t    <span class=\"string\">&quot;\\r\\n&quot;</span></span><br><span class=\"line\">\t    <span class=\"string\">&quot;&lt;title&gt;FastCGI echo&lt;/title&gt;&quot;</span></span><br><span class=\"line\">\t    <span class=\"string\">&quot;&lt;h1&gt;FastCGI echo&lt;/h1&gt;\\n&quot;</span></span><br><span class=\"line\">            <span class=\"string\">&quot;Request number %d,  Process ID: %d&lt;p&gt;\\n&quot;</span>, ++count, getpid());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (contentLength != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            len = strtol(contentLength, <span class=\"literal\">NULL</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No data from standard input.&lt;p&gt;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i, ch;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Standard input:&lt;br&gt;\\n&lt;pre&gt;\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((ch = getchar()) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Error: Not enough bytes received on standard input&lt;p&gt;\\n&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(ch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&lt;/pre&gt;&lt;p&gt;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        PrintEnv(<span class=\"string\">&quot;Request environment&quot;</span>, environ);</span><br><span class=\"line\">        PrintEnv(<span class=\"string\">&quot;Initial environment&quot;</span>, initialEnv);</span><br><span class=\"line\">    &#125; <span class=\"comment\">/* while */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _WIN32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;process.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">char</span> ** environ;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgi_config.h&quot;</span>  <span class=\"comment\">// HAVE_IOSTREAM_WITHASSIGN_STREAMBUF</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Maximum number of bytes allowed to be read from stdin</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> STDIN_MAX = <span class=\"number\">1000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">penv</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"keyword\">const</span> * envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&lt;PRE&gt;\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; *envp; ++envp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; *envp &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;&lt;/PRE&gt;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">gstdin</span><span class=\"params\">(FCGX_Request * request, <span class=\"keyword\">char</span> ** content)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * clenstr = <span class=\"built_in\">FCGX_GetParam</span>(<span class=\"string\">&quot;CONTENT_LENGTH&quot;</span>, request-&gt;envp);</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> clen = STDIN_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clenstr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        clen = <span class=\"built_in\">strtol</span>(clenstr, &amp;clenstr, <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*clenstr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cerr &lt;&lt; <span class=\"string\">&quot;can&#x27;t parse \\&quot;CONTENT_LENGTH=&quot;</span></span><br><span class=\"line\">                 &lt;&lt; <span class=\"built_in\">FCGX_GetParam</span>(<span class=\"string\">&quot;CONTENT_LENGTH&quot;</span>, request-&gt;envp)</span><br><span class=\"line\">                 &lt;&lt; <span class=\"string\">&quot;\\&quot;\\n&quot;</span>;</span><br><span class=\"line\">            clen = STDIN_MAX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// *always* put a cap on the amount of data that will be read</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clen &gt; STDIN_MAX) clen = STDIN_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">        *content = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[clen];</span><br><span class=\"line\"></span><br><span class=\"line\">        cin.<span class=\"built_in\">read</span>(*content, clen);</span><br><span class=\"line\">        clen = cin.<span class=\"built_in\">gcount</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// *never* read stdin when CONTENT_LENGTH is missing or unparsable</span></span><br><span class=\"line\">        *content = <span class=\"number\">0</span>;</span><br><span class=\"line\">        clen = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Chew up any remaining stdin - this shouldn&#x27;t be necessary</span></span><br><span class=\"line\">    <span class=\"comment\">// but is because mod_fastcgi doesn&#x27;t handle it correctly.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ignore() doesn&#x27;t set the eof bit in some versions of glibc++</span></span><br><span class=\"line\">    <span class=\"comment\">// so use gcount() instead of eof()...</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> cin.<span class=\"built_in\">ignore</span>(<span class=\"number\">1024</span>); <span class=\"keyword\">while</span> (cin.<span class=\"built_in\">gcount</span>() == <span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> clen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> pid = <span class=\"built_in\">getpid</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    streambuf * cin_streambuf  = cin.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    streambuf * cout_streambuf = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    streambuf * cerr_streambuf = cerr.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    FCGX_Request request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">FCGX_Init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">FCGX_InitRequest</span>(&amp;request, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">FCGX_Accept_r</span>(&amp;request) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Note that the default bufsize (0) will cause the use of iostream</span></span><br><span class=\"line\">        <span class=\"comment\">// methods that require positioning (such as peek(), seek(),</span></span><br><span class=\"line\">        <span class=\"comment\">// unget() and putback()) to fail (in favour of more efficient IO).</span></span><br><span class=\"line\">        <span class=\"function\">fcgi_streambuf <span class=\"title\">cin_fcgi_streambuf</span><span class=\"params\">(request.in)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">fcgi_streambuf <span class=\"title\">cout_fcgi_streambuf</span><span class=\"params\">(request.out)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">fcgi_streambuf <span class=\"title\">cerr_fcgi_streambuf</span><span class=\"params\">(request.err)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> HAVE_IOSTREAM_WITHASSIGN_STREAMBUF</span></span><br><span class=\"line\">        cin  = &amp;cin_fcgi_streambuf;</span><br><span class=\"line\">        cout = &amp;cout_fcgi_streambuf;</span><br><span class=\"line\">        cerr = &amp;cerr_fcgi_streambuf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">        cin.<span class=\"built_in\">rdbuf</span>(&amp;cin_fcgi_streambuf);</span><br><span class=\"line\">        cout.<span class=\"built_in\">rdbuf</span>(&amp;cout_fcgi_streambuf);</span><br><span class=\"line\">        cerr.<span class=\"built_in\">rdbuf</span>(&amp;cerr_fcgi_streambuf);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Although FastCGI supports writing before reading,</span></span><br><span class=\"line\">        <span class=\"comment\">// many http clients (browsers) don&#x27;t support it (so</span></span><br><span class=\"line\">        <span class=\"comment\">// the connection deadlocks until a timeout expires!).</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> * content;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> clen = <span class=\"built_in\">gstdin</span>(&amp;request, &amp;content);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Content-type: text/html\\r\\n&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;\\r\\n&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;TITLE&gt;echo-cpp&lt;/TITLE&gt;\\n&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;H1&gt;echo-cpp&lt;/H1&gt;\\n&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;H4&gt;PID: &quot;</span> &lt;&lt; pid &lt;&lt; <span class=\"string\">&quot;&lt;/H4&gt;\\n&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;H4&gt;Request Number: &quot;</span> &lt;&lt; ++count &lt;&lt; <span class=\"string\">&quot;&lt;/H4&gt;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt;H4&gt;Request Environment&lt;/H4&gt;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">penv</span>(request.envp);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt;H4&gt;Process/Initial Environment&lt;/H4&gt;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">penv</span>(environ);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;&lt;H4&gt;Standard Input - &quot;</span> &lt;&lt; clen;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clen == STDIN_MAX) cout &lt;&lt; <span class=\"string\">&quot; (STDIN_MAX)&quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; bytes&lt;/H4&gt;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clen) cout.<span class=\"built_in\">write</span>(content, clen);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content) <span class=\"keyword\">delete</span> []content;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If the output streambufs had non-zero bufsizes and</span></span><br><span class=\"line\">        <span class=\"comment\">// were constructed outside of the accept loop (i.e.</span></span><br><span class=\"line\">        <span class=\"comment\">// their destructor won&#x27;t be called here), they would</span></span><br><span class=\"line\">        <span class=\"comment\">// have to be flushed here.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> HAVE_IOSTREAM_WITHASSIGN_STREAMBUF</span></span><br><span class=\"line\">    cin  = cin_streambuf;</span><br><span class=\"line\">    cout = cout_streambuf;</span><br><span class=\"line\">    cerr = cerr_streambuf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    cin.<span class=\"built_in\">rdbuf</span>(cin_streambuf);</span><br><span class=\"line\">    cout.<span class=\"built_in\">rdbuf</span>(cout_streambuf);</span><br><span class=\"line\">    cerr.<span class=\"built_in\">rdbuf</span>(cerr_streambuf);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"FastDFS配置与使用","date":"2021-05-08T16:00:00.000Z","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gsenfdjj13j31bi0u0kjw.jpg","keywords":"fdfs","_content":"\n### 分布式文件系统\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsenbno4kdj30rr0isacq.jpg\" style=\"zoom:67%;\" />\n\n#### 文件系统 - 存储数据\n\n#### {% label 分布式 blue %}- 分布式存储简单的来说，就是将数据分散存储到多个存储设备(服务器)上。\n\n- 它可以看做是基于文件的 key/value 存储系统，key 为文件 ID，value 为文件内容，因此称作分布式文件存储服务更为合适。\n- 属于应用级文件系统，通过API进行访问，该文件系统通过C语言进行实现。可以实现冗余备份，负载均衡\n\n### 数据库和文件系统的区别：\n\n#### 文件系统：存储数据\n\n- 数据库：把一些数据组织成一定的表结构放到文件系统里面（云盘的数据会放到这个文件系统里面）；数据库里面放的是用户和密码和用户对应的所属文件名称（也就是文件存在的记录，不是实体文件）\n\n#### 文件系统分为三个角色：{% label 客户端client pink %}  {% label 追踪器tracker pink %}   {% label 存储节点storage pink %}。  tracker和storage属于服务器端\n\n#### 三个角色之间的关系\n\n![image-20210712005744350](https://tva1.sinaimg.cn/large/008i3skNly1gsdi0z6m4rj30s40d2ta0.jpg)\n\n\n\n\n\n- Tracker Server 与 Storage Server 之间不直接通信，其基本的信息由配置文件在系统启动加\n\n  载时获知。\n\n- client和storage会主动联系tacker，storage会主动向tracker汇报信息(l跟踪器主要做调度工作，在访问上起负载均衡的作用)\n\n  - 磁盘剩余情况\n  - 文件同步情况\n  - 文件上传和下载次数\n\n- storage会启动一个单独的线程和tacker进行沟通(存储节点存储文件，完成文件管理的所有功能)\n\n  - 连接和定时报告信息\n\n- 一个组包含的storage不是通过配置文件设定的，而是通过tracker获取到的         \n\n  \n\n  #### stacker集群就是轮询的工作方式(多台 Tracker Server 之间保证了 Tracker 的分布式，Tracker Server 之间是对等的，防止了单点故障)\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseaf5pxp9j30go0ba3za.jpg\" alt=\"image-20210712172020225\" style=\"zoom: 67%;\" />\n\n- 一个组里的数据容量取决于最小的节点存储大小，各个节点之间就是数据备份。这个就是纵向扩容。横向扩容就是再加组的个数，增加容量的大小。每个 Group 中的Storage 都是互相备份的，也就是说，如果 Group1 有 Storage1、Storage2、Storage3，其容量分别是100GB、200GB、300GB，那么 Group1 的存储能力是 100GB，而不是 300GB，这就是互相备份的意思。\n- 横向扩容：增加容量--添加group组的个数,可以使数据流量足够分散\n- 纵向扩容：数据备份，当前组容量的最大值是存储节点的最小值；所有存储节点的组名是一样的。\n\n\n\n### FastDFS 的安装\n\n- {% label 第一步 pink %}：如果是FastDFS是2.0之前的版本，请先安装好libevent环境（新版本不需要安装）。\n\n  {% btn 'http://libevent.org',libevent下载地址,far fa-hand-point-right %}\n\n- {% label 第二步 pink %}：libfastcommon为FastDFS操作的基础库，FastDFS没有使用标准的库，而是封装了一套和FastDFS相关的库。\n\n  {% btn 'https://github.com/happyfish100/libfastcommon',libfastcommon下载,far fa-hand-point-right %}\n\n  >\n  >\n  >1.解压 tar -xzvf libfastcommon-1.0.7.tar.gz\n  >\n  >2.进入解压目录，./make.sh\n  >\n  >3.sudo ./make.sh install \n  >\n  >4./usr/lib64/ 查看生成的动态库\n  >\n  >5.若使用过程中找不见动态库，sudo ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so\n\n- {% label 第三步 pink %}：下载源码\n\n  {% btn 'l https://github.com/happyfish100/fastdfs.git',FastDFS下载地址,far fa-hand-point-right %}\n\n- {% label 解压，编译，运行 pink %}\n\n  >tar -zxvf xxx\n  >\n  >./make.sh\n  >\n  >sudo ./make.sh install\n  >\n  >/usr/bin/fdfs* 看安装成功的可执行文件               \n\n### FastDFS 配置\n\n#### tracker配置\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseo4u623gj310i0d4n4h.jpg\" style=\"zoom:67%;\" />\n\n```tex\n#配置文件目录 /etc/fdfs/\n#先把原有的后缀为 .sample 的文件拷贝一份，变成后缀为 .conf\n#依次对配置文件修改\n//1.修改IP，为空绑定主机的所有地址\nbind_addr=10.211.55.11\n//2.设置Tracker Server 的端口，sudo netstat ano | grep \"22122\" \nport=22122\n//3.log\t输出目录和仓库数据存储位置\nbase_path=/home/parallels/fdfs/tracker\n```\n\n#### storage配置\n\n```tex\n//1.组名设置，默认OK\ngroup_name=group1\n//2.storage所在服务器的IP\nbind_addr=10.211.55.11\n//3.storage的端口\nport=23000\n//4.storage日志目录\nbase_path=/home/parallels/fdfs/storage\n//5.真正存储数据的位置\nstore_path0=/home/parallels/fdfs/storage\n//6.tracker的IP和端口\ntracker_server=10.211.55.11:22122\n//7.数据仓库的数量\nstore_path_count=1\n```\n\n#### client的配置\n\n```tex\nbase_path=/home/parallels/fdfs/client\n#  \"host:port\", host can be hostname or ip address\ntracker_server=10.211.55.11:2212\n```\n\n### 启动服务\n\n#### tracker的启动fdfs服务\n\n```bash\nsudo fdfs_trackerd /etc/fdfs/tracker.conf\n```\n\n![image-20210713013340673](https://tva1.sinaimg.cn/large/008i3skNly1gseooe3g2oj31ga03ego8.jpg)\n\n#### storage启动服务\n\n```bash\nsudo fdfs_storaged /etc/fdfs/storage.conf\nps aux|grep -v grep|grep fdfs\n```\n\n\n\n### 客户端启动\n\n#### storage状态检测\n\n```bash\nfdfs_monitor /etc/fdfs/client.conf\n```\n\n![image-20210713014542308](https://tva1.sinaimg.cn/large/008i3skNly1gsep0x1rhdj31xb0u0amk.jpg)\n\n#### storage 状态分类\n\n|   状态    | 含义                                   |\n| :-------: | -------------------------------------- |\n|   INIT    | 初始化，尚未得到同步已有数据的源服务器 |\n| WAIT_SYNC | 等待同步，已得到同步已有数据的源服务器 |\n|  SYNCING  | 同步中                                 |\n|  DELETED  | 已删除，该服务器从本组中摘除           |\n|  OFFLINE  | 离线                                   |\n|  ONLINE   | 在线，尚不能提供服务                   |\n|  ACTIVE   | 在线，可以提供服务                     |\n\n### 客户端使用\n\n#### 文件上传\n\n```tex\nfdfs_upload_file /etc/fdfs/client.conf xxxxx\n```\n\n![文件上传](https://tva1.sinaimg.cn/large/008i3skNly1gsepdneejoj321c0cwn1f.jpg)\n\n![仓库矩阵](https://tva1.sinaimg.cn/large/008i3skNly1gsepii22q8j31wk0aeq9k.jpg)\n\n![文件存放具体位置](https://tva1.sinaimg.cn/large/008i3skNly1gsepjiymvvj313s04kju7.jpg)\n- 启动tracker，storage会启动，然后定时返回storage的存储信息，包括剩磁盘余情况，磁盘分布情况\n- client 发出上传请求\n- tracker查询可用的storage信息\n- 返回可用的storage的IP和端口\n- 开始进行socket通信，上传文件\n- storage生成file_id 的信息\n- 将上传的信息写入磁盘\n- storage返回对应的file_id（路径信息和文件名）\n- 存储文件信息（程序员需要把这些信息放到数据库）\n\n\n#### 文件下载\n\n```bash\nfdfs_download_file /etc/fdfs/client.conf  文件唯一串（上图那个）\n```\n\n![文件下载](https://tva1.sinaimg.cn/large/008i3skNly1gseph9jvv5j3218084797.jpg)\n\n- storage定时向tracker发送状态信息\n- 下载连接请求\n- 查询可用的storage\n- 返回storage的IP和端口\n- 根据file_id（组名，路径，文件名），查找文件\n- 返回file_content\n  \n#### 文件删除\n\n```bash\nfdfs_delete_file /etc/fdfs/client.conf 文件唯一串\n```\n\n![文件删除](https://tva1.sinaimg.cn/large/008i3skNly1gseplzyxloj322a08e442.jpg)\n\n","source":"_posts/FastDFS.md","raw":"---\ntitle: FastDFS配置与使用\ndate: 2021-05-09\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gsenfdjj13j31bi0u0kjw.jpg\ntag:\n  - FastDFS\n  - 文件系统\ncategories:\n  - Tools\nkeywords: \"fdfs\"\n---\n\n### 分布式文件系统\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsenbno4kdj30rr0isacq.jpg\" style=\"zoom:67%;\" />\n\n#### 文件系统 - 存储数据\n\n#### {% label 分布式 blue %}- 分布式存储简单的来说，就是将数据分散存储到多个存储设备(服务器)上。\n\n- 它可以看做是基于文件的 key/value 存储系统，key 为文件 ID，value 为文件内容，因此称作分布式文件存储服务更为合适。\n- 属于应用级文件系统，通过API进行访问，该文件系统通过C语言进行实现。可以实现冗余备份，负载均衡\n\n### 数据库和文件系统的区别：\n\n#### 文件系统：存储数据\n\n- 数据库：把一些数据组织成一定的表结构放到文件系统里面（云盘的数据会放到这个文件系统里面）；数据库里面放的是用户和密码和用户对应的所属文件名称（也就是文件存在的记录，不是实体文件）\n\n#### 文件系统分为三个角色：{% label 客户端client pink %}  {% label 追踪器tracker pink %}   {% label 存储节点storage pink %}。  tracker和storage属于服务器端\n\n#### 三个角色之间的关系\n\n![image-20210712005744350](https://tva1.sinaimg.cn/large/008i3skNly1gsdi0z6m4rj30s40d2ta0.jpg)\n\n\n\n\n\n- Tracker Server 与 Storage Server 之间不直接通信，其基本的信息由配置文件在系统启动加\n\n  载时获知。\n\n- client和storage会主动联系tacker，storage会主动向tracker汇报信息(l跟踪器主要做调度工作，在访问上起负载均衡的作用)\n\n  - 磁盘剩余情况\n  - 文件同步情况\n  - 文件上传和下载次数\n\n- storage会启动一个单独的线程和tacker进行沟通(存储节点存储文件，完成文件管理的所有功能)\n\n  - 连接和定时报告信息\n\n- 一个组包含的storage不是通过配置文件设定的，而是通过tracker获取到的         \n\n  \n\n  #### stacker集群就是轮询的工作方式(多台 Tracker Server 之间保证了 Tracker 的分布式，Tracker Server 之间是对等的，防止了单点故障)\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseaf5pxp9j30go0ba3za.jpg\" alt=\"image-20210712172020225\" style=\"zoom: 67%;\" />\n\n- 一个组里的数据容量取决于最小的节点存储大小，各个节点之间就是数据备份。这个就是纵向扩容。横向扩容就是再加组的个数，增加容量的大小。每个 Group 中的Storage 都是互相备份的，也就是说，如果 Group1 有 Storage1、Storage2、Storage3，其容量分别是100GB、200GB、300GB，那么 Group1 的存储能力是 100GB，而不是 300GB，这就是互相备份的意思。\n- 横向扩容：增加容量--添加group组的个数,可以使数据流量足够分散\n- 纵向扩容：数据备份，当前组容量的最大值是存储节点的最小值；所有存储节点的组名是一样的。\n\n\n\n### FastDFS 的安装\n\n- {% label 第一步 pink %}：如果是FastDFS是2.0之前的版本，请先安装好libevent环境（新版本不需要安装）。\n\n  {% btn 'http://libevent.org',libevent下载地址,far fa-hand-point-right %}\n\n- {% label 第二步 pink %}：libfastcommon为FastDFS操作的基础库，FastDFS没有使用标准的库，而是封装了一套和FastDFS相关的库。\n\n  {% btn 'https://github.com/happyfish100/libfastcommon',libfastcommon下载,far fa-hand-point-right %}\n\n  >\n  >\n  >1.解压 tar -xzvf libfastcommon-1.0.7.tar.gz\n  >\n  >2.进入解压目录，./make.sh\n  >\n  >3.sudo ./make.sh install \n  >\n  >4./usr/lib64/ 查看生成的动态库\n  >\n  >5.若使用过程中找不见动态库，sudo ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so\n\n- {% label 第三步 pink %}：下载源码\n\n  {% btn 'l https://github.com/happyfish100/fastdfs.git',FastDFS下载地址,far fa-hand-point-right %}\n\n- {% label 解压，编译，运行 pink %}\n\n  >tar -zxvf xxx\n  >\n  >./make.sh\n  >\n  >sudo ./make.sh install\n  >\n  >/usr/bin/fdfs* 看安装成功的可执行文件               \n\n### FastDFS 配置\n\n#### tracker配置\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseo4u623gj310i0d4n4h.jpg\" style=\"zoom:67%;\" />\n\n```tex\n#配置文件目录 /etc/fdfs/\n#先把原有的后缀为 .sample 的文件拷贝一份，变成后缀为 .conf\n#依次对配置文件修改\n//1.修改IP，为空绑定主机的所有地址\nbind_addr=10.211.55.11\n//2.设置Tracker Server 的端口，sudo netstat ano | grep \"22122\" \nport=22122\n//3.log\t输出目录和仓库数据存储位置\nbase_path=/home/parallels/fdfs/tracker\n```\n\n#### storage配置\n\n```tex\n//1.组名设置，默认OK\ngroup_name=group1\n//2.storage所在服务器的IP\nbind_addr=10.211.55.11\n//3.storage的端口\nport=23000\n//4.storage日志目录\nbase_path=/home/parallels/fdfs/storage\n//5.真正存储数据的位置\nstore_path0=/home/parallels/fdfs/storage\n//6.tracker的IP和端口\ntracker_server=10.211.55.11:22122\n//7.数据仓库的数量\nstore_path_count=1\n```\n\n#### client的配置\n\n```tex\nbase_path=/home/parallels/fdfs/client\n#  \"host:port\", host can be hostname or ip address\ntracker_server=10.211.55.11:2212\n```\n\n### 启动服务\n\n#### tracker的启动fdfs服务\n\n```bash\nsudo fdfs_trackerd /etc/fdfs/tracker.conf\n```\n\n![image-20210713013340673](https://tva1.sinaimg.cn/large/008i3skNly1gseooe3g2oj31ga03ego8.jpg)\n\n#### storage启动服务\n\n```bash\nsudo fdfs_storaged /etc/fdfs/storage.conf\nps aux|grep -v grep|grep fdfs\n```\n\n\n\n### 客户端启动\n\n#### storage状态检测\n\n```bash\nfdfs_monitor /etc/fdfs/client.conf\n```\n\n![image-20210713014542308](https://tva1.sinaimg.cn/large/008i3skNly1gsep0x1rhdj31xb0u0amk.jpg)\n\n#### storage 状态分类\n\n|   状态    | 含义                                   |\n| :-------: | -------------------------------------- |\n|   INIT    | 初始化，尚未得到同步已有数据的源服务器 |\n| WAIT_SYNC | 等待同步，已得到同步已有数据的源服务器 |\n|  SYNCING  | 同步中                                 |\n|  DELETED  | 已删除，该服务器从本组中摘除           |\n|  OFFLINE  | 离线                                   |\n|  ONLINE   | 在线，尚不能提供服务                   |\n|  ACTIVE   | 在线，可以提供服务                     |\n\n### 客户端使用\n\n#### 文件上传\n\n```tex\nfdfs_upload_file /etc/fdfs/client.conf xxxxx\n```\n\n![文件上传](https://tva1.sinaimg.cn/large/008i3skNly1gsepdneejoj321c0cwn1f.jpg)\n\n![仓库矩阵](https://tva1.sinaimg.cn/large/008i3skNly1gsepii22q8j31wk0aeq9k.jpg)\n\n![文件存放具体位置](https://tva1.sinaimg.cn/large/008i3skNly1gsepjiymvvj313s04kju7.jpg)\n- 启动tracker，storage会启动，然后定时返回storage的存储信息，包括剩磁盘余情况，磁盘分布情况\n- client 发出上传请求\n- tracker查询可用的storage信息\n- 返回可用的storage的IP和端口\n- 开始进行socket通信，上传文件\n- storage生成file_id 的信息\n- 将上传的信息写入磁盘\n- storage返回对应的file_id（路径信息和文件名）\n- 存储文件信息（程序员需要把这些信息放到数据库）\n\n\n#### 文件下载\n\n```bash\nfdfs_download_file /etc/fdfs/client.conf  文件唯一串（上图那个）\n```\n\n![文件下载](https://tva1.sinaimg.cn/large/008i3skNly1gseph9jvv5j3218084797.jpg)\n\n- storage定时向tracker发送状态信息\n- 下载连接请求\n- 查询可用的storage\n- 返回storage的IP和端口\n- 根据file_id（组名，路径，文件名），查找文件\n- 返回file_content\n  \n#### 文件删除\n\n```bash\nfdfs_delete_file /etc/fdfs/client.conf 文件唯一串\n```\n\n![文件删除](https://tva1.sinaimg.cn/large/008i3skNly1gseplzyxloj322a08e442.jpg)\n\n","slug":"FastDFS","published":1,"updated":"2021-07-13T09:35:50.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xem0003k0576ij1dyny","content":"<h3 id=\"分布式文件系统\"><a href=\"#分布式文件系统\" class=\"headerlink\" title=\"分布式文件系统\"></a>分布式文件系统</h3><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsenbno4kdj30rr0isacq.jpg\" style=\"zoom:67%;\" />\n\n<h4 id=\"文件系统-存储数据\"><a href=\"#文件系统-存储数据\" class=\"headerlink\" title=\"文件系统 - 存储数据\"></a>文件系统 - 存储数据</h4><h4 id=\"分布式存储简单的来说，就是将数据分散存储到多个存储设备-服务器-上。\"><a href=\"#分布式存储简单的来说，就是将数据分散存储到多个存储设备-服务器-上。\" class=\"headerlink\" title=\"- 分布式存储简单的来说，就是将数据分散存储到多个存储设备(服务器)上。\"></a><mark class=\"hl-label blue\">分布式</mark> - 分布式存储简单的来说，就是将数据分散存储到多个存储设备(服务器)上。</h4><ul>\n<li>它可以看做是基于文件的 key/value 存储系统，key 为文件 ID，value 为文件内容，因此称作分布式文件存储服务更为合适。</li>\n<li>属于应用级文件系统，通过API进行访问，该文件系统通过C语言进行实现。可以实现冗余备份，负载均衡</li>\n</ul>\n<h3 id=\"数据库和文件系统的区别：\"><a href=\"#数据库和文件系统的区别：\" class=\"headerlink\" title=\"数据库和文件系统的区别：\"></a>数据库和文件系统的区别：</h3><h4 id=\"文件系统：存储数据\"><a href=\"#文件系统：存储数据\" class=\"headerlink\" title=\"文件系统：存储数据\"></a>文件系统：存储数据</h4><ul>\n<li>数据库：把一些数据组织成一定的表结构放到文件系统里面（云盘的数据会放到这个文件系统里面）；数据库里面放的是用户和密码和用户对应的所属文件名称（也就是文件存在的记录，不是实体文件）</li>\n</ul>\n<h4 id=\"文件系统分为三个角色：-。-tracker和storage属于服务器端\"><a href=\"#文件系统分为三个角色：-。-tracker和storage属于服务器端\" class=\"headerlink\" title=\"文件系统分为三个角色：     。  tracker和storage属于服务器端\"></a>文件系统分为三个角色：<mark class=\"hl-label pink\">客户端client</mark>   <mark class=\"hl-label pink\">追踪器tracker</mark>    <mark class=\"hl-label pink\">存储节点storage</mark> 。  tracker和storage属于服务器端</h4><h4 id=\"三个角色之间的关系\"><a href=\"#三个角色之间的关系\" class=\"headerlink\" title=\"三个角色之间的关系\"></a>三个角色之间的关系</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsdi0z6m4rj30s40d2ta0.jpg\" alt=\"image-20210712005744350\"></p>\n<ul>\n<li><p>Tracker Server 与 Storage Server 之间不直接通信，其基本的信息由配置文件在系统启动加</p>\n<p>载时获知。</p>\n</li>\n<li><p>client和storage会主动联系tacker，storage会主动向tracker汇报信息(l跟踪器主要做调度工作，在访问上起负载均衡的作用)</p>\n<ul>\n<li>磁盘剩余情况</li>\n<li>文件同步情况</li>\n<li>文件上传和下载次数</li>\n</ul>\n</li>\n<li><p>storage会启动一个单独的线程和tacker进行沟通(存储节点存储文件，完成文件管理的所有功能)</p>\n<ul>\n<li>连接和定时报告信息</li>\n</ul>\n</li>\n<li><p>一个组包含的storage不是通过配置文件设定的，而是通过tracker获取到的         </p>\n<h4 id=\"stacker集群就是轮询的工作方式-多台-Tracker-Server-之间保证了-Tracker-的分布式，Tracker-Server-之间是对等的，防止了单点故障\"><a href=\"#stacker集群就是轮询的工作方式-多台-Tracker-Server-之间保证了-Tracker-的分布式，Tracker-Server-之间是对等的，防止了单点故障\" class=\"headerlink\" title=\"stacker集群就是轮询的工作方式(多台 Tracker Server 之间保证了 Tracker 的分布式，Tracker Server 之间是对等的，防止了单点故障)\"></a>stacker集群就是轮询的工作方式(多台 Tracker Server 之间保证了 Tracker 的分布式，Tracker Server 之间是对等的，防止了单点故障)</h4></li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseaf5pxp9j30go0ba3za.jpg\" alt=\"image-20210712172020225\" style=\"zoom: 67%;\" />\n\n<ul>\n<li>一个组里的数据容量取决于最小的节点存储大小，各个节点之间就是数据备份。这个就是纵向扩容。横向扩容就是再加组的个数，增加容量的大小。每个 Group 中的Storage 都是互相备份的，也就是说，如果 Group1 有 Storage1、Storage2、Storage3，其容量分别是100GB、200GB、300GB，那么 Group1 的存储能力是 100GB，而不是 300GB，这就是互相备份的意思。</li>\n<li>横向扩容：增加容量–添加group组的个数,可以使数据流量足够分散</li>\n<li>纵向扩容：数据备份，当前组容量的最大值是存储节点的最小值；所有存储节点的组名是一样的。</li>\n</ul>\n<h3 id=\"FastDFS-的安装\"><a href=\"#FastDFS-的安装\" class=\"headerlink\" title=\"FastDFS 的安装\"></a>FastDFS 的安装</h3><ul>\n<li><mark class=\"hl-label pink\">第一步</mark> ：如果是FastDFS是2.0之前的版本，请先安装好libevent环境（新版本不需要安装）。\n\n<a class=\"btn-beautify button--animated \" href=\"http://libevent.org\" \n  title=\"libevent下载地址\"><i class=\"far fa-hand-point-right\"></i><span>libevent下载地址</span></a></li>\n<li><mark class=\"hl-label pink\">第二步</mark> ：libfastcommon为FastDFS操作的基础库，FastDFS没有使用标准的库，而是封装了一套和FastDFS相关的库。\n\n<a class=\"btn-beautify button--animated \" href=\"https://github.com/happyfish100/libfastcommon\" \n  title=\"libfastcommon下载\"><i class=\"far fa-hand-point-right\"></i><span>libfastcommon下载</span></a>\n\n<blockquote>\n<p>1.解压 tar -xzvf libfastcommon-1.0.7.tar.gz</p>\n<p>2.进入解压目录，./make.sh</p>\n<p>3.sudo ./make.sh install </p>\n<p>4./usr/lib64/ 查看生成的动态库</p>\n<p>5.若使用过程中找不见动态库，sudo ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so</p>\n</blockquote>\n</li>\n<li><mark class=\"hl-label pink\">第三步</mark> ：下载源码\n\n<a class=\"btn-beautify button--animated \" href=\"/l%20https:/github.com/happyfish100/fastdfs.git\" \n  title=\"FastDFS下载地址\"><i class=\"far fa-hand-point-right\"></i><span>FastDFS下载地址</span></a></li>\n<li><mark class=\"hl-label pink\">解压，编译，运行</mark> \n\n<blockquote>\n<p>tar -zxvf xxx</p>\n<p>./make.sh</p>\n<p>sudo ./make.sh install</p>\n<p>/usr/bin/fdfs* 看安装成功的可执行文件               </p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"FastDFS-配置\"><a href=\"#FastDFS-配置\" class=\"headerlink\" title=\"FastDFS 配置\"></a>FastDFS 配置</h3><h4 id=\"tracker配置\"><a href=\"#tracker配置\" class=\"headerlink\" title=\"tracker配置\"></a>tracker配置</h4><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseo4u623gj310i0d4n4h.jpg\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">#</span>配置文件目录 /etc/fdfs/</span><br><span class=\"line\"><span class=\"params\">#</span>先把原有的后缀为 .sample 的文件拷贝一份，变成后缀为 .conf</span><br><span class=\"line\"><span class=\"params\">#</span>依次对配置文件修改</span><br><span class=\"line\">//1.修改IP，为空绑定主机的所有地址</span><br><span class=\"line\">bind<span class=\"built_in\">_</span>addr=10.211.55.11</span><br><span class=\"line\">//2.设置Tracker Server 的端口，sudo netstat ano | grep &quot;22122&quot; </span><br><span class=\"line\">port=22122</span><br><span class=\"line\">//3.log\t输出目录和仓库数据存储位置</span><br><span class=\"line\">base<span class=\"built_in\">_</span>path=/home/parallels/fdfs/tracker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"storage配置\"><a href=\"#storage配置\" class=\"headerlink\" title=\"storage配置\"></a>storage配置</h4><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.组名设置，默认OK</span><br><span class=\"line\">group<span class=\"built_in\">_</span>name=group1</span><br><span class=\"line\">//2.storage所在服务器的IP</span><br><span class=\"line\">bind<span class=\"built_in\">_</span>addr=10.211.55.11</span><br><span class=\"line\">//3.storage的端口</span><br><span class=\"line\">port=23000</span><br><span class=\"line\">//4.storage日志目录</span><br><span class=\"line\">base<span class=\"built_in\">_</span>path=/home/parallels/fdfs/storage</span><br><span class=\"line\">//5.真正存储数据的位置</span><br><span class=\"line\">store<span class=\"built_in\">_</span>path0=/home/parallels/fdfs/storage</span><br><span class=\"line\">//6.tracker的IP和端口</span><br><span class=\"line\">tracker<span class=\"built_in\">_</span>server=10.211.55.11:22122</span><br><span class=\"line\">//7.数据仓库的数量</span><br><span class=\"line\">store<span class=\"built_in\">_</span>path<span class=\"built_in\">_</span>count=1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"client的配置\"><a href=\"#client的配置\" class=\"headerlink\" title=\"client的配置\"></a>client的配置</h4><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base<span class=\"built_in\">_</span>path=/home/parallels/fdfs/client</span><br><span class=\"line\"><span class=\"params\">#</span>  &quot;host:port&quot;, host can be hostname or ip address</span><br><span class=\"line\">tracker<span class=\"built_in\">_</span>server=10.211.55.11:2212</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><h4 id=\"tracker的启动fdfs服务\"><a href=\"#tracker的启动fdfs服务\" class=\"headerlink\" title=\"tracker的启动fdfs服务\"></a>tracker的启动fdfs服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdfs_trackerd /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseooe3g2oj31ga03ego8.jpg\" alt=\"image-20210713013340673\"></p>\n<h4 id=\"storage启动服务\"><a href=\"#storage启动服务\" class=\"headerlink\" title=\"storage启动服务\"></a>storage启动服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdfs_storaged /etc/fdfs/storage.conf</span><br><span class=\"line\">ps aux|grep -v grep|grep fdfs</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"客户端启动\"><a href=\"#客户端启动\" class=\"headerlink\" title=\"客户端启动\"></a>客户端启动</h3><h4 id=\"storage状态检测\"><a href=\"#storage状态检测\" class=\"headerlink\" title=\"storage状态检测\"></a>storage状态检测</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdfs_monitor /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsep0x1rhdj31xb0u0amk.jpg\" alt=\"image-20210713014542308\"></p>\n<h4 id=\"storage-状态分类\"><a href=\"#storage-状态分类\" class=\"headerlink\" title=\"storage 状态分类\"></a>storage 状态分类</h4><table>\n<thead>\n<tr>\n<th align=\"center\">状态</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">INIT</td>\n<td>初始化，尚未得到同步已有数据的源服务器</td>\n</tr>\n<tr>\n<td align=\"center\">WAIT_SYNC</td>\n<td>等待同步，已得到同步已有数据的源服务器</td>\n</tr>\n<tr>\n<td align=\"center\">SYNCING</td>\n<td>同步中</td>\n</tr>\n<tr>\n<td align=\"center\">DELETED</td>\n<td>已删除，该服务器从本组中摘除</td>\n</tr>\n<tr>\n<td align=\"center\">OFFLINE</td>\n<td>离线</td>\n</tr>\n<tr>\n<td align=\"center\">ONLINE</td>\n<td>在线，尚不能提供服务</td>\n</tr>\n<tr>\n<td align=\"center\">ACTIVE</td>\n<td>在线，可以提供服务</td>\n</tr>\n</tbody></table>\n<h3 id=\"客户端使用\"><a href=\"#客户端使用\" class=\"headerlink\" title=\"客户端使用\"></a>客户端使用</h3><h4 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h4><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdfs<span class=\"built_in\">_</span>upload<span class=\"built_in\">_</span>file /etc/fdfs/client.conf xxxxx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsepdneejoj321c0cwn1f.jpg\" alt=\"文件上传\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsepii22q8j31wk0aeq9k.jpg\" alt=\"仓库矩阵\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsepjiymvvj313s04kju7.jpg\" alt=\"文件存放具体位置\"></p>\n<ul>\n<li>启动tracker，storage会启动，然后定时返回storage的存储信息，包括剩磁盘余情况，磁盘分布情况</li>\n<li>client 发出上传请求</li>\n<li>tracker查询可用的storage信息</li>\n<li>返回可用的storage的IP和端口</li>\n<li>开始进行socket通信，上传文件</li>\n<li>storage生成file_id 的信息</li>\n<li>将上传的信息写入磁盘</li>\n<li>storage返回对应的file_id（路径信息和文件名）</li>\n<li>存储文件信息（程序员需要把这些信息放到数据库）</li>\n</ul>\n<h4 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdfs_download_file /etc/fdfs/client.conf  文件唯一串（上图那个）</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseph9jvv5j3218084797.jpg\" alt=\"文件下载\"></p>\n<ul>\n<li>storage定时向tracker发送状态信息</li>\n<li>下载连接请求</li>\n<li>查询可用的storage</li>\n<li>返回storage的IP和端口</li>\n<li>根据file_id（组名，路径，文件名），查找文件</li>\n<li>返回file_content</li>\n</ul>\n<h4 id=\"文件删除\"><a href=\"#文件删除\" class=\"headerlink\" title=\"文件删除\"></a>文件删除</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdfs_delete_file /etc/fdfs/client.conf 文件唯一串</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseplzyxloj322a08e442.jpg\" alt=\"文件删除\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"分布式文件系统\"><a href=\"#分布式文件系统\" class=\"headerlink\" title=\"分布式文件系统\"></a>分布式文件系统</h3><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsenbno4kdj30rr0isacq.jpg\" style=\"zoom:67%;\" />\n\n<h4 id=\"文件系统-存储数据\"><a href=\"#文件系统-存储数据\" class=\"headerlink\" title=\"文件系统 - 存储数据\"></a>文件系统 - 存储数据</h4><h4 id=\"分布式存储简单的来说，就是将数据分散存储到多个存储设备-服务器-上。\"><a href=\"#分布式存储简单的来说，就是将数据分散存储到多个存储设备-服务器-上。\" class=\"headerlink\" title=\"- 分布式存储简单的来说，就是将数据分散存储到多个存储设备(服务器)上。\"></a><mark class=\"hl-label blue\">分布式</mark> - 分布式存储简单的来说，就是将数据分散存储到多个存储设备(服务器)上。</h4><ul>\n<li>它可以看做是基于文件的 key/value 存储系统，key 为文件 ID，value 为文件内容，因此称作分布式文件存储服务更为合适。</li>\n<li>属于应用级文件系统，通过API进行访问，该文件系统通过C语言进行实现。可以实现冗余备份，负载均衡</li>\n</ul>\n<h3 id=\"数据库和文件系统的区别：\"><a href=\"#数据库和文件系统的区别：\" class=\"headerlink\" title=\"数据库和文件系统的区别：\"></a>数据库和文件系统的区别：</h3><h4 id=\"文件系统：存储数据\"><a href=\"#文件系统：存储数据\" class=\"headerlink\" title=\"文件系统：存储数据\"></a>文件系统：存储数据</h4><ul>\n<li>数据库：把一些数据组织成一定的表结构放到文件系统里面（云盘的数据会放到这个文件系统里面）；数据库里面放的是用户和密码和用户对应的所属文件名称（也就是文件存在的记录，不是实体文件）</li>\n</ul>\n<h4 id=\"文件系统分为三个角色：-。-tracker和storage属于服务器端\"><a href=\"#文件系统分为三个角色：-。-tracker和storage属于服务器端\" class=\"headerlink\" title=\"文件系统分为三个角色：     。  tracker和storage属于服务器端\"></a>文件系统分为三个角色：<mark class=\"hl-label pink\">客户端client</mark>   <mark class=\"hl-label pink\">追踪器tracker</mark>    <mark class=\"hl-label pink\">存储节点storage</mark> 。  tracker和storage属于服务器端</h4><h4 id=\"三个角色之间的关系\"><a href=\"#三个角色之间的关系\" class=\"headerlink\" title=\"三个角色之间的关系\"></a>三个角色之间的关系</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsdi0z6m4rj30s40d2ta0.jpg\" alt=\"image-20210712005744350\"></p>\n<ul>\n<li><p>Tracker Server 与 Storage Server 之间不直接通信，其基本的信息由配置文件在系统启动加</p>\n<p>载时获知。</p>\n</li>\n<li><p>client和storage会主动联系tacker，storage会主动向tracker汇报信息(l跟踪器主要做调度工作，在访问上起负载均衡的作用)</p>\n<ul>\n<li>磁盘剩余情况</li>\n<li>文件同步情况</li>\n<li>文件上传和下载次数</li>\n</ul>\n</li>\n<li><p>storage会启动一个单独的线程和tacker进行沟通(存储节点存储文件，完成文件管理的所有功能)</p>\n<ul>\n<li>连接和定时报告信息</li>\n</ul>\n</li>\n<li><p>一个组包含的storage不是通过配置文件设定的，而是通过tracker获取到的         </p>\n<h4 id=\"stacker集群就是轮询的工作方式-多台-Tracker-Server-之间保证了-Tracker-的分布式，Tracker-Server-之间是对等的，防止了单点故障\"><a href=\"#stacker集群就是轮询的工作方式-多台-Tracker-Server-之间保证了-Tracker-的分布式，Tracker-Server-之间是对等的，防止了单点故障\" class=\"headerlink\" title=\"stacker集群就是轮询的工作方式(多台 Tracker Server 之间保证了 Tracker 的分布式，Tracker Server 之间是对等的，防止了单点故障)\"></a>stacker集群就是轮询的工作方式(多台 Tracker Server 之间保证了 Tracker 的分布式，Tracker Server 之间是对等的，防止了单点故障)</h4></li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseaf5pxp9j30go0ba3za.jpg\" alt=\"image-20210712172020225\" style=\"zoom: 67%;\" />\n\n<ul>\n<li>一个组里的数据容量取决于最小的节点存储大小，各个节点之间就是数据备份。这个就是纵向扩容。横向扩容就是再加组的个数，增加容量的大小。每个 Group 中的Storage 都是互相备份的，也就是说，如果 Group1 有 Storage1、Storage2、Storage3，其容量分别是100GB、200GB、300GB，那么 Group1 的存储能力是 100GB，而不是 300GB，这就是互相备份的意思。</li>\n<li>横向扩容：增加容量–添加group组的个数,可以使数据流量足够分散</li>\n<li>纵向扩容：数据备份，当前组容量的最大值是存储节点的最小值；所有存储节点的组名是一样的。</li>\n</ul>\n<h3 id=\"FastDFS-的安装\"><a href=\"#FastDFS-的安装\" class=\"headerlink\" title=\"FastDFS 的安装\"></a>FastDFS 的安装</h3><ul>\n<li><mark class=\"hl-label pink\">第一步</mark> ：如果是FastDFS是2.0之前的版本，请先安装好libevent环境（新版本不需要安装）。\n\n<a class=\"btn-beautify button--animated \" href=\"http://libevent.org\" \n  title=\"libevent下载地址\"><i class=\"far fa-hand-point-right\"></i><span>libevent下载地址</span></a></li>\n<li><mark class=\"hl-label pink\">第二步</mark> ：libfastcommon为FastDFS操作的基础库，FastDFS没有使用标准的库，而是封装了一套和FastDFS相关的库。\n\n<a class=\"btn-beautify button--animated \" href=\"https://github.com/happyfish100/libfastcommon\" \n  title=\"libfastcommon下载\"><i class=\"far fa-hand-point-right\"></i><span>libfastcommon下载</span></a>\n\n<blockquote>\n<p>1.解压 tar -xzvf libfastcommon-1.0.7.tar.gz</p>\n<p>2.进入解压目录，./make.sh</p>\n<p>3.sudo ./make.sh install </p>\n<p>4./usr/lib64/ 查看生成的动态库</p>\n<p>5.若使用过程中找不见动态库，sudo ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so</p>\n</blockquote>\n</li>\n<li><mark class=\"hl-label pink\">第三步</mark> ：下载源码\n\n<a class=\"btn-beautify button--animated \" href=\"/l%20https:/github.com/happyfish100/fastdfs.git\" \n  title=\"FastDFS下载地址\"><i class=\"far fa-hand-point-right\"></i><span>FastDFS下载地址</span></a></li>\n<li><mark class=\"hl-label pink\">解压，编译，运行</mark> \n\n<blockquote>\n<p>tar -zxvf xxx</p>\n<p>./make.sh</p>\n<p>sudo ./make.sh install</p>\n<p>/usr/bin/fdfs* 看安装成功的可执行文件               </p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"FastDFS-配置\"><a href=\"#FastDFS-配置\" class=\"headerlink\" title=\"FastDFS 配置\"></a>FastDFS 配置</h3><h4 id=\"tracker配置\"><a href=\"#tracker配置\" class=\"headerlink\" title=\"tracker配置\"></a>tracker配置</h4><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseo4u623gj310i0d4n4h.jpg\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">#</span>配置文件目录 /etc/fdfs/</span><br><span class=\"line\"><span class=\"params\">#</span>先把原有的后缀为 .sample 的文件拷贝一份，变成后缀为 .conf</span><br><span class=\"line\"><span class=\"params\">#</span>依次对配置文件修改</span><br><span class=\"line\">//1.修改IP，为空绑定主机的所有地址</span><br><span class=\"line\">bind<span class=\"built_in\">_</span>addr=10.211.55.11</span><br><span class=\"line\">//2.设置Tracker Server 的端口，sudo netstat ano | grep &quot;22122&quot; </span><br><span class=\"line\">port=22122</span><br><span class=\"line\">//3.log\t输出目录和仓库数据存储位置</span><br><span class=\"line\">base<span class=\"built_in\">_</span>path=/home/parallels/fdfs/tracker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"storage配置\"><a href=\"#storage配置\" class=\"headerlink\" title=\"storage配置\"></a>storage配置</h4><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.组名设置，默认OK</span><br><span class=\"line\">group<span class=\"built_in\">_</span>name=group1</span><br><span class=\"line\">//2.storage所在服务器的IP</span><br><span class=\"line\">bind<span class=\"built_in\">_</span>addr=10.211.55.11</span><br><span class=\"line\">//3.storage的端口</span><br><span class=\"line\">port=23000</span><br><span class=\"line\">//4.storage日志目录</span><br><span class=\"line\">base<span class=\"built_in\">_</span>path=/home/parallels/fdfs/storage</span><br><span class=\"line\">//5.真正存储数据的位置</span><br><span class=\"line\">store<span class=\"built_in\">_</span>path0=/home/parallels/fdfs/storage</span><br><span class=\"line\">//6.tracker的IP和端口</span><br><span class=\"line\">tracker<span class=\"built_in\">_</span>server=10.211.55.11:22122</span><br><span class=\"line\">//7.数据仓库的数量</span><br><span class=\"line\">store<span class=\"built_in\">_</span>path<span class=\"built_in\">_</span>count=1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"client的配置\"><a href=\"#client的配置\" class=\"headerlink\" title=\"client的配置\"></a>client的配置</h4><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base<span class=\"built_in\">_</span>path=/home/parallels/fdfs/client</span><br><span class=\"line\"><span class=\"params\">#</span>  &quot;host:port&quot;, host can be hostname or ip address</span><br><span class=\"line\">tracker<span class=\"built_in\">_</span>server=10.211.55.11:2212</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><h4 id=\"tracker的启动fdfs服务\"><a href=\"#tracker的启动fdfs服务\" class=\"headerlink\" title=\"tracker的启动fdfs服务\"></a>tracker的启动fdfs服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdfs_trackerd /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseooe3g2oj31ga03ego8.jpg\" alt=\"image-20210713013340673\"></p>\n<h4 id=\"storage启动服务\"><a href=\"#storage启动服务\" class=\"headerlink\" title=\"storage启动服务\"></a>storage启动服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdfs_storaged /etc/fdfs/storage.conf</span><br><span class=\"line\">ps aux|grep -v grep|grep fdfs</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"客户端启动\"><a href=\"#客户端启动\" class=\"headerlink\" title=\"客户端启动\"></a>客户端启动</h3><h4 id=\"storage状态检测\"><a href=\"#storage状态检测\" class=\"headerlink\" title=\"storage状态检测\"></a>storage状态检测</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdfs_monitor /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsep0x1rhdj31xb0u0amk.jpg\" alt=\"image-20210713014542308\"></p>\n<h4 id=\"storage-状态分类\"><a href=\"#storage-状态分类\" class=\"headerlink\" title=\"storage 状态分类\"></a>storage 状态分类</h4><table>\n<thead>\n<tr>\n<th align=\"center\">状态</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">INIT</td>\n<td>初始化，尚未得到同步已有数据的源服务器</td>\n</tr>\n<tr>\n<td align=\"center\">WAIT_SYNC</td>\n<td>等待同步，已得到同步已有数据的源服务器</td>\n</tr>\n<tr>\n<td align=\"center\">SYNCING</td>\n<td>同步中</td>\n</tr>\n<tr>\n<td align=\"center\">DELETED</td>\n<td>已删除，该服务器从本组中摘除</td>\n</tr>\n<tr>\n<td align=\"center\">OFFLINE</td>\n<td>离线</td>\n</tr>\n<tr>\n<td align=\"center\">ONLINE</td>\n<td>在线，尚不能提供服务</td>\n</tr>\n<tr>\n<td align=\"center\">ACTIVE</td>\n<td>在线，可以提供服务</td>\n</tr>\n</tbody></table>\n<h3 id=\"客户端使用\"><a href=\"#客户端使用\" class=\"headerlink\" title=\"客户端使用\"></a>客户端使用</h3><h4 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h4><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdfs<span class=\"built_in\">_</span>upload<span class=\"built_in\">_</span>file /etc/fdfs/client.conf xxxxx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsepdneejoj321c0cwn1f.jpg\" alt=\"文件上传\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsepii22q8j31wk0aeq9k.jpg\" alt=\"仓库矩阵\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsepjiymvvj313s04kju7.jpg\" alt=\"文件存放具体位置\"></p>\n<ul>\n<li>启动tracker，storage会启动，然后定时返回storage的存储信息，包括剩磁盘余情况，磁盘分布情况</li>\n<li>client 发出上传请求</li>\n<li>tracker查询可用的storage信息</li>\n<li>返回可用的storage的IP和端口</li>\n<li>开始进行socket通信，上传文件</li>\n<li>storage生成file_id 的信息</li>\n<li>将上传的信息写入磁盘</li>\n<li>storage返回对应的file_id（路径信息和文件名）</li>\n<li>存储文件信息（程序员需要把这些信息放到数据库）</li>\n</ul>\n<h4 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdfs_download_file /etc/fdfs/client.conf  文件唯一串（上图那个）</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseph9jvv5j3218084797.jpg\" alt=\"文件下载\"></p>\n<ul>\n<li>storage定时向tracker发送状态信息</li>\n<li>下载连接请求</li>\n<li>查询可用的storage</li>\n<li>返回storage的IP和端口</li>\n<li>根据file_id（组名，路径，文件名），查找文件</li>\n<li>返回file_content</li>\n</ul>\n<h4 id=\"文件删除\"><a href=\"#文件删除\" class=\"headerlink\" title=\"文件删除\"></a>文件删除</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdfs_delete_file /etc/fdfs/client.conf 文件唯一串</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gseplzyxloj322a08e442.jpg\" alt=\"文件删除\"></p>\n"},{"title":"HEXO发生error:spawn failed错误的解决方法","date":"2021-05-17T16:00:00.000Z","cover":"https://pic4.zhimg.com/v2-9c5e558982dbf8fc02cfdee6b001e101_1200x500.jpg","_content":"\n### 解决方法\n\n- 删除根目录下面的`.deploy_git`\n\n- 输入 `git config --global core.autocrlf false`\n- 然后依次输入 `hexo clean && hexo g && hexo d`\n\n \n\n\n\n","source":"_posts/HEXO发生errorspawn-failed错误的解决方法.md","raw":"---\ntitle: HEXO发生error:spawn failed错误的解决方法\ndate: 2021-05-18\ntags:\n  - hexo\n  - git\ncategories:\n  - Tools\ncover: https://pic4.zhimg.com/v2-9c5e558982dbf8fc02cfdee6b001e101_1200x500.jpg\n\n---\n\n### 解决方法\n\n- 删除根目录下面的`.deploy_git`\n\n- 输入 `git config --global core.autocrlf false`\n- 然后依次输入 `hexo clean && hexo g && hexo d`\n\n \n\n\n\n","slug":"HEXO发生errorspawn-failed错误的解决方法","published":1,"updated":"2021-08-08T03:47:34.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xep0007k057fcsn1vl5","content":"<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li><p>删除根目录下面的<code>.deploy_git</code></p>\n</li>\n<li><p>输入 <code>git config --global core.autocrlf false</code></p>\n</li>\n<li><p>然后依次输入 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li><p>删除根目录下面的<code>.deploy_git</code></p>\n</li>\n<li><p>输入 <code>git config --global core.autocrlf false</code></p>\n</li>\n<li><p>然后依次输入 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n</li>\n</ul>\n"},{"title":"Qt中Json的使用","date":"2021-04-27T16:00:00.000Z","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gss5e8m7vmj305u030a9w.jpg","_content":"\n### JSON \n\n- 一种数据格式，与语言无关\n- 层次结构清晰，方便阅读和读取识别\n\n### JSON分类\n\n#### JSON数组\n\n- `[]`里面放元素，元素的类型包括 {% label 整形 green %},{% label 浮点形 green %},{% label 字符串 green %},{% label 布尔 green %},{% label JSON数组 green %},{% label  JSON对象 green %}，{% label 空值Null green %}.\n\n```json\n//整形\n[1,3,4,56]\n//字符串\n[\"aaa\",\"bbb\",\"ccc\",\"ddd\"]\n//混合\n[12,12.22,true,false,\"hello\",null]\n```\n\n```json\n//json 数组的嵌套\n[\n  [\"cat\",\"dog\",\"pig\"]\n  [\"apple\",\"good\",12]\n  [true,null]\n]\n\n```\n\n#### JSON对象\n\n- `{}`来描述JSON对象，每一个JSON对象可以存粗多个元素，每个元素都是键值对\n- 键必须是字符串类型，同一层级的键不可重复\n- value类型 {% label 整形 green %},{% label 浮点形 green %},{% label 字符串 green %},{% label 布尔 green %},{% label JSON数组 green %},{% label  JSON对象 green %}，{% label 空值Null green %}.\n\n```json\n{\n  \"name\":\"Alex\",\n  \"Sex\":\"man\",\n  \"Age\":22,\n  \"Family\":{\n    \t\"Father\":\"AAA\",\n    \t\"Month\":\"BBB\"\n  }\n  \"IsAlive\":false\n}\n```\n\n### {% label 在一个JSON文件中只有一个JSON数组或者JSON对象的根节点，不允许同时存储多个并列根节点 pink %}\n\n### Qt 中的JSON类\n\n| JSON类                         | 详细                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| {%label QJsonDocument green %} | JSON文档类，支持以UTF-8编码的文本或者Qt 的二进制格式读取和写入 |\n| {%label QJsonArray green %}    | JSON数组是一个值列表，支持插入和删除QJsonValue 来操作列表    |\n| {%label QJsonObject green %}   | JSON对象是一个键值对列表，支持插入和删除QJsonValue 来操作列表 |\n| {%label QJsonValue green %}    | 封装了JSON支持的数据类型                                     |\n\n#### QJsonValue\n\n- 可以封装基础数据类型\n- 布尔类型 `QJsonValue::Bool`\n- 浮点类型 `QJsonValue::Double`\n- 字符串类型 `QJsonValue::String`\n- JSON 数组 `QJsonValue::Array`\n- JSON 对象 `QJsonValue::Object`\n-  空值类型 `QJsonValue::Null`\n\n```c++\n//1.构造函数\nQJsonValue 的构造函数封装了基本的数据类型\n\n//2.提供了许多判断数据类型的函数\nisArray()\nisObject()\nisBool()\n  \n//3.提供了转换为基础数据类型的函数\ntoArray()\ntoBool()\ntoDouble()\n```\n\n#### QJsonObject\n\n- 封装了Json中的对象，可以存储多个键值对，键值都为字符串类型，值为`QJsonValue`\n\n- 创建空的Json对象\n\n```c++\nQJsonObject::QJsonObject(); //构造空对象\n```\n\n- 将键值对添加到空对象中\n\n```c++\niterator QJsonObject::insert(const QString &key,const QJsonValue &value);\n```\n\n- 获取键值对的个数\n\n```c++\nint QJsonObject::count() const;\nint QJsonObject::size() const;\nint QJsonObject::length() const;\n```\n\n- 通过key得倒value\n\n```c++\nQJsonValue QJsonObject::value(const QString &key) const ;\nQJsonValue QJsonObject::operator[](const QString &key) const;\n```\n\n- 删除键值对 \n\n```c++\nvoid QJsonObject::remove(const QString &key);\nQJsonValue QJsonObject::take(const QString &key); //删除且返回删除的value值\n```\n\n- 通过key查找\n\n```c++\niterator QJsonObject::find(const QString &key);\nbool QJsonObject::contains(const QString &key) const ;\n```\n\n- 获取所有的键列表\n\n```c++\nQStringList QJsonObject::keys() const;\n```\n\n\n\n#### QJsonArray\n\n- QJsonArray 封装了Json中的数组，可以存储多个元素，所有的元素类型为`QJsonvalue`。\n\n- 创建JSON数组\n\n```c++\nQJsonArray::QJsonArray()\n```\n\n- 添加数据\n\n```c++\nappend //尾部追加\ninsert //插入到i的位置之前\nprepend //添加到数组头部\npush_back //添加到尾部\npush_front//添加到头部\n \n```\n\n\n\n- 数组元素个数\n\n```c++\nint QJsonArray::count() const ;\nint QJsonArray::size() const ;\n```\n\n- 取值\n\n```c++\nQJsonValue QJsonArray::at(int i) const;\nQJsonValue QJsonArray::first() const;\nQJsonValue QJsonArray::last() const;\nQJsonValueRef QJsonArray::operator[](int i);\n```\n\n- 删除\n\n```c++\niterator QJsonArray::erase(iterator it);    // 基于迭代器删除\nvoid QJsonArray::pop_back();           // 删除尾部\nvoid QJsonArray::pop_front();          // 删除头部\nvoid QJsonArray::removeAt(int i);      // 删除i位置的元素\nvoid QJsonArray::removeFirst();        // 删除头部\nvoid QJsonArray::removeLast();         // 删除尾部\nQJsonValue QJsonArray::takeAt(int i);  // 删除i位置的原始, 并返回删除的元素的值\n```\n\n\n\n#### QJsonDocument\n\n- 封装了一个完整的JSON文档，支持UTF-8编码的文本和Qt自己的二进制个数的数据读取和写入\n- `QJsonObject`和`QJsonArray`中的数据是不能直接转化为字符串的，需要先转化为JSON文档。\n\n```json\n{\n    \"server\": {\n        \"ip\": \"127.0.0.1\",\n        \"name\": \"Alex\",\n        \"port\": 9999\n    }\n}\n```\n\n\n\n#####  `QJsonObject`和`QJsonArray` ------》字符串\n\n```c++\n//1.创建QJsonDocument 对象\nQJsonDocument::QJsonDocument(const QJsonObject &object);\nQJsonDocument::QJsonDocument(const QJsonArray &array);\n//2.得倒二进制格式数据或者json字符串\nQByteArray QJsonDocument::toBinaryData() const ;\nQByteArray QJsonDocument::toJson(JsonFormat format = Indented) const;\n//3.得倒数据进行数据传输后者数据持久化\n//---------------------------------------------\n//创建JSON对象\n    QJsonObject obj;\n    //创建JSON子对象\n    QJsonObject sub;\n    sub.insert(\"ip\",QJsonValue(\"127.0.0.1\"));\n    sub.insert(\"port\",QJsonValue(9999));\n    obj.insert(\"server\",QJsonValue(sub));\n\n    //内存中的数据写到文件\n    QJsonDocument doc(obj);//得倒document对象\n    //将json对象转化为字符串\n    QByteArray data = doc.toJson();\n    //把字符串写入文件\n    QFile file(\"/Users/sunguosheng/Downloads/temp.json\");\n    file.open(QIODevice::WriteOnly);\n    file.write(data);\n    file.close();\n```\n\n\n\n##### 字符串-----》`QJsonObject`和`QJsonArray` \n\n```c++\n//1.JSON 格式字符串转化为QJsonDocument类对象\n[static] QJsonDocument QJsonDocument::fromBinaryData(const QByteArray &data, DataValidation validation = Validate);\n// 参数文件格式的json字符串\n[static] QJsonDocument QJsonDocument::fromJson(const QByteArray &json, QJsonParseError *error = Q_NULLPTR);\n\n//2.JSON文档转化为 JSON数组/对象\n// 判断文档对象中存储的数据是不是数组\nbool QJsonDocument::isArray() const;\n// 判断文档对象中存储的数据是不是json对象\nbool QJsonDocument::isObject() const\n    \n// 文档对象中的数据转换为json对象\nQJsonObject QJsonDocument::object() const;\n// 文档对象中的数据转换为json数组\nQJsonArray QJsonDocument::array() const;\n//------------------------------------------\nQFile file(\"/Users/sunguosheng/Downloads/temp.json\");\n    file.open(QIODevice::ReadOnly);\n    QByteArray data = file.readAll();\n\n    QJsonDocument doc = QJsonDocument::fromJson(data);\n    if(doc.isObject())\n    {\n        QJsonObject obj = doc.object();\n        QJsonValue value = obj.value(\"server\");\n        if(value.isObject())\n        {\n            QJsonObject sub = value.toObject();\n            QString ip = sub.value(\"ip\").toString();\n            int port = sub.value(\"port\").toInt();\n            qDebug()<<ip<<port;\n        }\n\n    }\n```\n\n\n\n### 参考链接: https://subingwen.cn/qt/qt-json/","source":"_posts/Json的使用.md","raw":"---\ntitle: Qt中Json的使用\ndate: 2021-4-28\ntags:\n  - JSON\ncategories:\n  - Tools\n  - Qt\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gss5e8m7vmj305u030a9w.jpg\n---\n\n### JSON \n\n- 一种数据格式，与语言无关\n- 层次结构清晰，方便阅读和读取识别\n\n### JSON分类\n\n#### JSON数组\n\n- `[]`里面放元素，元素的类型包括 {% label 整形 green %},{% label 浮点形 green %},{% label 字符串 green %},{% label 布尔 green %},{% label JSON数组 green %},{% label  JSON对象 green %}，{% label 空值Null green %}.\n\n```json\n//整形\n[1,3,4,56]\n//字符串\n[\"aaa\",\"bbb\",\"ccc\",\"ddd\"]\n//混合\n[12,12.22,true,false,\"hello\",null]\n```\n\n```json\n//json 数组的嵌套\n[\n  [\"cat\",\"dog\",\"pig\"]\n  [\"apple\",\"good\",12]\n  [true,null]\n]\n\n```\n\n#### JSON对象\n\n- `{}`来描述JSON对象，每一个JSON对象可以存粗多个元素，每个元素都是键值对\n- 键必须是字符串类型，同一层级的键不可重复\n- value类型 {% label 整形 green %},{% label 浮点形 green %},{% label 字符串 green %},{% label 布尔 green %},{% label JSON数组 green %},{% label  JSON对象 green %}，{% label 空值Null green %}.\n\n```json\n{\n  \"name\":\"Alex\",\n  \"Sex\":\"man\",\n  \"Age\":22,\n  \"Family\":{\n    \t\"Father\":\"AAA\",\n    \t\"Month\":\"BBB\"\n  }\n  \"IsAlive\":false\n}\n```\n\n### {% label 在一个JSON文件中只有一个JSON数组或者JSON对象的根节点，不允许同时存储多个并列根节点 pink %}\n\n### Qt 中的JSON类\n\n| JSON类                         | 详细                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| {%label QJsonDocument green %} | JSON文档类，支持以UTF-8编码的文本或者Qt 的二进制格式读取和写入 |\n| {%label QJsonArray green %}    | JSON数组是一个值列表，支持插入和删除QJsonValue 来操作列表    |\n| {%label QJsonObject green %}   | JSON对象是一个键值对列表，支持插入和删除QJsonValue 来操作列表 |\n| {%label QJsonValue green %}    | 封装了JSON支持的数据类型                                     |\n\n#### QJsonValue\n\n- 可以封装基础数据类型\n- 布尔类型 `QJsonValue::Bool`\n- 浮点类型 `QJsonValue::Double`\n- 字符串类型 `QJsonValue::String`\n- JSON 数组 `QJsonValue::Array`\n- JSON 对象 `QJsonValue::Object`\n-  空值类型 `QJsonValue::Null`\n\n```c++\n//1.构造函数\nQJsonValue 的构造函数封装了基本的数据类型\n\n//2.提供了许多判断数据类型的函数\nisArray()\nisObject()\nisBool()\n  \n//3.提供了转换为基础数据类型的函数\ntoArray()\ntoBool()\ntoDouble()\n```\n\n#### QJsonObject\n\n- 封装了Json中的对象，可以存储多个键值对，键值都为字符串类型，值为`QJsonValue`\n\n- 创建空的Json对象\n\n```c++\nQJsonObject::QJsonObject(); //构造空对象\n```\n\n- 将键值对添加到空对象中\n\n```c++\niterator QJsonObject::insert(const QString &key,const QJsonValue &value);\n```\n\n- 获取键值对的个数\n\n```c++\nint QJsonObject::count() const;\nint QJsonObject::size() const;\nint QJsonObject::length() const;\n```\n\n- 通过key得倒value\n\n```c++\nQJsonValue QJsonObject::value(const QString &key) const ;\nQJsonValue QJsonObject::operator[](const QString &key) const;\n```\n\n- 删除键值对 \n\n```c++\nvoid QJsonObject::remove(const QString &key);\nQJsonValue QJsonObject::take(const QString &key); //删除且返回删除的value值\n```\n\n- 通过key查找\n\n```c++\niterator QJsonObject::find(const QString &key);\nbool QJsonObject::contains(const QString &key) const ;\n```\n\n- 获取所有的键列表\n\n```c++\nQStringList QJsonObject::keys() const;\n```\n\n\n\n#### QJsonArray\n\n- QJsonArray 封装了Json中的数组，可以存储多个元素，所有的元素类型为`QJsonvalue`。\n\n- 创建JSON数组\n\n```c++\nQJsonArray::QJsonArray()\n```\n\n- 添加数据\n\n```c++\nappend //尾部追加\ninsert //插入到i的位置之前\nprepend //添加到数组头部\npush_back //添加到尾部\npush_front//添加到头部\n \n```\n\n\n\n- 数组元素个数\n\n```c++\nint QJsonArray::count() const ;\nint QJsonArray::size() const ;\n```\n\n- 取值\n\n```c++\nQJsonValue QJsonArray::at(int i) const;\nQJsonValue QJsonArray::first() const;\nQJsonValue QJsonArray::last() const;\nQJsonValueRef QJsonArray::operator[](int i);\n```\n\n- 删除\n\n```c++\niterator QJsonArray::erase(iterator it);    // 基于迭代器删除\nvoid QJsonArray::pop_back();           // 删除尾部\nvoid QJsonArray::pop_front();          // 删除头部\nvoid QJsonArray::removeAt(int i);      // 删除i位置的元素\nvoid QJsonArray::removeFirst();        // 删除头部\nvoid QJsonArray::removeLast();         // 删除尾部\nQJsonValue QJsonArray::takeAt(int i);  // 删除i位置的原始, 并返回删除的元素的值\n```\n\n\n\n#### QJsonDocument\n\n- 封装了一个完整的JSON文档，支持UTF-8编码的文本和Qt自己的二进制个数的数据读取和写入\n- `QJsonObject`和`QJsonArray`中的数据是不能直接转化为字符串的，需要先转化为JSON文档。\n\n```json\n{\n    \"server\": {\n        \"ip\": \"127.0.0.1\",\n        \"name\": \"Alex\",\n        \"port\": 9999\n    }\n}\n```\n\n\n\n#####  `QJsonObject`和`QJsonArray` ------》字符串\n\n```c++\n//1.创建QJsonDocument 对象\nQJsonDocument::QJsonDocument(const QJsonObject &object);\nQJsonDocument::QJsonDocument(const QJsonArray &array);\n//2.得倒二进制格式数据或者json字符串\nQByteArray QJsonDocument::toBinaryData() const ;\nQByteArray QJsonDocument::toJson(JsonFormat format = Indented) const;\n//3.得倒数据进行数据传输后者数据持久化\n//---------------------------------------------\n//创建JSON对象\n    QJsonObject obj;\n    //创建JSON子对象\n    QJsonObject sub;\n    sub.insert(\"ip\",QJsonValue(\"127.0.0.1\"));\n    sub.insert(\"port\",QJsonValue(9999));\n    obj.insert(\"server\",QJsonValue(sub));\n\n    //内存中的数据写到文件\n    QJsonDocument doc(obj);//得倒document对象\n    //将json对象转化为字符串\n    QByteArray data = doc.toJson();\n    //把字符串写入文件\n    QFile file(\"/Users/sunguosheng/Downloads/temp.json\");\n    file.open(QIODevice::WriteOnly);\n    file.write(data);\n    file.close();\n```\n\n\n\n##### 字符串-----》`QJsonObject`和`QJsonArray` \n\n```c++\n//1.JSON 格式字符串转化为QJsonDocument类对象\n[static] QJsonDocument QJsonDocument::fromBinaryData(const QByteArray &data, DataValidation validation = Validate);\n// 参数文件格式的json字符串\n[static] QJsonDocument QJsonDocument::fromJson(const QByteArray &json, QJsonParseError *error = Q_NULLPTR);\n\n//2.JSON文档转化为 JSON数组/对象\n// 判断文档对象中存储的数据是不是数组\nbool QJsonDocument::isArray() const;\n// 判断文档对象中存储的数据是不是json对象\nbool QJsonDocument::isObject() const\n    \n// 文档对象中的数据转换为json对象\nQJsonObject QJsonDocument::object() const;\n// 文档对象中的数据转换为json数组\nQJsonArray QJsonDocument::array() const;\n//------------------------------------------\nQFile file(\"/Users/sunguosheng/Downloads/temp.json\");\n    file.open(QIODevice::ReadOnly);\n    QByteArray data = file.readAll();\n\n    QJsonDocument doc = QJsonDocument::fromJson(data);\n    if(doc.isObject())\n    {\n        QJsonObject obj = doc.object();\n        QJsonValue value = obj.value(\"server\");\n        if(value.isObject())\n        {\n            QJsonObject sub = value.toObject();\n            QString ip = sub.value(\"ip\").toString();\n            int port = sub.value(\"port\").toInt();\n            qDebug()<<ip<<port;\n        }\n\n    }\n```\n\n\n\n### 参考链接: https://subingwen.cn/qt/qt-json/","slug":"Json的使用","published":1,"updated":"2021-07-24T09:04:39.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xer0009k057gawxfr7i","content":"<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><ul>\n<li>一种数据格式，与语言无关</li>\n<li>层次结构清晰，方便阅读和读取识别</li>\n</ul>\n<h3 id=\"JSON分类\"><a href=\"#JSON分类\" class=\"headerlink\" title=\"JSON分类\"></a>JSON分类</h3><h4 id=\"JSON数组\"><a href=\"#JSON数组\" class=\"headerlink\" title=\"JSON数组\"></a>JSON数组</h4><ul>\n<li><code>[]</code>里面放元素，元素的类型包括 <mark class=\"hl-label green\">整形</mark> ,<mark class=\"hl-label green\">浮点形</mark> ,<mark class=\"hl-label green\">字符串</mark> ,<mark class=\"hl-label green\">布尔</mark> ,<mark class=\"hl-label green\">JSON数组</mark> ,<mark class=\"hl-label green\">JSON对象</mark> ，<mark class=\"hl-label green\">空值Null</mark> .</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//整形</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">56</span>]</span><br><span class=\"line\"><span class=\"comment\">//字符串</span></span><br><span class=\"line\">[<span class=\"string\">&quot;aaa&quot;</span>,<span class=\"string\">&quot;bbb&quot;</span>,<span class=\"string\">&quot;ccc&quot;</span>,<span class=\"string\">&quot;ddd&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">//混合</span></span><br><span class=\"line\">[<span class=\"number\">12</span>,<span class=\"number\">12.22</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,<span class=\"string\">&quot;hello&quot;</span>,<span class=\"literal\">null</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//json 数组的嵌套</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"string\">&quot;cat&quot;</span>,<span class=\"string\">&quot;dog&quot;</span>,<span class=\"string\">&quot;pig&quot;</span>]</span><br><span class=\"line\">  [<span class=\"string\">&quot;apple&quot;</span>,<span class=\"string\">&quot;good&quot;</span>,<span class=\"number\">12</span>]</span><br><span class=\"line\">  [<span class=\"literal\">true</span>,<span class=\"literal\">null</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JSON对象\"><a href=\"#JSON对象\" class=\"headerlink\" title=\"JSON对象\"></a>JSON对象</h4><ul>\n<li><code>&#123;&#125;</code>来描述JSON对象，每一个JSON对象可以存粗多个元素，每个元素都是键值对</li>\n<li>键必须是字符串类型，同一层级的键不可重复</li>\n<li>value类型 <mark class=\"hl-label green\">整形</mark> ,<mark class=\"hl-label green\">浮点形</mark> ,<mark class=\"hl-label green\">字符串</mark> ,<mark class=\"hl-label green\">布尔</mark> ,<mark class=\"hl-label green\">JSON数组</mark> ,<mark class=\"hl-label green\">JSON对象</mark> ，<mark class=\"hl-label green\">空值Null</mark> .</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;Alex&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;Sex&quot;</span>:<span class=\"string\">&quot;man&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;Age&quot;</span>:<span class=\"number\">22</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;Family&quot;</span>:&#123;</span><br><span class=\"line\">    \t<span class=\"attr\">&quot;Father&quot;</span>:<span class=\"string\">&quot;AAA&quot;</span>,</span><br><span class=\"line\">    \t<span class=\"attr\">&quot;Month&quot;</span>:<span class=\"string\">&quot;BBB&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">&quot;IsAlive&quot;</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><mark class=\"hl-label pink\">在一个JSON文件中只有一个JSON数组或者JSON对象的根节点，不允许同时存储多个并列根节点</mark> </h3><h3 id=\"Qt-中的JSON类\"><a href=\"#Qt-中的JSON类\" class=\"headerlink\" title=\"Qt 中的JSON类\"></a>Qt 中的JSON类</h3><table>\n<thead>\n<tr>\n<th>JSON类</th>\n<th>详细</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><mark class=\"hl-label green\">QJsonDocument</mark> </td>\n<td>JSON文档类，支持以UTF-8编码的文本或者Qt 的二进制格式读取和写入</td>\n</tr>\n<tr>\n<td><mark class=\"hl-label green\">QJsonArray</mark> </td>\n<td>JSON数组是一个值列表，支持插入和删除QJsonValue 来操作列表</td>\n</tr>\n<tr>\n<td><mark class=\"hl-label green\">QJsonObject</mark> </td>\n<td>JSON对象是一个键值对列表，支持插入和删除QJsonValue 来操作列表</td>\n</tr>\n<tr>\n<td><mark class=\"hl-label green\">QJsonValue</mark> </td>\n<td>封装了JSON支持的数据类型</td>\n</tr>\n</tbody></table>\n<h4 id=\"QJsonValue\"><a href=\"#QJsonValue\" class=\"headerlink\" title=\"QJsonValue\"></a>QJsonValue</h4><ul>\n<li>可以封装基础数据类型</li>\n<li>布尔类型 <code>QJsonValue::Bool</code></li>\n<li>浮点类型 <code>QJsonValue::Double</code></li>\n<li>字符串类型 <code>QJsonValue::String</code></li>\n<li>JSON 数组 <code>QJsonValue::Array</code></li>\n<li>JSON 对象 <code>QJsonValue::Object</code></li>\n<li> 空值类型 <code>QJsonValue::Null</code></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.构造函数</span></span><br><span class=\"line\">QJsonValue 的构造函数封装了基本的数据类型</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.提供了许多判断数据类型的函数</span></span><br><span class=\"line\"><span class=\"built_in\">isArray</span>()</span><br><span class=\"line\"><span class=\"built_in\">isObject</span>()</span><br><span class=\"line\"><span class=\"built_in\">isBool</span>()</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//3.提供了转换为基础数据类型的函数</span></span><br><span class=\"line\"><span class=\"built_in\">toArray</span>()</span><br><span class=\"line\"><span class=\"built_in\">toBool</span>()</span><br><span class=\"line\"><span class=\"built_in\">toDouble</span>()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"QJsonObject\"><a href=\"#QJsonObject\" class=\"headerlink\" title=\"QJsonObject\"></a>QJsonObject</h4><ul>\n<li><p>封装了Json中的对象，可以存储多个键值对，键值都为字符串类型，值为<code>QJsonValue</code></p>\n</li>\n<li><p>创建空的Json对象</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QJsonObject::<span class=\"built_in\">QJsonObject</span>(); <span class=\"comment\">//构造空对象</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将键值对添加到空对象中</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">QJsonObject::insert</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key,<span class=\"keyword\">const</span> QJsonValue &amp;value)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取键值对的个数</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QJsonObject::count</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QJsonObject::size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QJsonObject::length</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过key得倒value</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonObject::value</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key)</span> <span class=\"keyword\">const</span> </span>;</span><br><span class=\"line\">QJsonValue QJsonObject::<span class=\"keyword\">operator</span>[](<span class=\"keyword\">const</span> QString &amp;key) <span class=\"keyword\">const</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除键值对 </li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonObject::remove</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key)</span></span>;</span><br><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonObject::take</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key)</span></span>; <span class=\"comment\">//删除且返回删除的value值</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过key查找</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">QJsonObject::find</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QJsonObject::contains</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key)</span> <span class=\"keyword\">const</span> </span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取所有的键列表</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QStringList <span class=\"title\">QJsonObject::keys</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"QJsonArray\"><a href=\"#QJsonArray\" class=\"headerlink\" title=\"QJsonArray\"></a>QJsonArray</h4><ul>\n<li><p>QJsonArray 封装了Json中的数组，可以存储多个元素，所有的元素类型为<code>QJsonvalue</code>。</p>\n</li>\n<li><p>创建JSON数组</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QJsonArray::<span class=\"built_in\">QJsonArray</span>()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加数据</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append <span class=\"comment\">//尾部追加</span></span><br><span class=\"line\">insert <span class=\"comment\">//插入到i的位置之前</span></span><br><span class=\"line\">prepend <span class=\"comment\">//添加到数组头部</span></span><br><span class=\"line\">push_back <span class=\"comment\">//添加到尾部</span></span><br><span class=\"line\">push_front<span class=\"comment\">//添加到头部</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>数组元素个数</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QJsonArray::count</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QJsonArray::size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>取值</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonArray::at</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonArray::first</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonArray::last</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">QJsonValueRef QJsonArray::<span class=\"keyword\">operator</span>[](<span class=\"keyword\">int</span> i);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">QJsonArray::erase</span><span class=\"params\">(iterator it)</span></span>;    <span class=\"comment\">// 基于迭代器删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonArray::pop_back</span><span class=\"params\">()</span></span>;           <span class=\"comment\">// 删除尾部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonArray::pop_front</span><span class=\"params\">()</span></span>;          <span class=\"comment\">// 删除头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonArray::removeAt</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;      <span class=\"comment\">// 删除i位置的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonArray::removeFirst</span><span class=\"params\">()</span></span>;        <span class=\"comment\">// 删除头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonArray::removeLast</span><span class=\"params\">()</span></span>;         <span class=\"comment\">// 删除尾部</span></span><br><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonArray::takeAt</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;  <span class=\"comment\">// 删除i位置的原始, 并返回删除的元素的值</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"QJsonDocument\"><a href=\"#QJsonDocument\" class=\"headerlink\" title=\"QJsonDocument\"></a>QJsonDocument</h4><ul>\n<li>封装了一个完整的JSON文档，支持UTF-8编码的文本和Qt自己的二进制个数的数据读取和写入</li>\n<li><code>QJsonObject</code>和<code>QJsonArray</code>中的数据是不能直接转化为字符串的，需要先转化为JSON文档。</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;server&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;ip&quot;</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Alex&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;port&quot;</span>: <span class=\"number\">9999</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"QJsonObject和QJsonArray-——》字符串\"><a href=\"#QJsonObject和QJsonArray-——》字符串\" class=\"headerlink\" title=\"QJsonObject和QJsonArray ——》字符串\"></a><code>QJsonObject</code>和<code>QJsonArray</code> ——》字符串</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.创建QJsonDocument 对象</span></span><br><span class=\"line\">QJsonDocument::<span class=\"built_in\">QJsonDocument</span>(<span class=\"keyword\">const</span> QJsonObject &amp;object);</span><br><span class=\"line\">QJsonDocument::<span class=\"built_in\">QJsonDocument</span>(<span class=\"keyword\">const</span> QJsonArray &amp;array);</span><br><span class=\"line\"><span class=\"comment\">//2.得倒二进制格式数据或者json字符串</span></span><br><span class=\"line\"><span class=\"function\">QByteArray <span class=\"title\">QJsonDocument::toBinaryData</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>;</span><br><span class=\"line\"><span class=\"function\">QByteArray <span class=\"title\">QJsonDocument::toJson</span><span class=\"params\">(JsonFormat format = Indented)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//3.得倒数据进行数据传输后者数据持久化</span></span><br><span class=\"line\"><span class=\"comment\">//---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">//创建JSON对象</span></span><br><span class=\"line\">    QJsonObject obj;</span><br><span class=\"line\">    <span class=\"comment\">//创建JSON子对象</span></span><br><span class=\"line\">    QJsonObject sub;</span><br><span class=\"line\">    sub.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;ip&quot;</span>,<span class=\"built_in\">QJsonValue</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>));</span><br><span class=\"line\">    sub.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;port&quot;</span>,<span class=\"built_in\">QJsonValue</span>(<span class=\"number\">9999</span>));</span><br><span class=\"line\">    obj.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;server&quot;</span>,<span class=\"built_in\">QJsonValue</span>(sub));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//内存中的数据写到文件</span></span><br><span class=\"line\">    <span class=\"function\">QJsonDocument <span class=\"title\">doc</span><span class=\"params\">(obj)</span></span>;<span class=\"comment\">//得倒document对象</span></span><br><span class=\"line\">    <span class=\"comment\">//将json对象转化为字符串</span></span><br><span class=\"line\">    QByteArray data = doc.<span class=\"built_in\">toJson</span>();</span><br><span class=\"line\">    <span class=\"comment\">//把字符串写入文件</span></span><br><span class=\"line\">    <span class=\"function\">QFile <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;/Users/sunguosheng/Downloads/temp.json&quot;</span>)</span></span>;</span><br><span class=\"line\">    file.<span class=\"built_in\">open</span>(QIODevice::WriteOnly);</span><br><span class=\"line\">    file.<span class=\"built_in\">write</span>(data);</span><br><span class=\"line\">    file.<span class=\"built_in\">close</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"字符串—–》QJsonObject和QJsonArray\"><a href=\"#字符串—–》QJsonObject和QJsonArray\" class=\"headerlink\" title=\"字符串—–》QJsonObject和QJsonArray\"></a>字符串—–》<code>QJsonObject</code>和<code>QJsonArray</code></h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.JSON 格式字符串转化为QJsonDocument类对象</span></span><br><span class=\"line\">[<span class=\"keyword\">static</span>] <span class=\"function\">QJsonDocument <span class=\"title\">QJsonDocument::fromBinaryData</span><span class=\"params\">(<span class=\"keyword\">const</span> QByteArray &amp;data, DataValidation validation = Validate)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 参数文件格式的json字符串</span></span><br><span class=\"line\">[<span class=\"keyword\">static</span>] <span class=\"function\">QJsonDocument <span class=\"title\">QJsonDocument::fromJson</span><span class=\"params\">(<span class=\"keyword\">const</span> QByteArray &amp;json, QJsonParseError *error = Q_NULLPTR)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.JSON文档转化为 JSON数组/对象</span></span><br><span class=\"line\"><span class=\"comment\">// 判断文档对象中存储的数据是不是数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QJsonDocument::isArray</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 判断文档对象中存储的数据是不是json对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QJsonDocument::isObject</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 文档对象中的数据转换为json对象</span></span></span><br><span class=\"line\"><span class=\"function\">QJsonObject <span class=\"title\">QJsonDocument::object</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 文档对象中的数据转换为json数组</span></span><br><span class=\"line\"><span class=\"function\">QJsonArray <span class=\"title\">QJsonDocument::array</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//------------------------------------------</span></span><br><span class=\"line\"><span class=\"function\">QFile <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;/Users/sunguosheng/Downloads/temp.json&quot;</span>)</span></span>;</span><br><span class=\"line\">    file.<span class=\"built_in\">open</span>(QIODevice::ReadOnly);</span><br><span class=\"line\">    QByteArray data = file.<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    QJsonDocument doc = QJsonDocument::<span class=\"built_in\">fromJson</span>(data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(doc.<span class=\"built_in\">isObject</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        QJsonObject obj = doc.<span class=\"built_in\">object</span>();</span><br><span class=\"line\">        QJsonValue value = obj.<span class=\"built_in\">value</span>(<span class=\"string\">&quot;server&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value.<span class=\"built_in\">isObject</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            QJsonObject sub = value.<span class=\"built_in\">toObject</span>();</span><br><span class=\"line\">            QString ip = sub.<span class=\"built_in\">value</span>(<span class=\"string\">&quot;ip&quot;</span>).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> port = sub.<span class=\"built_in\">value</span>(<span class=\"string\">&quot;port&quot;</span>).<span class=\"built_in\">toInt</span>();</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>()&lt;&lt;ip&lt;&lt;port;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"参考链接-https-subingwen-cn-qt-qt-json\"><a href=\"#参考链接-https-subingwen-cn-qt-qt-json\" class=\"headerlink\" title=\"参考链接: https://subingwen.cn/qt/qt-json/\"></a>参考链接: <a href=\"https://subingwen.cn/qt/qt-json/\">https://subingwen.cn/qt/qt-json/</a></h3>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><ul>\n<li>一种数据格式，与语言无关</li>\n<li>层次结构清晰，方便阅读和读取识别</li>\n</ul>\n<h3 id=\"JSON分类\"><a href=\"#JSON分类\" class=\"headerlink\" title=\"JSON分类\"></a>JSON分类</h3><h4 id=\"JSON数组\"><a href=\"#JSON数组\" class=\"headerlink\" title=\"JSON数组\"></a>JSON数组</h4><ul>\n<li><code>[]</code>里面放元素，元素的类型包括 <mark class=\"hl-label green\">整形</mark> ,<mark class=\"hl-label green\">浮点形</mark> ,<mark class=\"hl-label green\">字符串</mark> ,<mark class=\"hl-label green\">布尔</mark> ,<mark class=\"hl-label green\">JSON数组</mark> ,<mark class=\"hl-label green\">JSON对象</mark> ，<mark class=\"hl-label green\">空值Null</mark> .</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//整形</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">56</span>]</span><br><span class=\"line\"><span class=\"comment\">//字符串</span></span><br><span class=\"line\">[<span class=\"string\">&quot;aaa&quot;</span>,<span class=\"string\">&quot;bbb&quot;</span>,<span class=\"string\">&quot;ccc&quot;</span>,<span class=\"string\">&quot;ddd&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">//混合</span></span><br><span class=\"line\">[<span class=\"number\">12</span>,<span class=\"number\">12.22</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,<span class=\"string\">&quot;hello&quot;</span>,<span class=\"literal\">null</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//json 数组的嵌套</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"string\">&quot;cat&quot;</span>,<span class=\"string\">&quot;dog&quot;</span>,<span class=\"string\">&quot;pig&quot;</span>]</span><br><span class=\"line\">  [<span class=\"string\">&quot;apple&quot;</span>,<span class=\"string\">&quot;good&quot;</span>,<span class=\"number\">12</span>]</span><br><span class=\"line\">  [<span class=\"literal\">true</span>,<span class=\"literal\">null</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JSON对象\"><a href=\"#JSON对象\" class=\"headerlink\" title=\"JSON对象\"></a>JSON对象</h4><ul>\n<li><code>&#123;&#125;</code>来描述JSON对象，每一个JSON对象可以存粗多个元素，每个元素都是键值对</li>\n<li>键必须是字符串类型，同一层级的键不可重复</li>\n<li>value类型 <mark class=\"hl-label green\">整形</mark> ,<mark class=\"hl-label green\">浮点形</mark> ,<mark class=\"hl-label green\">字符串</mark> ,<mark class=\"hl-label green\">布尔</mark> ,<mark class=\"hl-label green\">JSON数组</mark> ,<mark class=\"hl-label green\">JSON对象</mark> ，<mark class=\"hl-label green\">空值Null</mark> .</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;Alex&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;Sex&quot;</span>:<span class=\"string\">&quot;man&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;Age&quot;</span>:<span class=\"number\">22</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;Family&quot;</span>:&#123;</span><br><span class=\"line\">    \t<span class=\"attr\">&quot;Father&quot;</span>:<span class=\"string\">&quot;AAA&quot;</span>,</span><br><span class=\"line\">    \t<span class=\"attr\">&quot;Month&quot;</span>:<span class=\"string\">&quot;BBB&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">&quot;IsAlive&quot;</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><mark class=\"hl-label pink\">在一个JSON文件中只有一个JSON数组或者JSON对象的根节点，不允许同时存储多个并列根节点</mark> </h3><h3 id=\"Qt-中的JSON类\"><a href=\"#Qt-中的JSON类\" class=\"headerlink\" title=\"Qt 中的JSON类\"></a>Qt 中的JSON类</h3><table>\n<thead>\n<tr>\n<th>JSON类</th>\n<th>详细</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><mark class=\"hl-label green\">QJsonDocument</mark> </td>\n<td>JSON文档类，支持以UTF-8编码的文本或者Qt 的二进制格式读取和写入</td>\n</tr>\n<tr>\n<td><mark class=\"hl-label green\">QJsonArray</mark> </td>\n<td>JSON数组是一个值列表，支持插入和删除QJsonValue 来操作列表</td>\n</tr>\n<tr>\n<td><mark class=\"hl-label green\">QJsonObject</mark> </td>\n<td>JSON对象是一个键值对列表，支持插入和删除QJsonValue 来操作列表</td>\n</tr>\n<tr>\n<td><mark class=\"hl-label green\">QJsonValue</mark> </td>\n<td>封装了JSON支持的数据类型</td>\n</tr>\n</tbody></table>\n<h4 id=\"QJsonValue\"><a href=\"#QJsonValue\" class=\"headerlink\" title=\"QJsonValue\"></a>QJsonValue</h4><ul>\n<li>可以封装基础数据类型</li>\n<li>布尔类型 <code>QJsonValue::Bool</code></li>\n<li>浮点类型 <code>QJsonValue::Double</code></li>\n<li>字符串类型 <code>QJsonValue::String</code></li>\n<li>JSON 数组 <code>QJsonValue::Array</code></li>\n<li>JSON 对象 <code>QJsonValue::Object</code></li>\n<li> 空值类型 <code>QJsonValue::Null</code></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.构造函数</span></span><br><span class=\"line\">QJsonValue 的构造函数封装了基本的数据类型</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.提供了许多判断数据类型的函数</span></span><br><span class=\"line\"><span class=\"built_in\">isArray</span>()</span><br><span class=\"line\"><span class=\"built_in\">isObject</span>()</span><br><span class=\"line\"><span class=\"built_in\">isBool</span>()</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//3.提供了转换为基础数据类型的函数</span></span><br><span class=\"line\"><span class=\"built_in\">toArray</span>()</span><br><span class=\"line\"><span class=\"built_in\">toBool</span>()</span><br><span class=\"line\"><span class=\"built_in\">toDouble</span>()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"QJsonObject\"><a href=\"#QJsonObject\" class=\"headerlink\" title=\"QJsonObject\"></a>QJsonObject</h4><ul>\n<li><p>封装了Json中的对象，可以存储多个键值对，键值都为字符串类型，值为<code>QJsonValue</code></p>\n</li>\n<li><p>创建空的Json对象</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QJsonObject::<span class=\"built_in\">QJsonObject</span>(); <span class=\"comment\">//构造空对象</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将键值对添加到空对象中</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">QJsonObject::insert</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key,<span class=\"keyword\">const</span> QJsonValue &amp;value)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取键值对的个数</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QJsonObject::count</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QJsonObject::size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QJsonObject::length</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过key得倒value</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonObject::value</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key)</span> <span class=\"keyword\">const</span> </span>;</span><br><span class=\"line\">QJsonValue QJsonObject::<span class=\"keyword\">operator</span>[](<span class=\"keyword\">const</span> QString &amp;key) <span class=\"keyword\">const</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除键值对 </li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonObject::remove</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key)</span></span>;</span><br><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonObject::take</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key)</span></span>; <span class=\"comment\">//删除且返回删除的value值</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过key查找</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">QJsonObject::find</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QJsonObject::contains</span><span class=\"params\">(<span class=\"keyword\">const</span> QString &amp;key)</span> <span class=\"keyword\">const</span> </span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取所有的键列表</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QStringList <span class=\"title\">QJsonObject::keys</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"QJsonArray\"><a href=\"#QJsonArray\" class=\"headerlink\" title=\"QJsonArray\"></a>QJsonArray</h4><ul>\n<li><p>QJsonArray 封装了Json中的数组，可以存储多个元素，所有的元素类型为<code>QJsonvalue</code>。</p>\n</li>\n<li><p>创建JSON数组</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QJsonArray::<span class=\"built_in\">QJsonArray</span>()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加数据</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append <span class=\"comment\">//尾部追加</span></span><br><span class=\"line\">insert <span class=\"comment\">//插入到i的位置之前</span></span><br><span class=\"line\">prepend <span class=\"comment\">//添加到数组头部</span></span><br><span class=\"line\">push_back <span class=\"comment\">//添加到尾部</span></span><br><span class=\"line\">push_front<span class=\"comment\">//添加到头部</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>数组元素个数</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QJsonArray::count</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QJsonArray::size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>取值</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonArray::at</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonArray::first</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonArray::last</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">QJsonValueRef QJsonArray::<span class=\"keyword\">operator</span>[](<span class=\"keyword\">int</span> i);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">QJsonArray::erase</span><span class=\"params\">(iterator it)</span></span>;    <span class=\"comment\">// 基于迭代器删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonArray::pop_back</span><span class=\"params\">()</span></span>;           <span class=\"comment\">// 删除尾部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonArray::pop_front</span><span class=\"params\">()</span></span>;          <span class=\"comment\">// 删除头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonArray::removeAt</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;      <span class=\"comment\">// 删除i位置的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonArray::removeFirst</span><span class=\"params\">()</span></span>;        <span class=\"comment\">// 删除头部</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QJsonArray::removeLast</span><span class=\"params\">()</span></span>;         <span class=\"comment\">// 删除尾部</span></span><br><span class=\"line\"><span class=\"function\">QJsonValue <span class=\"title\">QJsonArray::takeAt</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;  <span class=\"comment\">// 删除i位置的原始, 并返回删除的元素的值</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"QJsonDocument\"><a href=\"#QJsonDocument\" class=\"headerlink\" title=\"QJsonDocument\"></a>QJsonDocument</h4><ul>\n<li>封装了一个完整的JSON文档，支持UTF-8编码的文本和Qt自己的二进制个数的数据读取和写入</li>\n<li><code>QJsonObject</code>和<code>QJsonArray</code>中的数据是不能直接转化为字符串的，需要先转化为JSON文档。</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;server&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;ip&quot;</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Alex&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;port&quot;</span>: <span class=\"number\">9999</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"QJsonObject和QJsonArray-——》字符串\"><a href=\"#QJsonObject和QJsonArray-——》字符串\" class=\"headerlink\" title=\"QJsonObject和QJsonArray ——》字符串\"></a><code>QJsonObject</code>和<code>QJsonArray</code> ——》字符串</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.创建QJsonDocument 对象</span></span><br><span class=\"line\">QJsonDocument::<span class=\"built_in\">QJsonDocument</span>(<span class=\"keyword\">const</span> QJsonObject &amp;object);</span><br><span class=\"line\">QJsonDocument::<span class=\"built_in\">QJsonDocument</span>(<span class=\"keyword\">const</span> QJsonArray &amp;array);</span><br><span class=\"line\"><span class=\"comment\">//2.得倒二进制格式数据或者json字符串</span></span><br><span class=\"line\"><span class=\"function\">QByteArray <span class=\"title\">QJsonDocument::toBinaryData</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>;</span><br><span class=\"line\"><span class=\"function\">QByteArray <span class=\"title\">QJsonDocument::toJson</span><span class=\"params\">(JsonFormat format = Indented)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//3.得倒数据进行数据传输后者数据持久化</span></span><br><span class=\"line\"><span class=\"comment\">//---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">//创建JSON对象</span></span><br><span class=\"line\">    QJsonObject obj;</span><br><span class=\"line\">    <span class=\"comment\">//创建JSON子对象</span></span><br><span class=\"line\">    QJsonObject sub;</span><br><span class=\"line\">    sub.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;ip&quot;</span>,<span class=\"built_in\">QJsonValue</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>));</span><br><span class=\"line\">    sub.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;port&quot;</span>,<span class=\"built_in\">QJsonValue</span>(<span class=\"number\">9999</span>));</span><br><span class=\"line\">    obj.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;server&quot;</span>,<span class=\"built_in\">QJsonValue</span>(sub));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//内存中的数据写到文件</span></span><br><span class=\"line\">    <span class=\"function\">QJsonDocument <span class=\"title\">doc</span><span class=\"params\">(obj)</span></span>;<span class=\"comment\">//得倒document对象</span></span><br><span class=\"line\">    <span class=\"comment\">//将json对象转化为字符串</span></span><br><span class=\"line\">    QByteArray data = doc.<span class=\"built_in\">toJson</span>();</span><br><span class=\"line\">    <span class=\"comment\">//把字符串写入文件</span></span><br><span class=\"line\">    <span class=\"function\">QFile <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;/Users/sunguosheng/Downloads/temp.json&quot;</span>)</span></span>;</span><br><span class=\"line\">    file.<span class=\"built_in\">open</span>(QIODevice::WriteOnly);</span><br><span class=\"line\">    file.<span class=\"built_in\">write</span>(data);</span><br><span class=\"line\">    file.<span class=\"built_in\">close</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"字符串—–》QJsonObject和QJsonArray\"><a href=\"#字符串—–》QJsonObject和QJsonArray\" class=\"headerlink\" title=\"字符串—–》QJsonObject和QJsonArray\"></a>字符串—–》<code>QJsonObject</code>和<code>QJsonArray</code></h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.JSON 格式字符串转化为QJsonDocument类对象</span></span><br><span class=\"line\">[<span class=\"keyword\">static</span>] <span class=\"function\">QJsonDocument <span class=\"title\">QJsonDocument::fromBinaryData</span><span class=\"params\">(<span class=\"keyword\">const</span> QByteArray &amp;data, DataValidation validation = Validate)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 参数文件格式的json字符串</span></span><br><span class=\"line\">[<span class=\"keyword\">static</span>] <span class=\"function\">QJsonDocument <span class=\"title\">QJsonDocument::fromJson</span><span class=\"params\">(<span class=\"keyword\">const</span> QByteArray &amp;json, QJsonParseError *error = Q_NULLPTR)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.JSON文档转化为 JSON数组/对象</span></span><br><span class=\"line\"><span class=\"comment\">// 判断文档对象中存储的数据是不是数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QJsonDocument::isArray</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 判断文档对象中存储的数据是不是json对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QJsonDocument::isObject</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 文档对象中的数据转换为json对象</span></span></span><br><span class=\"line\"><span class=\"function\">QJsonObject <span class=\"title\">QJsonDocument::object</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 文档对象中的数据转换为json数组</span></span><br><span class=\"line\"><span class=\"function\">QJsonArray <span class=\"title\">QJsonDocument::array</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//------------------------------------------</span></span><br><span class=\"line\"><span class=\"function\">QFile <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;/Users/sunguosheng/Downloads/temp.json&quot;</span>)</span></span>;</span><br><span class=\"line\">    file.<span class=\"built_in\">open</span>(QIODevice::ReadOnly);</span><br><span class=\"line\">    QByteArray data = file.<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    QJsonDocument doc = QJsonDocument::<span class=\"built_in\">fromJson</span>(data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(doc.<span class=\"built_in\">isObject</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        QJsonObject obj = doc.<span class=\"built_in\">object</span>();</span><br><span class=\"line\">        QJsonValue value = obj.<span class=\"built_in\">value</span>(<span class=\"string\">&quot;server&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value.<span class=\"built_in\">isObject</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            QJsonObject sub = value.<span class=\"built_in\">toObject</span>();</span><br><span class=\"line\">            QString ip = sub.<span class=\"built_in\">value</span>(<span class=\"string\">&quot;ip&quot;</span>).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> port = sub.<span class=\"built_in\">value</span>(<span class=\"string\">&quot;port&quot;</span>).<span class=\"built_in\">toInt</span>();</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>()&lt;&lt;ip&lt;&lt;port;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"参考链接-https-subingwen-cn-qt-qt-json\"><a href=\"#参考链接-https-subingwen-cn-qt-qt-json\" class=\"headerlink\" title=\"参考链接: https://subingwen.cn/qt/qt-json/\"></a>参考链接: <a href=\"https://subingwen.cn/qt/qt-json/\">https://subingwen.cn/qt/qt-json/</a></h3>"},{"title":"网络模型","date":"2020-06-19T16:00:00.000Z","keywords":"底层,网络","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gsa1d6d63dj30nx0d9tan.jpg","sticky":1,"_content":"#### 1.OSI 七层模型\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa0oyuoylj618m0so48z02.jpg\" style=\"zoom:60%;\" />\n\n* 1. 物理层：网线的类型，光纤的接口，网卡等硬件设备，主要作用：传输比特流（1，0转化为电流的强弱），这一层的数据叫做{% label 比特 blue %}\n  2. 数据链路层：物理层面两个主机间的通信传输，将比特流划分为帧传输给对端数据单元为{% label 帧 pink %}\n  3. 网络层：在网络上将数据传输到目的地址，负责寻址和路由的选择，传输路径的选择,数据单元为{% label 包 pink %}\n  4. 传输层：提供数据的传输服务，在端到端之间进行数据传输，数据单元为{% label 段 pink %}\n  5. 会话层：管理和协调不同主机上面各个进程间的通信，管理端到端的连接\n  6. 表示层：数据格式的转换，如编码，格式转换，加密，解密\n  7. 应用层：应用程序和网络之间的接口，直接向用户提供服务。比如电子邮件协议，远程登录协议，FTP协议\n\n#### 2.TCP/IP四层模型\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa1d6d63dj30nx0d9tan.jpg\" style=\"zoom:80%;\" />\n\n##### 1.网络接入层：\n\n```\n对网络介质的管理，以及定义如何使用网络来通信。设备之间通过物理介质互连，互连的设备通过 {% btn 'https://baike.baidu.com/item/MAC地址',MAC地址,far fa-hand-point-right %}实现数据的传输。采用MAC地址就是为了识别同一个网络上面的设备。\n```\n\n\n##### 2.网络层：\n\n```\n使用IP协议，根据IP地址进行数据包的转发，也就是把数据包从源地址发送到目的地址。路由器就是通过网络层实现转发数据包的功能。每个节点会根据地址的信息来判断该报文由那个网卡发出来的。MAC寻址中会参考MAC地址转发表，IP寻址会参考路由控制表。\n```\n\n\n![](https://tva1.sinaimg.cn/large/008i3skNly1gsa1ul4uf3j60gq05cdg702.jpg)\n\n* IP：IP作为主机的标识，使整个互联网都能收到数据。IP协议独立于底层介质，实现从源到目的端的数据传输。iP协议不具有重发机制，属于非可靠的传输协议，需要依靠上层的TCP协议来实现。\n* {% btn 'https://baike.baidu.com/item/ICMP',ICMP,far fa-hand-point-right %}用于在IP主机中，路由之间传递控制消息的协议，用来诊断网络的健康状况。\n* {% btn 'https://baike.baidu.com/item/ARP/609343',ARP,far fa-hand-point-right %}从数据包的IP地址中解析出MAC地址。\n\n##### 3.传输层：\n\n```\n主要功能就是让应用程序直接相互通信，通过端口号进行识别应用程序。使用面向连接的{% label TCP协议 blue %}和面向无连接的{% label UDP协议 blue %}.面向连接就是打电话，需要双方建立连接，确认对方存在且正常。面向无连接就是寄信，只需要知道一个地址，不需要确认对方是否存在，也不需要确认对方是否会收到信。\n```\n\n\n* {% btn 'https://baike.baidu.com/item/TCP/33012',TCP,far fa-hand-point-right %} 面向连接的，可靠的流式传输协议,用于文件传输\n* {% btn 'https://baike.baidu.com/item/UDP',UDP,far fa-hand-point-right %}面向无连接的，不可靠的报式传输协议，用于视频通话，直播\n\n##### 5.应用层：\n\n```\n常见的协议都是应用层的协议，如HTTP，POP3，FTP\n```\n\n\n#### 4. 封装和解装\n\n![封装](https://tva1.sinaimg.cn/large/008i3skNly1gsa2m2jc84j30u008lq4g.jpg)\n\n数据发送之前，按照参考模型从上面到下面都会封装各自层的信息，包括数据和各层的协议信息。\n\n![解封包](https://tva1.sinaimg.cn/large/008i3skNly1gsa2o7p4kyj30u008lwg0.jpg)\n\n按照模型，从下到上，每过一层就去掉一层协议信息，到最后的应用层就会拿到数据\n","source":"_posts/OSI 七层模型.md","raw":"---\ntitle: 网络模型\ndate: 2020-06-20\ntag:\n  - 网络\n  - 底层\ncategories:\n  - Linux\nkeywords: \"底层,网络\"\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gsa1d6d63dj30nx0d9tan.jpg\nsticky: 1\n---\n#### 1.OSI 七层模型\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa0oyuoylj618m0so48z02.jpg\" style=\"zoom:60%;\" />\n\n* 1. 物理层：网线的类型，光纤的接口，网卡等硬件设备，主要作用：传输比特流（1，0转化为电流的强弱），这一层的数据叫做{% label 比特 blue %}\n  2. 数据链路层：物理层面两个主机间的通信传输，将比特流划分为帧传输给对端数据单元为{% label 帧 pink %}\n  3. 网络层：在网络上将数据传输到目的地址，负责寻址和路由的选择，传输路径的选择,数据单元为{% label 包 pink %}\n  4. 传输层：提供数据的传输服务，在端到端之间进行数据传输，数据单元为{% label 段 pink %}\n  5. 会话层：管理和协调不同主机上面各个进程间的通信，管理端到端的连接\n  6. 表示层：数据格式的转换，如编码，格式转换，加密，解密\n  7. 应用层：应用程序和网络之间的接口，直接向用户提供服务。比如电子邮件协议，远程登录协议，FTP协议\n\n#### 2.TCP/IP四层模型\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa1d6d63dj30nx0d9tan.jpg\" style=\"zoom:80%;\" />\n\n##### 1.网络接入层：\n\n```\n对网络介质的管理，以及定义如何使用网络来通信。设备之间通过物理介质互连，互连的设备通过 {% btn 'https://baike.baidu.com/item/MAC地址',MAC地址,far fa-hand-point-right %}实现数据的传输。采用MAC地址就是为了识别同一个网络上面的设备。\n```\n\n\n##### 2.网络层：\n\n```\n使用IP协议，根据IP地址进行数据包的转发，也就是把数据包从源地址发送到目的地址。路由器就是通过网络层实现转发数据包的功能。每个节点会根据地址的信息来判断该报文由那个网卡发出来的。MAC寻址中会参考MAC地址转发表，IP寻址会参考路由控制表。\n```\n\n\n![](https://tva1.sinaimg.cn/large/008i3skNly1gsa1ul4uf3j60gq05cdg702.jpg)\n\n* IP：IP作为主机的标识，使整个互联网都能收到数据。IP协议独立于底层介质，实现从源到目的端的数据传输。iP协议不具有重发机制，属于非可靠的传输协议，需要依靠上层的TCP协议来实现。\n* {% btn 'https://baike.baidu.com/item/ICMP',ICMP,far fa-hand-point-right %}用于在IP主机中，路由之间传递控制消息的协议，用来诊断网络的健康状况。\n* {% btn 'https://baike.baidu.com/item/ARP/609343',ARP,far fa-hand-point-right %}从数据包的IP地址中解析出MAC地址。\n\n##### 3.传输层：\n\n```\n主要功能就是让应用程序直接相互通信，通过端口号进行识别应用程序。使用面向连接的{% label TCP协议 blue %}和面向无连接的{% label UDP协议 blue %}.面向连接就是打电话，需要双方建立连接，确认对方存在且正常。面向无连接就是寄信，只需要知道一个地址，不需要确认对方是否存在，也不需要确认对方是否会收到信。\n```\n\n\n* {% btn 'https://baike.baidu.com/item/TCP/33012',TCP,far fa-hand-point-right %} 面向连接的，可靠的流式传输协议,用于文件传输\n* {% btn 'https://baike.baidu.com/item/UDP',UDP,far fa-hand-point-right %}面向无连接的，不可靠的报式传输协议，用于视频通话，直播\n\n##### 5.应用层：\n\n```\n常见的协议都是应用层的协议，如HTTP，POP3，FTP\n```\n\n\n#### 4. 封装和解装\n\n![封装](https://tva1.sinaimg.cn/large/008i3skNly1gsa2m2jc84j30u008lq4g.jpg)\n\n数据发送之前，按照参考模型从上面到下面都会封装各自层的信息，包括数据和各层的协议信息。\n\n![解封包](https://tva1.sinaimg.cn/large/008i3skNly1gsa2o7p4kyj30u008lwg0.jpg)\n\n按照模型，从下到上，每过一层就去掉一层协议信息，到最后的应用层就会拿到数据\n","slug":"OSI 七层模型","published":1,"updated":"2021-07-10T13:42:16.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xer000ak057ewk544qx","content":"<h4 id=\"1-OSI-七层模型\"><a href=\"#1-OSI-七层模型\" class=\"headerlink\" title=\"1.OSI 七层模型\"></a>1.OSI 七层模型</h4><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa0oyuoylj618m0so48z02.jpg\" style=\"zoom:60%;\" />\n\n<ul>\n<li><ol>\n<li>物理层：网线的类型，光纤的接口，网卡等硬件设备，主要作用：传输比特流（1，0转化为电流的强弱），这一层的数据叫做<mark class=\"hl-label blue\">比特</mark> </li>\n<li>数据链路层：物理层面两个主机间的通信传输，将比特流划分为帧传输给对端数据单元为<mark class=\"hl-label pink\">帧</mark> </li>\n<li>网络层：在网络上将数据传输到目的地址，负责寻址和路由的选择，传输路径的选择,数据单元为<mark class=\"hl-label pink\">包</mark> </li>\n<li>传输层：提供数据的传输服务，在端到端之间进行数据传输，数据单元为<mark class=\"hl-label pink\">段</mark> </li>\n<li>会话层：管理和协调不同主机上面各个进程间的通信，管理端到端的连接</li>\n<li>表示层：数据格式的转换，如编码，格式转换，加密，解密</li>\n<li>应用层：应用程序和网络之间的接口，直接向用户提供服务。比如电子邮件协议，远程登录协议，FTP协议</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"2-TCP-IP四层模型\"><a href=\"#2-TCP-IP四层模型\" class=\"headerlink\" title=\"2.TCP/IP四层模型\"></a>2.TCP/IP四层模型</h4><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa1d6d63dj30nx0d9tan.jpg\" style=\"zoom:80%;\" />\n\n<h5 id=\"1-网络接入层：\"><a href=\"#1-网络接入层：\" class=\"headerlink\" title=\"1.网络接入层：\"></a>1.网络接入层：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对网络介质的管理，以及定义如何使用网络来通信。设备之间通过物理介质互连，互连的设备通过 &#123;% btn &#x27;https://baike.baidu.com/item/MAC地址&#x27;,MAC地址,far fa-hand-point-right %&#125;实现数据的传输。采用MAC地址就是为了识别同一个网络上面的设备。</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"2-网络层：\"><a href=\"#2-网络层：\" class=\"headerlink\" title=\"2.网络层：\"></a>2.网络层：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用IP协议，根据IP地址进行数据包的转发，也就是把数据包从源地址发送到目的地址。路由器就是通过网络层实现转发数据包的功能。每个节点会根据地址的信息来判断该报文由那个网卡发出来的。MAC寻址中会参考MAC地址转发表，IP寻址会参考路由控制表。</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa1ul4uf3j60gq05cdg702.jpg\"></p>\n<ul>\n<li>IP：IP作为主机的标识，使整个互联网都能收到数据。IP协议独立于底层介质，实现从源到目的端的数据传输。iP协议不具有重发机制，属于非可靠的传输协议，需要依靠上层的TCP协议来实现。</li>\n<li><a class=\"btn-beautify button--animated \" href=\"https://baike.baidu.com/item/ICMP\" \n  title=\"ICMP\"><i class=\"far fa-hand-point-right\"></i><span>ICMP</span></a>用于在IP主机中，路由之间传递控制消息的协议，用来诊断网络的健康状况。</li>\n<li><a class=\"btn-beautify button--animated \" href=\"https://baike.baidu.com/item/ARP/609343\" \n  title=\"ARP\"><i class=\"far fa-hand-point-right\"></i><span>ARP</span></a>从数据包的IP地址中解析出MAC地址。</li>\n</ul>\n<h5 id=\"3-传输层：\"><a href=\"#3-传输层：\" class=\"headerlink\" title=\"3.传输层：\"></a>3.传输层：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主要功能就是让应用程序直接相互通信，通过端口号进行识别应用程序。使用面向连接的&#123;% label TCP协议 blue %&#125;和面向无连接的&#123;% label UDP协议 blue %&#125;.面向连接就是打电话，需要双方建立连接，确认对方存在且正常。面向无连接就是寄信，只需要知道一个地址，不需要确认对方是否存在，也不需要确认对方是否会收到信。</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><a class=\"btn-beautify button--animated \" href=\"https://baike.baidu.com/item/TCP/33012\" \n  title=\"TCP\"><i class=\"far fa-hand-point-right\"></i><span>TCP</span></a> 面向连接的，可靠的流式传输协议,用于文件传输</li>\n<li><a class=\"btn-beautify button--animated \" href=\"https://baike.baidu.com/item/UDP\" \n  title=\"UDP\"><i class=\"far fa-hand-point-right\"></i><span>UDP</span></a>面向无连接的，不可靠的报式传输协议，用于视频通话，直播</li>\n</ul>\n<h5 id=\"5-应用层：\"><a href=\"#5-应用层：\" class=\"headerlink\" title=\"5.应用层：\"></a>5.应用层：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见的协议都是应用层的协议，如HTTP，POP3，FTP</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-封装和解装\"><a href=\"#4-封装和解装\" class=\"headerlink\" title=\"4. 封装和解装\"></a>4. 封装和解装</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa2m2jc84j30u008lq4g.jpg\" alt=\"封装\"></p>\n<p>数据发送之前，按照参考模型从上面到下面都会封装各自层的信息，包括数据和各层的协议信息。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa2o7p4kyj30u008lwg0.jpg\" alt=\"解封包\"></p>\n<p>按照模型，从下到上，每过一层就去掉一层协议信息，到最后的应用层就会拿到数据</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h4 id=\"1-OSI-七层模型\"><a href=\"#1-OSI-七层模型\" class=\"headerlink\" title=\"1.OSI 七层模型\"></a>1.OSI 七层模型</h4><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa0oyuoylj618m0so48z02.jpg\" style=\"zoom:60%;\" />\n\n<ul>\n<li><ol>\n<li>物理层：网线的类型，光纤的接口，网卡等硬件设备，主要作用：传输比特流（1，0转化为电流的强弱），这一层的数据叫做<mark class=\"hl-label blue\">比特</mark> </li>\n<li>数据链路层：物理层面两个主机间的通信传输，将比特流划分为帧传输给对端数据单元为<mark class=\"hl-label pink\">帧</mark> </li>\n<li>网络层：在网络上将数据传输到目的地址，负责寻址和路由的选择，传输路径的选择,数据单元为<mark class=\"hl-label pink\">包</mark> </li>\n<li>传输层：提供数据的传输服务，在端到端之间进行数据传输，数据单元为<mark class=\"hl-label pink\">段</mark> </li>\n<li>会话层：管理和协调不同主机上面各个进程间的通信，管理端到端的连接</li>\n<li>表示层：数据格式的转换，如编码，格式转换，加密，解密</li>\n<li>应用层：应用程序和网络之间的接口，直接向用户提供服务。比如电子邮件协议，远程登录协议，FTP协议</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"2-TCP-IP四层模型\"><a href=\"#2-TCP-IP四层模型\" class=\"headerlink\" title=\"2.TCP/IP四层模型\"></a>2.TCP/IP四层模型</h4><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa1d6d63dj30nx0d9tan.jpg\" style=\"zoom:80%;\" />\n\n<h5 id=\"1-网络接入层：\"><a href=\"#1-网络接入层：\" class=\"headerlink\" title=\"1.网络接入层：\"></a>1.网络接入层：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对网络介质的管理，以及定义如何使用网络来通信。设备之间通过物理介质互连，互连的设备通过 &#123;% btn &#x27;https://baike.baidu.com/item/MAC地址&#x27;,MAC地址,far fa-hand-point-right %&#125;实现数据的传输。采用MAC地址就是为了识别同一个网络上面的设备。</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"2-网络层：\"><a href=\"#2-网络层：\" class=\"headerlink\" title=\"2.网络层：\"></a>2.网络层：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用IP协议，根据IP地址进行数据包的转发，也就是把数据包从源地址发送到目的地址。路由器就是通过网络层实现转发数据包的功能。每个节点会根据地址的信息来判断该报文由那个网卡发出来的。MAC寻址中会参考MAC地址转发表，IP寻址会参考路由控制表。</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa1ul4uf3j60gq05cdg702.jpg\"></p>\n<ul>\n<li>IP：IP作为主机的标识，使整个互联网都能收到数据。IP协议独立于底层介质，实现从源到目的端的数据传输。iP协议不具有重发机制，属于非可靠的传输协议，需要依靠上层的TCP协议来实现。</li>\n<li><a class=\"btn-beautify button--animated \" href=\"https://baike.baidu.com/item/ICMP\" \n  title=\"ICMP\"><i class=\"far fa-hand-point-right\"></i><span>ICMP</span></a>用于在IP主机中，路由之间传递控制消息的协议，用来诊断网络的健康状况。</li>\n<li><a class=\"btn-beautify button--animated \" href=\"https://baike.baidu.com/item/ARP/609343\" \n  title=\"ARP\"><i class=\"far fa-hand-point-right\"></i><span>ARP</span></a>从数据包的IP地址中解析出MAC地址。</li>\n</ul>\n<h5 id=\"3-传输层：\"><a href=\"#3-传输层：\" class=\"headerlink\" title=\"3.传输层：\"></a>3.传输层：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主要功能就是让应用程序直接相互通信，通过端口号进行识别应用程序。使用面向连接的&#123;% label TCP协议 blue %&#125;和面向无连接的&#123;% label UDP协议 blue %&#125;.面向连接就是打电话，需要双方建立连接，确认对方存在且正常。面向无连接就是寄信，只需要知道一个地址，不需要确认对方是否存在，也不需要确认对方是否会收到信。</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><a class=\"btn-beautify button--animated \" href=\"https://baike.baidu.com/item/TCP/33012\" \n  title=\"TCP\"><i class=\"far fa-hand-point-right\"></i><span>TCP</span></a> 面向连接的，可靠的流式传输协议,用于文件传输</li>\n<li><a class=\"btn-beautify button--animated \" href=\"https://baike.baidu.com/item/UDP\" \n  title=\"UDP\"><i class=\"far fa-hand-point-right\"></i><span>UDP</span></a>面向无连接的，不可靠的报式传输协议，用于视频通话，直播</li>\n</ul>\n<h5 id=\"5-应用层：\"><a href=\"#5-应用层：\" class=\"headerlink\" title=\"5.应用层：\"></a>5.应用层：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见的协议都是应用层的协议，如HTTP，POP3，FTP</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-封装和解装\"><a href=\"#4-封装和解装\" class=\"headerlink\" title=\"4. 封装和解装\"></a>4. 封装和解装</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa2m2jc84j30u008lq4g.jpg\" alt=\"封装\"></p>\n<p>数据发送之前，按照参考模型从上面到下面都会封装各自层的信息，包括数据和各层的协议信息。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa2o7p4kyj30u008lwg0.jpg\" alt=\"解封包\"></p>\n<p>按照模型，从下到上，每过一层就去掉一层协议信息，到最后的应用层就会拿到数据</p>\n"},{"title":"shell脚本简单总结","date":"2020-05-17T16:00:00.000Z","keywords":"shell,脚本","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gsa3299d7jj30c106lt8p.jpg","sticky":1,"_content":"### 1.shell脚本的执行\n\n```shell\n1.给脚本赋予执行权限后，./xxx.sh\n\n2. . xxx.sh\n\n3. source xxx.sh\n```\n\n### 2.shell变量\n\n```shell\n1.环境变量\n\n\tprintenv 显示当前shell进程下的环境变量\n\n\n2.本地变量\n\n\t设置本地变量 VAR=10 VAR1=\"hello\"\n\t使用本地变量 $VAR  $VAR1\n\t本地变量变成环境变量   export VAR=10\n\t取消本地变量 unset VAR\n\nset 查看shell进程的本地变量和环境变量\n\n没有定义的变量取值是空字符串\n\n```\n\n### 3.shell代换\n\n#### 3.1文件名代换\n\n```shell\n* 匹配0个或多个  ls a*\n？ 匹配一个\t\tls a?\n[]列表中的任意一个字符的一次匹配 ls a[123]   ls a[1-3]\n\n匹配的文件名是由shell展开的，还没有传给程序之前，已经展开了，传递的是文件名，不是字符串\n```\n\n#### 3.2命令代换\n\n```shell\n1. `命令`，如 DATE=`date`\n2. $(命令)，如 DATE=$(date)\n```\n\n#### 3.3 算术代换\n\n```shell\n1. $(()),如 VAR=10，$(($VAR+1)),输出11\n\n2. $[],如 VAR=10，$[VAR+1]（或者 $[$VAR+1] ），输出11\n\n\t$[base#n],以多少进制输出，如 $[2#10+11]代表2进制的10加上10进制的11\n\n\n```\n\n#### 3.4转义代换\n\n```shell\n输出原意字符\necho \\$VAR,输出$VAR\n\necho \\\\,输出\\\n\n1. 如创建一个文件，名字为$ $\n\t touch \\$\\ \\$\n\n特殊：-\n\n2.如创建一个文件，名字为 -hello\n\n\ttouch -- -hello.  OR    touch ./-hello\n\n\n3. \\ 还有续行的含义\n\n```\n\n### 4.单引号和双引号\n\n```shell \n1.''   保持引号内字符的字面值\n\n\t如： echo '$VAR' ,out: $VAR\n\n\t    echo  'abc\\(enter)de',out: abc\\(enter)de\n\t  \n2.\"\" 被视为单一字符串，允许变量扩展\n\n\t如：\n\t\tDATE=$(date)\n\t\techo \"DATE\" ,out:输出时间\n\t\techo 'DATE' ,out:输出 DATE 字面值\n```\n\n### 5.条件测试\n\n```shell\n1.  test\n\n\teg: var=2\n\t\ttest $var -gt 1\n\t\techo $?  (查看上一个进程的返回值，0为真，1位假)\n\n2. []\n\n\teg: \n\t\t[$var -gt 1]\n\t\n\t\n3.\n\t-d 文件\n\t-f 普通文件\n\t-z string string长度为0，则为真\n\t-n string string长度非0为真\n\t=  相同为真\n\t!= 不同为真\n\n\tARG1 OP ARG2：\n\t\tOP：\n\t\t\t-eq 等于\n\t\t\t-ne 不等于\n\t\t\t-lt 小于\n\t\t\t-gt 大于\n\t\t\t-ge 大于等于\n\t\t\t-le 小于等于\n\t\t\n\t！ 非\n\t-a 与\n\t-o 或\n\n\t\t\n\n```\n\n### 6.分支\n\n```shell\nif [ condition1 ];then\n\tcmd1\nelif [ condition2 ];then\n\tcmd2\nelse\n\tcmd3\nfi\n\n\n-----------------------------------------------------------------------------------\n\ncase \"$VAR\" in\ncondition1)\n\tcmd1;;\nconition2)\n\tcmd2;;(多条命令，最后一条命令加;;)\nesac\n```\n\n### 7.循环\n\n```shell\nfor VAR in list;do\n\tcmd\ndone\n\n-----------------------------------------------------------------------------------\nwhile [ conition1 ];do\n\tcmd\ndone\n\n\nbreak[n]可以指定跳出几层循环；continue跳过本次循环，但不会跳出循环\n```\n\n### 8.位置参数和特殊变量\n\n```shell\n$0 -->argv[0]\n$1,$2...  --->位置参数, argv[1],argv[2]...\n$# ---> argc-1\n$@ ---> 参数列表\n$* ---> 参数列表\n$? ---> 上一条命令的退出值\n$$ ---> 当前进程号\n```\n\n### 9.echo\n\n```shell\n显示文本或者变量，把字符串输入到文件\n\n-e 解析转义字符\n-n 不回车换行，默认后面跟一个回车换行\n\n```\n\n### 10.管道\n\n```shell\n| 把前面命令的输出做为后面命令的输入\n\ncat myfile | more \n\nls -l | grep \"myfile\"\n\ndf -k | awk `{print $1}`\n\n```\n\n### 11.文件重定向\n\n```shell\ncmd > file 把标准输出重定向到新文件中\ncmd >> file 追加\n\ncmd > file 2>&1 标准出错也重新定向到1所指的file中   所有的东西都进入文件file\ncmd >> file 2>&1\n\ncmd < file1 > file2 从file1读，写到file2中\n\ncmd < &fd 把文件描述符fd作为标准输入，从文件中读\ncmd > &fd  把文件描述符fd作为标准输出，输入到文件\n\ncmd < &- 关闭标准输入\n\n\n```\n","source":"_posts/SHELL 脚本.md","raw":"---\ntitle: shell脚本简单总结\ndate: 2020-05-18\ntag:\n  - 基础\n  - shell\ncategories:\n  - Linux\nkeywords: \"shell,脚本\"\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gsa3299d7jj30c106lt8p.jpg\nsticky: 1\n---\n### 1.shell脚本的执行\n\n```shell\n1.给脚本赋予执行权限后，./xxx.sh\n\n2. . xxx.sh\n\n3. source xxx.sh\n```\n\n### 2.shell变量\n\n```shell\n1.环境变量\n\n\tprintenv 显示当前shell进程下的环境变量\n\n\n2.本地变量\n\n\t设置本地变量 VAR=10 VAR1=\"hello\"\n\t使用本地变量 $VAR  $VAR1\n\t本地变量变成环境变量   export VAR=10\n\t取消本地变量 unset VAR\n\nset 查看shell进程的本地变量和环境变量\n\n没有定义的变量取值是空字符串\n\n```\n\n### 3.shell代换\n\n#### 3.1文件名代换\n\n```shell\n* 匹配0个或多个  ls a*\n？ 匹配一个\t\tls a?\n[]列表中的任意一个字符的一次匹配 ls a[123]   ls a[1-3]\n\n匹配的文件名是由shell展开的，还没有传给程序之前，已经展开了，传递的是文件名，不是字符串\n```\n\n#### 3.2命令代换\n\n```shell\n1. `命令`，如 DATE=`date`\n2. $(命令)，如 DATE=$(date)\n```\n\n#### 3.3 算术代换\n\n```shell\n1. $(()),如 VAR=10，$(($VAR+1)),输出11\n\n2. $[],如 VAR=10，$[VAR+1]（或者 $[$VAR+1] ），输出11\n\n\t$[base#n],以多少进制输出，如 $[2#10+11]代表2进制的10加上10进制的11\n\n\n```\n\n#### 3.4转义代换\n\n```shell\n输出原意字符\necho \\$VAR,输出$VAR\n\necho \\\\,输出\\\n\n1. 如创建一个文件，名字为$ $\n\t touch \\$\\ \\$\n\n特殊：-\n\n2.如创建一个文件，名字为 -hello\n\n\ttouch -- -hello.  OR    touch ./-hello\n\n\n3. \\ 还有续行的含义\n\n```\n\n### 4.单引号和双引号\n\n```shell \n1.''   保持引号内字符的字面值\n\n\t如： echo '$VAR' ,out: $VAR\n\n\t    echo  'abc\\(enter)de',out: abc\\(enter)de\n\t  \n2.\"\" 被视为单一字符串，允许变量扩展\n\n\t如：\n\t\tDATE=$(date)\n\t\techo \"DATE\" ,out:输出时间\n\t\techo 'DATE' ,out:输出 DATE 字面值\n```\n\n### 5.条件测试\n\n```shell\n1.  test\n\n\teg: var=2\n\t\ttest $var -gt 1\n\t\techo $?  (查看上一个进程的返回值，0为真，1位假)\n\n2. []\n\n\teg: \n\t\t[$var -gt 1]\n\t\n\t\n3.\n\t-d 文件\n\t-f 普通文件\n\t-z string string长度为0，则为真\n\t-n string string长度非0为真\n\t=  相同为真\n\t!= 不同为真\n\n\tARG1 OP ARG2：\n\t\tOP：\n\t\t\t-eq 等于\n\t\t\t-ne 不等于\n\t\t\t-lt 小于\n\t\t\t-gt 大于\n\t\t\t-ge 大于等于\n\t\t\t-le 小于等于\n\t\t\n\t！ 非\n\t-a 与\n\t-o 或\n\n\t\t\n\n```\n\n### 6.分支\n\n```shell\nif [ condition1 ];then\n\tcmd1\nelif [ condition2 ];then\n\tcmd2\nelse\n\tcmd3\nfi\n\n\n-----------------------------------------------------------------------------------\n\ncase \"$VAR\" in\ncondition1)\n\tcmd1;;\nconition2)\n\tcmd2;;(多条命令，最后一条命令加;;)\nesac\n```\n\n### 7.循环\n\n```shell\nfor VAR in list;do\n\tcmd\ndone\n\n-----------------------------------------------------------------------------------\nwhile [ conition1 ];do\n\tcmd\ndone\n\n\nbreak[n]可以指定跳出几层循环；continue跳过本次循环，但不会跳出循环\n```\n\n### 8.位置参数和特殊变量\n\n```shell\n$0 -->argv[0]\n$1,$2...  --->位置参数, argv[1],argv[2]...\n$# ---> argc-1\n$@ ---> 参数列表\n$* ---> 参数列表\n$? ---> 上一条命令的退出值\n$$ ---> 当前进程号\n```\n\n### 9.echo\n\n```shell\n显示文本或者变量，把字符串输入到文件\n\n-e 解析转义字符\n-n 不回车换行，默认后面跟一个回车换行\n\n```\n\n### 10.管道\n\n```shell\n| 把前面命令的输出做为后面命令的输入\n\ncat myfile | more \n\nls -l | grep \"myfile\"\n\ndf -k | awk `{print $1}`\n\n```\n\n### 11.文件重定向\n\n```shell\ncmd > file 把标准输出重定向到新文件中\ncmd >> file 追加\n\ncmd > file 2>&1 标准出错也重新定向到1所指的file中   所有的东西都进入文件file\ncmd >> file 2>&1\n\ncmd < file1 > file2 从file1读，写到file2中\n\ncmd < &fd 把文件描述符fd作为标准输入，从文件中读\ncmd > &fd  把文件描述符fd作为标准输出，输入到文件\n\ncmd < &- 关闭标准输入\n\n\n```\n","slug":"SHELL 脚本","published":1,"updated":"2021-07-08T18:24:55.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xeu000ek057hnax7r4h","content":"<h3 id=\"1-shell脚本的执行\"><a href=\"#1-shell脚本的执行\" class=\"headerlink\" title=\"1.shell脚本的执行\"></a>1.shell脚本的执行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.给脚本赋予执行权限后，./xxx.sh</span><br><span class=\"line\"></span><br><span class=\"line\">2. . xxx.sh</span><br><span class=\"line\"></span><br><span class=\"line\">3. source xxx.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-shell变量\"><a href=\"#2-shell变量\" class=\"headerlink\" title=\"2.shell变量\"></a>2.shell变量</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintenv 显示当前shell进程下的环境变量</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2.本地变量</span><br><span class=\"line\"></span><br><span class=\"line\">\t设置本地变量 VAR=10 VAR1=&quot;hello&quot;</span><br><span class=\"line\">\t使用本地变量 $VAR  $VAR1</span><br><span class=\"line\">\t本地变量变成环境变量   export VAR=10</span><br><span class=\"line\">\t取消本地变量 unset VAR</span><br><span class=\"line\"></span><br><span class=\"line\">set 查看shell进程的本地变量和环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">没有定义的变量取值是空字符串</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-shell代换\"><a href=\"#3-shell代换\" class=\"headerlink\" title=\"3.shell代换\"></a>3.shell代换</h3><h4 id=\"3-1文件名代换\"><a href=\"#3-1文件名代换\" class=\"headerlink\" title=\"3.1文件名代换\"></a>3.1文件名代换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 匹配0个或多个  ls a*</span><br><span class=\"line\">？ 匹配一个\t\tls a?</span><br><span class=\"line\">[]列表中的任意一个字符的一次匹配 ls a[123]   ls a[1-3]</span><br><span class=\"line\"></span><br><span class=\"line\">匹配的文件名是由shell展开的，还没有传给程序之前，已经展开了，传递的是文件名，不是字符串</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2命令代换\"><a href=\"#3-2命令代换\" class=\"headerlink\" title=\"3.2命令代换\"></a>3.2命令代换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. `命令`，如 DATE=`date`</span><br><span class=\"line\">2. $(命令)，如 DATE=$(date)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-算术代换\"><a href=\"#3-3-算术代换\" class=\"headerlink\" title=\"3.3 算术代换\"></a>3.3 算术代换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. $(()),如 VAR=10，$(($VAR+1)),输出11</span><br><span class=\"line\"></span><br><span class=\"line\">2. $[],如 VAR=10，$[VAR+1]（或者 $[$VAR+1] ），输出11</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">\t$</span><span class=\"bash\">[base<span class=\"comment\">#n],以多少进制输出，如 $[2#10+11]代表2进制的10加上10进制的11</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-4转义代换\"><a href=\"#3-4转义代换\" class=\"headerlink\" title=\"3.4转义代换\"></a>3.4转义代换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出原意字符</span><br><span class=\"line\">echo \\$VAR,输出$VAR</span><br><span class=\"line\"></span><br><span class=\"line\">echo \\\\,输出\\</span><br><span class=\"line\"></span><br><span class=\"line\">1. 如创建一个文件，名字为$ $</span><br><span class=\"line\">\t touch \\$\\ \\$</span><br><span class=\"line\"></span><br><span class=\"line\">特殊：-</span><br><span class=\"line\"></span><br><span class=\"line\">2.如创建一个文件，名字为 -hello</span><br><span class=\"line\"></span><br><span class=\"line\">\ttouch -- -hello.  OR    touch ./-hello</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3. \\ 还有续行的含义</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-单引号和双引号\"><a href=\"#4-单引号和双引号\" class=\"headerlink\" title=\"4.单引号和双引号\"></a>4.单引号和双引号</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.&#x27;&#x27;   保持引号内字符的字面值</span><br><span class=\"line\"></span><br><span class=\"line\">\t如： echo &#x27;$VAR&#x27; ,out: $VAR</span><br><span class=\"line\"></span><br><span class=\"line\">\t    echo  &#x27;abc\\(enter)de&#x27;,out: abc\\(enter)de</span><br><span class=\"line\">\t  </span><br><span class=\"line\">2.&quot;&quot; 被视为单一字符串，允许变量扩展</span><br><span class=\"line\"></span><br><span class=\"line\">\t如：</span><br><span class=\"line\">\t\tDATE=$(date)</span><br><span class=\"line\">\t\techo &quot;DATE&quot; ,out:输出时间</span><br><span class=\"line\">\t\techo &#x27;DATE&#x27; ,out:输出 DATE 字面值</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-条件测试\"><a href=\"#5-条件测试\" class=\"headerlink\" title=\"5.条件测试\"></a>5.条件测试</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.  test</span><br><span class=\"line\"></span><br><span class=\"line\">\teg: var=2</span><br><span class=\"line\">\t\ttest $var -gt 1</span><br><span class=\"line\">\t\techo $?  (查看上一个进程的返回值，0为真，1位假)</span><br><span class=\"line\"></span><br><span class=\"line\">2. []</span><br><span class=\"line\"></span><br><span class=\"line\">\teg: </span><br><span class=\"line\"><span class=\"meta\">\t\t[$</span><span class=\"bash\">var -gt 1]</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">3.</span><br><span class=\"line\">\t-d 文件</span><br><span class=\"line\">\t-f 普通文件</span><br><span class=\"line\">\t-z string string长度为0，则为真</span><br><span class=\"line\">\t-n string string长度非0为真</span><br><span class=\"line\">\t=  相同为真</span><br><span class=\"line\">\t!= 不同为真</span><br><span class=\"line\"></span><br><span class=\"line\">\tARG1 OP ARG2：</span><br><span class=\"line\">\t\tOP：</span><br><span class=\"line\">\t\t\t-eq 等于</span><br><span class=\"line\">\t\t\t-ne 不等于</span><br><span class=\"line\">\t\t\t-lt 小于</span><br><span class=\"line\">\t\t\t-gt 大于</span><br><span class=\"line\">\t\t\t-ge 大于等于</span><br><span class=\"line\">\t\t\t-le 小于等于</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t！ 非</span><br><span class=\"line\">\t-a 与</span><br><span class=\"line\">\t-o 或</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-分支\"><a href=\"#6-分支\" class=\"headerlink\" title=\"6.分支\"></a>6.分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ condition1 ];then</span><br><span class=\"line\">\tcmd1</span><br><span class=\"line\">elif [ condition2 ];then</span><br><span class=\"line\">\tcmd2</span><br><span class=\"line\">else</span><br><span class=\"line\">\tcmd3</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$VAR&quot; in</span><br><span class=\"line\">condition1)</span><br><span class=\"line\">\tcmd1;;</span><br><span class=\"line\">conition2)</span><br><span class=\"line\">\tcmd2;;(多条命令，最后一条命令加;;)</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-循环\"><a href=\"#7-循环\" class=\"headerlink\" title=\"7.循环\"></a>7.循环</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for VAR in list;do</span><br><span class=\"line\">\tcmd</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------------------------------------------</span><br><span class=\"line\">while [ conition1 ];do</span><br><span class=\"line\">\tcmd</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">break[n]可以指定跳出几层循环；continue跳过本次循环，但不会跳出循环</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-位置参数和特殊变量\"><a href=\"#8-位置参数和特殊变量\" class=\"headerlink\" title=\"8.位置参数和特殊变量\"></a>8.位置参数和特殊变量</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">0 --&gt;argv[0]</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">1,<span class=\"variable\">$2</span>...  ---&gt;位置参数, argv[1],argv[2]...</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"comment\"># ---&gt; argc-1</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">@ ---&gt; 参数列表</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">* ---&gt; 参数列表</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">? ---&gt; 上一条命令的退出值</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">$ ---&gt; 当前进程号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-echo\"><a href=\"#9-echo\" class=\"headerlink\" title=\"9.echo\"></a>9.echo</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示文本或者变量，把字符串输入到文件</span><br><span class=\"line\"></span><br><span class=\"line\">-e 解析转义字符</span><br><span class=\"line\">-n 不回车换行，默认后面跟一个回车换行</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-管道\"><a href=\"#10-管道\" class=\"headerlink\" title=\"10.管道\"></a>10.管道</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 把前面命令的输出做为后面命令的输入</span><br><span class=\"line\"></span><br><span class=\"line\">cat myfile | more </span><br><span class=\"line\"></span><br><span class=\"line\">ls -l | grep &quot;myfile&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">df -k | awk `&#123;print $1&#125;`</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-文件重定向\"><a href=\"#11-文件重定向\" class=\"headerlink\" title=\"11.文件重定向\"></a>11.文件重定向</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd &gt; file 把标准输出重定向到新文件中</span><br><span class=\"line\">cmd &gt;&gt; file 追加</span><br><span class=\"line\"></span><br><span class=\"line\">cmd &gt; file 2&gt;&amp;1 标准出错也重新定向到1所指的file中   所有的东西都进入文件file</span><br><span class=\"line\">cmd &gt;&gt; file 2&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">cmd &lt; file1 &gt; file2 从file1读，写到file2中</span><br><span class=\"line\"></span><br><span class=\"line\">cmd &lt; &amp;fd 把文件描述符fd作为标准输入，从文件中读</span><br><span class=\"line\">cmd &gt; &amp;fd  把文件描述符fd作为标准输出，输入到文件</span><br><span class=\"line\"></span><br><span class=\"line\">cmd &lt; &amp;- 关闭标准输入</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"1-shell脚本的执行\"><a href=\"#1-shell脚本的执行\" class=\"headerlink\" title=\"1.shell脚本的执行\"></a>1.shell脚本的执行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.给脚本赋予执行权限后，./xxx.sh</span><br><span class=\"line\"></span><br><span class=\"line\">2. . xxx.sh</span><br><span class=\"line\"></span><br><span class=\"line\">3. source xxx.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-shell变量\"><a href=\"#2-shell变量\" class=\"headerlink\" title=\"2.shell变量\"></a>2.shell变量</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintenv 显示当前shell进程下的环境变量</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2.本地变量</span><br><span class=\"line\"></span><br><span class=\"line\">\t设置本地变量 VAR=10 VAR1=&quot;hello&quot;</span><br><span class=\"line\">\t使用本地变量 $VAR  $VAR1</span><br><span class=\"line\">\t本地变量变成环境变量   export VAR=10</span><br><span class=\"line\">\t取消本地变量 unset VAR</span><br><span class=\"line\"></span><br><span class=\"line\">set 查看shell进程的本地变量和环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">没有定义的变量取值是空字符串</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-shell代换\"><a href=\"#3-shell代换\" class=\"headerlink\" title=\"3.shell代换\"></a>3.shell代换</h3><h4 id=\"3-1文件名代换\"><a href=\"#3-1文件名代换\" class=\"headerlink\" title=\"3.1文件名代换\"></a>3.1文件名代换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 匹配0个或多个  ls a*</span><br><span class=\"line\">？ 匹配一个\t\tls a?</span><br><span class=\"line\">[]列表中的任意一个字符的一次匹配 ls a[123]   ls a[1-3]</span><br><span class=\"line\"></span><br><span class=\"line\">匹配的文件名是由shell展开的，还没有传给程序之前，已经展开了，传递的是文件名，不是字符串</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2命令代换\"><a href=\"#3-2命令代换\" class=\"headerlink\" title=\"3.2命令代换\"></a>3.2命令代换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. `命令`，如 DATE=`date`</span><br><span class=\"line\">2. $(命令)，如 DATE=$(date)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-算术代换\"><a href=\"#3-3-算术代换\" class=\"headerlink\" title=\"3.3 算术代换\"></a>3.3 算术代换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. $(()),如 VAR=10，$(($VAR+1)),输出11</span><br><span class=\"line\"></span><br><span class=\"line\">2. $[],如 VAR=10，$[VAR+1]（或者 $[$VAR+1] ），输出11</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">\t$</span><span class=\"bash\">[base<span class=\"comment\">#n],以多少进制输出，如 $[2#10+11]代表2进制的10加上10进制的11</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-4转义代换\"><a href=\"#3-4转义代换\" class=\"headerlink\" title=\"3.4转义代换\"></a>3.4转义代换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出原意字符</span><br><span class=\"line\">echo \\$VAR,输出$VAR</span><br><span class=\"line\"></span><br><span class=\"line\">echo \\\\,输出\\</span><br><span class=\"line\"></span><br><span class=\"line\">1. 如创建一个文件，名字为$ $</span><br><span class=\"line\">\t touch \\$\\ \\$</span><br><span class=\"line\"></span><br><span class=\"line\">特殊：-</span><br><span class=\"line\"></span><br><span class=\"line\">2.如创建一个文件，名字为 -hello</span><br><span class=\"line\"></span><br><span class=\"line\">\ttouch -- -hello.  OR    touch ./-hello</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3. \\ 还有续行的含义</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-单引号和双引号\"><a href=\"#4-单引号和双引号\" class=\"headerlink\" title=\"4.单引号和双引号\"></a>4.单引号和双引号</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.&#x27;&#x27;   保持引号内字符的字面值</span><br><span class=\"line\"></span><br><span class=\"line\">\t如： echo &#x27;$VAR&#x27; ,out: $VAR</span><br><span class=\"line\"></span><br><span class=\"line\">\t    echo  &#x27;abc\\(enter)de&#x27;,out: abc\\(enter)de</span><br><span class=\"line\">\t  </span><br><span class=\"line\">2.&quot;&quot; 被视为单一字符串，允许变量扩展</span><br><span class=\"line\"></span><br><span class=\"line\">\t如：</span><br><span class=\"line\">\t\tDATE=$(date)</span><br><span class=\"line\">\t\techo &quot;DATE&quot; ,out:输出时间</span><br><span class=\"line\">\t\techo &#x27;DATE&#x27; ,out:输出 DATE 字面值</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-条件测试\"><a href=\"#5-条件测试\" class=\"headerlink\" title=\"5.条件测试\"></a>5.条件测试</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.  test</span><br><span class=\"line\"></span><br><span class=\"line\">\teg: var=2</span><br><span class=\"line\">\t\ttest $var -gt 1</span><br><span class=\"line\">\t\techo $?  (查看上一个进程的返回值，0为真，1位假)</span><br><span class=\"line\"></span><br><span class=\"line\">2. []</span><br><span class=\"line\"></span><br><span class=\"line\">\teg: </span><br><span class=\"line\"><span class=\"meta\">\t\t[$</span><span class=\"bash\">var -gt 1]</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">3.</span><br><span class=\"line\">\t-d 文件</span><br><span class=\"line\">\t-f 普通文件</span><br><span class=\"line\">\t-z string string长度为0，则为真</span><br><span class=\"line\">\t-n string string长度非0为真</span><br><span class=\"line\">\t=  相同为真</span><br><span class=\"line\">\t!= 不同为真</span><br><span class=\"line\"></span><br><span class=\"line\">\tARG1 OP ARG2：</span><br><span class=\"line\">\t\tOP：</span><br><span class=\"line\">\t\t\t-eq 等于</span><br><span class=\"line\">\t\t\t-ne 不等于</span><br><span class=\"line\">\t\t\t-lt 小于</span><br><span class=\"line\">\t\t\t-gt 大于</span><br><span class=\"line\">\t\t\t-ge 大于等于</span><br><span class=\"line\">\t\t\t-le 小于等于</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t！ 非</span><br><span class=\"line\">\t-a 与</span><br><span class=\"line\">\t-o 或</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-分支\"><a href=\"#6-分支\" class=\"headerlink\" title=\"6.分支\"></a>6.分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ condition1 ];then</span><br><span class=\"line\">\tcmd1</span><br><span class=\"line\">elif [ condition2 ];then</span><br><span class=\"line\">\tcmd2</span><br><span class=\"line\">else</span><br><span class=\"line\">\tcmd3</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$VAR&quot; in</span><br><span class=\"line\">condition1)</span><br><span class=\"line\">\tcmd1;;</span><br><span class=\"line\">conition2)</span><br><span class=\"line\">\tcmd2;;(多条命令，最后一条命令加;;)</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-循环\"><a href=\"#7-循环\" class=\"headerlink\" title=\"7.循环\"></a>7.循环</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for VAR in list;do</span><br><span class=\"line\">\tcmd</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------------------------------------------</span><br><span class=\"line\">while [ conition1 ];do</span><br><span class=\"line\">\tcmd</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">break[n]可以指定跳出几层循环；continue跳过本次循环，但不会跳出循环</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-位置参数和特殊变量\"><a href=\"#8-位置参数和特殊变量\" class=\"headerlink\" title=\"8.位置参数和特殊变量\"></a>8.位置参数和特殊变量</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">0 --&gt;argv[0]</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">1,<span class=\"variable\">$2</span>...  ---&gt;位置参数, argv[1],argv[2]...</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"comment\"># ---&gt; argc-1</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">@ ---&gt; 参数列表</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">* ---&gt; 参数列表</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">? ---&gt; 上一条命令的退出值</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">$ ---&gt; 当前进程号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-echo\"><a href=\"#9-echo\" class=\"headerlink\" title=\"9.echo\"></a>9.echo</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示文本或者变量，把字符串输入到文件</span><br><span class=\"line\"></span><br><span class=\"line\">-e 解析转义字符</span><br><span class=\"line\">-n 不回车换行，默认后面跟一个回车换行</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-管道\"><a href=\"#10-管道\" class=\"headerlink\" title=\"10.管道\"></a>10.管道</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 把前面命令的输出做为后面命令的输入</span><br><span class=\"line\"></span><br><span class=\"line\">cat myfile | more </span><br><span class=\"line\"></span><br><span class=\"line\">ls -l | grep &quot;myfile&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">df -k | awk `&#123;print $1&#125;`</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-文件重定向\"><a href=\"#11-文件重定向\" class=\"headerlink\" title=\"11.文件重定向\"></a>11.文件重定向</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd &gt; file 把标准输出重定向到新文件中</span><br><span class=\"line\">cmd &gt;&gt; file 追加</span><br><span class=\"line\"></span><br><span class=\"line\">cmd &gt; file 2&gt;&amp;1 标准出错也重新定向到1所指的file中   所有的东西都进入文件file</span><br><span class=\"line\">cmd &gt;&gt; file 2&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">cmd &lt; file1 &gt; file2 从file1读，写到file2中</span><br><span class=\"line\"></span><br><span class=\"line\">cmd &lt; &amp;fd 把文件描述符fd作为标准输入，从文件中读</span><br><span class=\"line\">cmd &gt; &amp;fd  把文件描述符fd作为标准输出，输入到文件</span><br><span class=\"line\"></span><br><span class=\"line\">cmd &lt; &amp;- 关闭标准输入</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"git学习","date":"2020-08-20T16:00:00.000Z","keywords":"git,版本控制","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gsau9qmjxvj30pa0ak757.jpg","sticky":3,"_content":"{% btn 'https://www.bilibili.com/video/BV19E411f76x/',直接看视频学习,far fa-hand-point-right %}\n\n### 什么是git?\n\n1. 分布式\n2. 版本控制\n3. 软件\n\n- 针对这三个名词的解释\n\n> + **软件**：git是一个软件，需要你安装在电脑本地才可以使用。\n> + **版本控制**：你的一篇论文，需要反复修改和保留历史版本，比如论文有修改版，完成版，终极完成版。做好版本控制，有利于回滚和修改\n> + **分布式**：版本不但在本地存在一份，远端也完全存在一份一样的。每一个安装了git的主机上都有一个版本备份，这个备份包括所有的历史版本和修改版本。\n\n- 安装git\n\n```\n参见：\n```\n\n[安装git](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)\n\n### 我接下来要干啥？\n\n1. 新建一个文件夹，或者进入你要做版本控制的目录\n2. 执行初始化命令\n\n   ``git init ``\n3. 查看目录下的文件状态\n\n   `git status`(新增和修改过的文件是红色的)\n4. 管理指定文件\n\n   `git add 文件名`\n\n   `git  add . `\n5. 个人信息的配置：用户名和邮箱\n\n   `git config --global user.name \"your name\"`\n\n   `git config --global user.email \"you@example.com\"`\n6. 生成版本\n\n   `git commit -m '版本描述信息'`\n7. 查看版本记录\n\n   `git log `\n\n   `git log --graph`以图形化的形式查看版本记录\n\n   `git log --graph --pretty=format:\"%h %s\"`简略版的版本记录，包括哈希值和版本描述\n\n### 我想回退指定版本？\n\n1. 回滚到之前版\n\n   ```\n   git log\n   git reset --hard 版本号   \n   ```\n2. 回滚到之后版本\n\n   ```\n   git reflog\n   git reset --hard 版本号\n   ```\n\n### 一个master分支不够怎么办？\n\n* 分支可以给我们提供另外一个环境，从master主线脱离出来，可以形成master专注于上线版本，新的dev 分支可以用于开发分支。\n\n> **基本的命令：**\n>\n> * 查看分支\n>\n>   ```\n>   git branch\n>   ```\n> * 创建新的分支\n>\n>   ```\n>   git branch 分支名称\n>   ```\n> * 切换分支\n>\n>   ```\n>   git checkout 分支名称\n>   ```\n> * 分支合并（可能产生冲突）\n>\n>   ```\n>   git merge 要合并的分支\n>   ```\n> * 删除分支\n>\n>   ```\n>   git branch -d 分支名称\n>   ```\n\n### 我想去公司继续搞代码？\n\n- 注册GitHub账号\n- 在GitHub新建一个仓库，记下仓库的地址\n\n#### 去公司之前你需要先把代码上传到自己的GitHub\n\n```\n1.给你的GitHub仓库起一个别名\n\tgit remote add origin 远程仓库地址\n2.向GitHub推送你的代码\n\tgit push -u origin 分支（后面可以简写成git push,这样默认的是master）\n```\n\n\n#### 到公司了，是一台新电脑，我该怎么办？\n\n```\n1.克隆远程仓库\n\tgit clone 远程仓库名称（内部已经实现了给远程仓库起别名）\n\n2.切换分支\n\t可以直接切换分支，本地新电脑已经有了所有分支\n\tgit checkout 分支名称\n```\n\n* 下面展现你在公司新电脑上的一套命令流程：\n\n  ```\n  1.切换到dev分支进行开发\n  \tgit checkout dev\n  2.把master分支合并到dev分支（只需要做一次，以保持dev分支的最新版本）\n  \tgit merge master\n  3.修改代码\n  4.提交代码到远程仓库\n  \tgit add .\n  \tgit commit -m '版本信息'\n  \tgit push origin dev (提交dev分支)\n  ```\n\n#### 下班回家继续开发\n\n* 下面展现你回到家继续写代码\n\n  ```\n  1.切换到dev分支进行开发\n  \tgit checkout dev\n  2.从远程仓库拉下代码\n  \tgit pull origin dev\n  3.继续开发\n\n  4.提交代码\n  \tgit add .\n  \tgit commit -m '版本描述'\n  \tgit push origin dev\n  ```\n\n#### 第二天又上班去\n\n下面展示你第二天上班需要做的事情\n\n```\n1.切换到dev 分支进行开发\n\tgit checkout dev\n2.拉最新代码，这是一个更新的步骤，不需要再去clone\n\tgit pull origin dev \n3.继续开发\n\n4.提交代码\n\tgit add .\n\tgit commit -m '版本描述'\n\tgit push origin dev \n```\n\n#### 开发完毕要上线\n\n```\n1.将dev 分支合并到master分支\n\tgit checkout master\n\tgit merge dev\n\tgit push origin master\n\n2.把dev推到远程仓库\n\tgit checkout dev\n\tgit merge master\n\tgit push origin dev\n```\n\n### 约女票吃大餐，公司代码忘提交，回家该咋办？\n\n#### 吃完大餐，在家继续工作\n\n```\n1.拉代码\n\tgit pull origin dev\n2.继续开发新功能\n\n3.长记性，一定提交代码\n\tgit add .\n\tgit commit -m '版本描述'\n\tgit push origin dev\n```\n\n#### 第二天起床去公司赶紧拉昨天的代码\n\n```\n1.拉代码，把昨天晚上在家写的代码拉到本地(昨天在公司写的代码和昨晚在家写的代码之间有合并，冲突)\n\tgit push origin dev\n2.有冲突解决冲突\n\n3.继续开发剩余功能\n\n4.把dev分支一定记得推到远端\n\tgit add .\n\tgit commit -m '版本描述'\n\tgit push origin dev\n\t\t>上面一句命令有两个功能：拉下来和合并，使用下面两句命令可以替换\n\t\tgit fetch origin dev\n\t\tgit merge origin/dev\n```\n\n### 借助软件快速解决冲突的方法？\n\n1. 安装beyond compare\n2. 在git配置\n\n   ```\n   git config --global merge.tool bc3\n   git config --global mergetool.path '/usr/local/bin/bcomp'\n   git config --global meregtool.keepBackup false\n   ```\n3. 使用beyond compare解决冲突\n\n   ```\n   git mergetool\n   ```\n\n### 使用Tag替代commit，完成版本管理\n\n```\ngit tag -a v1.0 -m '版本描述'            创建本地Tag信息\ngit tag -d v1.0  删除Tag\ngit push origin --tags \t将本地Tag推送到远端仓库\ngit pull origin --tags  更新本地Tag版本信息\n\ngit checkout v1.0  \t切换Tag\t\t\t\t\t\ngit clone -b v1.0 \t指定Tag下载代码\t\t\t\t\t\t\t\t\n```\n\n### 杂项\n\n* fork ,开源项目源代码拷贝到远程仓库\n* 给源代码的作者提交bug申请（pull request)\n* .gitignore文件，让git不再管理当前目录下的某些文件，参见[忽略文件](https://github.com/github/gitignore)\n* issues,文档以及任务管理\n* Wiki，项目文档\n\n### 感谢\n\n本文档主要参考{% btn 'https://www.bilibili.com/video/BV19E411f76x/',B站 老男孩视频,far fa-hand-point-right %}\n\n视频原笔记：[原文档参考i3um](https://pan.baidu.com/s/1-E8_Kcn8i8tYCRT6vepMzw \"密码i3um\")\n","source":"_posts/git 总结.md","raw":"---\ntitle: git学习\ndate: 2020-08-21\ntag:\n  - 基础\n  - git\ncategories:\n  - Tools\nkeywords: \"git,版本控制\"\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gsau9qmjxvj30pa0ak757.jpg\nsticky: 3\n---\n{% btn 'https://www.bilibili.com/video/BV19E411f76x/',直接看视频学习,far fa-hand-point-right %}\n\n### 什么是git?\n\n1. 分布式\n2. 版本控制\n3. 软件\n\n- 针对这三个名词的解释\n\n> + **软件**：git是一个软件，需要你安装在电脑本地才可以使用。\n> + **版本控制**：你的一篇论文，需要反复修改和保留历史版本，比如论文有修改版，完成版，终极完成版。做好版本控制，有利于回滚和修改\n> + **分布式**：版本不但在本地存在一份，远端也完全存在一份一样的。每一个安装了git的主机上都有一个版本备份，这个备份包括所有的历史版本和修改版本。\n\n- 安装git\n\n```\n参见：\n```\n\n[安装git](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)\n\n### 我接下来要干啥？\n\n1. 新建一个文件夹，或者进入你要做版本控制的目录\n2. 执行初始化命令\n\n   ``git init ``\n3. 查看目录下的文件状态\n\n   `git status`(新增和修改过的文件是红色的)\n4. 管理指定文件\n\n   `git add 文件名`\n\n   `git  add . `\n5. 个人信息的配置：用户名和邮箱\n\n   `git config --global user.name \"your name\"`\n\n   `git config --global user.email \"you@example.com\"`\n6. 生成版本\n\n   `git commit -m '版本描述信息'`\n7. 查看版本记录\n\n   `git log `\n\n   `git log --graph`以图形化的形式查看版本记录\n\n   `git log --graph --pretty=format:\"%h %s\"`简略版的版本记录，包括哈希值和版本描述\n\n### 我想回退指定版本？\n\n1. 回滚到之前版\n\n   ```\n   git log\n   git reset --hard 版本号   \n   ```\n2. 回滚到之后版本\n\n   ```\n   git reflog\n   git reset --hard 版本号\n   ```\n\n### 一个master分支不够怎么办？\n\n* 分支可以给我们提供另外一个环境，从master主线脱离出来，可以形成master专注于上线版本，新的dev 分支可以用于开发分支。\n\n> **基本的命令：**\n>\n> * 查看分支\n>\n>   ```\n>   git branch\n>   ```\n> * 创建新的分支\n>\n>   ```\n>   git branch 分支名称\n>   ```\n> * 切换分支\n>\n>   ```\n>   git checkout 分支名称\n>   ```\n> * 分支合并（可能产生冲突）\n>\n>   ```\n>   git merge 要合并的分支\n>   ```\n> * 删除分支\n>\n>   ```\n>   git branch -d 分支名称\n>   ```\n\n### 我想去公司继续搞代码？\n\n- 注册GitHub账号\n- 在GitHub新建一个仓库，记下仓库的地址\n\n#### 去公司之前你需要先把代码上传到自己的GitHub\n\n```\n1.给你的GitHub仓库起一个别名\n\tgit remote add origin 远程仓库地址\n2.向GitHub推送你的代码\n\tgit push -u origin 分支（后面可以简写成git push,这样默认的是master）\n```\n\n\n#### 到公司了，是一台新电脑，我该怎么办？\n\n```\n1.克隆远程仓库\n\tgit clone 远程仓库名称（内部已经实现了给远程仓库起别名）\n\n2.切换分支\n\t可以直接切换分支，本地新电脑已经有了所有分支\n\tgit checkout 分支名称\n```\n\n* 下面展现你在公司新电脑上的一套命令流程：\n\n  ```\n  1.切换到dev分支进行开发\n  \tgit checkout dev\n  2.把master分支合并到dev分支（只需要做一次，以保持dev分支的最新版本）\n  \tgit merge master\n  3.修改代码\n  4.提交代码到远程仓库\n  \tgit add .\n  \tgit commit -m '版本信息'\n  \tgit push origin dev (提交dev分支)\n  ```\n\n#### 下班回家继续开发\n\n* 下面展现你回到家继续写代码\n\n  ```\n  1.切换到dev分支进行开发\n  \tgit checkout dev\n  2.从远程仓库拉下代码\n  \tgit pull origin dev\n  3.继续开发\n\n  4.提交代码\n  \tgit add .\n  \tgit commit -m '版本描述'\n  \tgit push origin dev\n  ```\n\n#### 第二天又上班去\n\n下面展示你第二天上班需要做的事情\n\n```\n1.切换到dev 分支进行开发\n\tgit checkout dev\n2.拉最新代码，这是一个更新的步骤，不需要再去clone\n\tgit pull origin dev \n3.继续开发\n\n4.提交代码\n\tgit add .\n\tgit commit -m '版本描述'\n\tgit push origin dev \n```\n\n#### 开发完毕要上线\n\n```\n1.将dev 分支合并到master分支\n\tgit checkout master\n\tgit merge dev\n\tgit push origin master\n\n2.把dev推到远程仓库\n\tgit checkout dev\n\tgit merge master\n\tgit push origin dev\n```\n\n### 约女票吃大餐，公司代码忘提交，回家该咋办？\n\n#### 吃完大餐，在家继续工作\n\n```\n1.拉代码\n\tgit pull origin dev\n2.继续开发新功能\n\n3.长记性，一定提交代码\n\tgit add .\n\tgit commit -m '版本描述'\n\tgit push origin dev\n```\n\n#### 第二天起床去公司赶紧拉昨天的代码\n\n```\n1.拉代码，把昨天晚上在家写的代码拉到本地(昨天在公司写的代码和昨晚在家写的代码之间有合并，冲突)\n\tgit push origin dev\n2.有冲突解决冲突\n\n3.继续开发剩余功能\n\n4.把dev分支一定记得推到远端\n\tgit add .\n\tgit commit -m '版本描述'\n\tgit push origin dev\n\t\t>上面一句命令有两个功能：拉下来和合并，使用下面两句命令可以替换\n\t\tgit fetch origin dev\n\t\tgit merge origin/dev\n```\n\n### 借助软件快速解决冲突的方法？\n\n1. 安装beyond compare\n2. 在git配置\n\n   ```\n   git config --global merge.tool bc3\n   git config --global mergetool.path '/usr/local/bin/bcomp'\n   git config --global meregtool.keepBackup false\n   ```\n3. 使用beyond compare解决冲突\n\n   ```\n   git mergetool\n   ```\n\n### 使用Tag替代commit，完成版本管理\n\n```\ngit tag -a v1.0 -m '版本描述'            创建本地Tag信息\ngit tag -d v1.0  删除Tag\ngit push origin --tags \t将本地Tag推送到远端仓库\ngit pull origin --tags  更新本地Tag版本信息\n\ngit checkout v1.0  \t切换Tag\t\t\t\t\t\ngit clone -b v1.0 \t指定Tag下载代码\t\t\t\t\t\t\t\t\n```\n\n### 杂项\n\n* fork ,开源项目源代码拷贝到远程仓库\n* 给源代码的作者提交bug申请（pull request)\n* .gitignore文件，让git不再管理当前目录下的某些文件，参见[忽略文件](https://github.com/github/gitignore)\n* issues,文档以及任务管理\n* Wiki，项目文档\n\n### 感谢\n\n本文档主要参考{% btn 'https://www.bilibili.com/video/BV19E411f76x/',B站 老男孩视频,far fa-hand-point-right %}\n\n视频原笔记：[原文档参考i3um](https://pan.baidu.com/s/1-E8_Kcn8i8tYCRT6vepMzw \"密码i3um\")\n","slug":"git 总结","published":1,"updated":"2021-07-12T18:47:58.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xev000fk0577gly75hi","content":"<a class=\"btn-beautify button--animated \" href=\"https://www.bilibili.com/video/BV19E411f76x/\" \n  title=\"直接看视频学习\"><i class=\"far fa-hand-point-right\"></i><span>直接看视频学习</span></a>\n\n<h3 id=\"什么是git\"><a href=\"#什么是git\" class=\"headerlink\" title=\"什么是git?\"></a>什么是git?</h3><ol>\n<li>分布式</li>\n<li>版本控制</li>\n<li>软件</li>\n</ol>\n<ul>\n<li>针对这三个名词的解释</li>\n</ul>\n<blockquote>\n<ul>\n<li><strong>软件</strong>：git是一个软件，需要你安装在电脑本地才可以使用。</li>\n<li><strong>版本控制</strong>：你的一篇论文，需要反复修改和保留历史版本，比如论文有修改版，完成版，终极完成版。做好版本控制，有利于回滚和修改</li>\n<li><strong>分布式</strong>：版本不但在本地存在一份，远端也完全存在一份一样的。每一个安装了git的主机上都有一个版本备份，这个备份包括所有的历史版本和修改版本。</li>\n</ul>\n</blockquote>\n<ul>\n<li>安装git</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参见：</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\">安装git</a></p>\n<h3 id=\"我接下来要干啥？\"><a href=\"#我接下来要干啥？\" class=\"headerlink\" title=\"我接下来要干啥？\"></a>我接下来要干啥？</h3><ol>\n<li><p>新建一个文件夹，或者进入你要做版本控制的目录</p>\n</li>\n<li><p>执行初始化命令</p>\n<p><code>git init </code></p>\n</li>\n<li><p>查看目录下的文件状态</p>\n<p><code>git status</code>(新增和修改过的文件是红色的)</p>\n</li>\n<li><p>管理指定文件</p>\n<p><code>git add 文件名</code></p>\n<p><code>git  add . </code></p>\n</li>\n<li><p>个人信息的配置：用户名和邮箱</p>\n<p><code>git config --global user.name &quot;your name&quot;</code></p>\n<p><code>git config --global user.email &quot;you@example.com&quot;</code></p>\n</li>\n<li><p>生成版本</p>\n<p><code>git commit -m &#39;版本描述信息&#39;</code></p>\n</li>\n<li><p>查看版本记录</p>\n<p><code>git log </code></p>\n<p><code>git log --graph</code>以图形化的形式查看版本记录</p>\n<p><code>git log --graph --pretty=format:&quot;%h %s&quot;</code>简略版的版本记录，包括哈希值和版本描述</p>\n</li>\n</ol>\n<h3 id=\"我想回退指定版本？\"><a href=\"#我想回退指定版本？\" class=\"headerlink\" title=\"我想回退指定版本？\"></a>我想回退指定版本？</h3><ol>\n<li><p>回滚到之前版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">git reset --hard 版本号   </span><br></pre></td></tr></table></figure></li>\n<li><p>回滚到之后版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\">git reset --hard 版本号</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"一个master分支不够怎么办？\"><a href=\"#一个master分支不够怎么办？\" class=\"headerlink\" title=\"一个master分支不够怎么办？\"></a>一个master分支不够怎么办？</h3><ul>\n<li>分支可以给我们提供另外一个环境，从master主线脱离出来，可以形成master专注于上线版本，新的dev 分支可以用于开发分支。</li>\n</ul>\n<blockquote>\n<p><strong>基本的命令：</strong></p>\n<ul>\n<li><p>查看分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></li>\n<li><p>创建新的分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 分支名称</span><br></pre></td></tr></table></figure></li>\n<li><p>切换分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名称</span><br></pre></td></tr></table></figure></li>\n<li><p>分支合并（可能产生冲突）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge 要合并的分支</span><br></pre></td></tr></table></figure></li>\n<li><p>删除分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名称</span><br></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<h3 id=\"我想去公司继续搞代码？\"><a href=\"#我想去公司继续搞代码？\" class=\"headerlink\" title=\"我想去公司继续搞代码？\"></a>我想去公司继续搞代码？</h3><ul>\n<li>注册GitHub账号</li>\n<li>在GitHub新建一个仓库，记下仓库的地址</li>\n</ul>\n<h4 id=\"去公司之前你需要先把代码上传到自己的GitHub\"><a href=\"#去公司之前你需要先把代码上传到自己的GitHub\" class=\"headerlink\" title=\"去公司之前你需要先把代码上传到自己的GitHub\"></a>去公司之前你需要先把代码上传到自己的GitHub</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.给你的GitHub仓库起一个别名</span><br><span class=\"line\">\tgit remote add origin 远程仓库地址</span><br><span class=\"line\">2.向GitHub推送你的代码</span><br><span class=\"line\">\tgit push -u origin 分支（后面可以简写成git push,这样默认的是master）</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"到公司了，是一台新电脑，我该怎么办？\"><a href=\"#到公司了，是一台新电脑，我该怎么办？\" class=\"headerlink\" title=\"到公司了，是一台新电脑，我该怎么办？\"></a>到公司了，是一台新电脑，我该怎么办？</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.克隆远程仓库</span><br><span class=\"line\">\tgit clone 远程仓库名称（内部已经实现了给远程仓库起别名）</span><br><span class=\"line\"></span><br><span class=\"line\">2.切换分支</span><br><span class=\"line\">\t可以直接切换分支，本地新电脑已经有了所有分支</span><br><span class=\"line\">\tgit checkout 分支名称</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>下面展现你在公司新电脑上的一套命令流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.切换到dev分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2.把master分支合并到dev分支（只需要做一次，以保持dev分支的最新版本）</span><br><span class=\"line\">\tgit merge master</span><br><span class=\"line\">3.修改代码</span><br><span class=\"line\">4.提交代码到远程仓库</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m &#x27;版本信息&#x27;</span><br><span class=\"line\">\tgit push origin dev (提交dev分支)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"下班回家继续开发\"><a href=\"#下班回家继续开发\" class=\"headerlink\" title=\"下班回家继续开发\"></a>下班回家继续开发</h4><ul>\n<li><p>下面展现你回到家继续写代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.切换到dev分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2.从远程仓库拉下代码</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\">3.继续开发</span><br><span class=\"line\"></span><br><span class=\"line\">4.提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m &#x27;版本描述&#x27;</span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"第二天又上班去\"><a href=\"#第二天又上班去\" class=\"headerlink\" title=\"第二天又上班去\"></a>第二天又上班去</h4><p>下面展示你第二天上班需要做的事情</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.切换到dev 分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2.拉最新代码，这是一个更新的步骤，不需要再去clone</span><br><span class=\"line\">\tgit pull origin dev </span><br><span class=\"line\">3.继续开发</span><br><span class=\"line\"></span><br><span class=\"line\">4.提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m &#x27;版本描述&#x27;</span><br><span class=\"line\">\tgit push origin dev </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开发完毕要上线\"><a href=\"#开发完毕要上线\" class=\"headerlink\" title=\"开发完毕要上线\"></a>开发完毕要上线</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.将dev 分支合并到master分支</span><br><span class=\"line\">\tgit checkout master</span><br><span class=\"line\">\tgit merge dev</span><br><span class=\"line\">\tgit push origin master</span><br><span class=\"line\"></span><br><span class=\"line\">2.把dev推到远程仓库</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">\tgit merge master</span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"约女票吃大餐，公司代码忘提交，回家该咋办？\"><a href=\"#约女票吃大餐，公司代码忘提交，回家该咋办？\" class=\"headerlink\" title=\"约女票吃大餐，公司代码忘提交，回家该咋办？\"></a>约女票吃大餐，公司代码忘提交，回家该咋办？</h3><h4 id=\"吃完大餐，在家继续工作\"><a href=\"#吃完大餐，在家继续工作\" class=\"headerlink\" title=\"吃完大餐，在家继续工作\"></a>吃完大餐，在家继续工作</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.拉代码</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\">2.继续开发新功能</span><br><span class=\"line\"></span><br><span class=\"line\">3.长记性，一定提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m &#x27;版本描述&#x27;</span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二天起床去公司赶紧拉昨天的代码\"><a href=\"#第二天起床去公司赶紧拉昨天的代码\" class=\"headerlink\" title=\"第二天起床去公司赶紧拉昨天的代码\"></a>第二天起床去公司赶紧拉昨天的代码</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.拉代码，把昨天晚上在家写的代码拉到本地(昨天在公司写的代码和昨晚在家写的代码之间有合并，冲突)</span><br><span class=\"line\">\tgit push origin dev</span><br><span class=\"line\">2.有冲突解决冲突</span><br><span class=\"line\"></span><br><span class=\"line\">3.继续开发剩余功能</span><br><span class=\"line\"></span><br><span class=\"line\">4.把dev分支一定记得推到远端</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m &#x27;版本描述&#x27;</span><br><span class=\"line\">\tgit push origin dev</span><br><span class=\"line\">\t\t&gt;上面一句命令有两个功能：拉下来和合并，使用下面两句命令可以替换</span><br><span class=\"line\">\t\tgit fetch origin dev</span><br><span class=\"line\">\t\tgit merge origin/dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"借助软件快速解决冲突的方法？\"><a href=\"#借助软件快速解决冲突的方法？\" class=\"headerlink\" title=\"借助软件快速解决冲突的方法？\"></a>借助软件快速解决冲突的方法？</h3><ol>\n<li><p>安装beyond compare</p>\n</li>\n<li><p>在git配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global merge.tool bc3</span><br><span class=\"line\">git config --global mergetool.path &#x27;/usr/local/bin/bcomp&#x27;</span><br><span class=\"line\">git config --global meregtool.keepBackup false</span><br></pre></td></tr></table></figure></li>\n<li><p>使用beyond compare解决冲突</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mergetool</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用Tag替代commit，完成版本管理\"><a href=\"#使用Tag替代commit，完成版本管理\" class=\"headerlink\" title=\"使用Tag替代commit，完成版本管理\"></a>使用Tag替代commit，完成版本管理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0 -m &#x27;版本描述&#x27;            创建本地Tag信息</span><br><span class=\"line\">git tag -d v1.0  删除Tag</span><br><span class=\"line\">git push origin --tags \t将本地Tag推送到远端仓库</span><br><span class=\"line\">git pull origin --tags  更新本地Tag版本信息</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout v1.0  \t切换Tag\t\t\t\t\t</span><br><span class=\"line\">git clone -b v1.0 \t指定Tag下载代码\t\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><ul>\n<li>fork ,开源项目源代码拷贝到远程仓库</li>\n<li>给源代码的作者提交bug申请（pull request)</li>\n<li>.gitignore文件，让git不再管理当前目录下的某些文件，参见<a href=\"https://github.com/github/gitignore\">忽略文件</a></li>\n<li>issues,文档以及任务管理</li>\n<li>Wiki，项目文档</li>\n</ul>\n<h3 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h3><p>本文档主要参考<a class=\"btn-beautify button--animated \" href=\"https://www.bilibili.com/video/BV19E411f76x/\" \n  title=\"B站 老男孩视频\"><i class=\"far fa-hand-point-right\"></i><span>B站 老男孩视频</span></a></p>\n<p>视频原笔记：<a href=\"https://pan.baidu.com/s/1-E8_Kcn8i8tYCRT6vepMzw\" title=\"密码i3um\">原文档参考i3um</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<a class=\"btn-beautify button--animated \" href=\"https://www.bilibili.com/video/BV19E411f76x/\" \n  title=\"直接看视频学习\"><i class=\"far fa-hand-point-right\"></i><span>直接看视频学习</span></a>\n\n<h3 id=\"什么是git\"><a href=\"#什么是git\" class=\"headerlink\" title=\"什么是git?\"></a>什么是git?</h3><ol>\n<li>分布式</li>\n<li>版本控制</li>\n<li>软件</li>\n</ol>\n<ul>\n<li>针对这三个名词的解释</li>\n</ul>\n<blockquote>\n<ul>\n<li><strong>软件</strong>：git是一个软件，需要你安装在电脑本地才可以使用。</li>\n<li><strong>版本控制</strong>：你的一篇论文，需要反复修改和保留历史版本，比如论文有修改版，完成版，终极完成版。做好版本控制，有利于回滚和修改</li>\n<li><strong>分布式</strong>：版本不但在本地存在一份，远端也完全存在一份一样的。每一个安装了git的主机上都有一个版本备份，这个备份包括所有的历史版本和修改版本。</li>\n</ul>\n</blockquote>\n<ul>\n<li>安装git</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参见：</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\">安装git</a></p>\n<h3 id=\"我接下来要干啥？\"><a href=\"#我接下来要干啥？\" class=\"headerlink\" title=\"我接下来要干啥？\"></a>我接下来要干啥？</h3><ol>\n<li><p>新建一个文件夹，或者进入你要做版本控制的目录</p>\n</li>\n<li><p>执行初始化命令</p>\n<p><code>git init </code></p>\n</li>\n<li><p>查看目录下的文件状态</p>\n<p><code>git status</code>(新增和修改过的文件是红色的)</p>\n</li>\n<li><p>管理指定文件</p>\n<p><code>git add 文件名</code></p>\n<p><code>git  add . </code></p>\n</li>\n<li><p>个人信息的配置：用户名和邮箱</p>\n<p><code>git config --global user.name &quot;your name&quot;</code></p>\n<p><code>git config --global user.email &quot;you@example.com&quot;</code></p>\n</li>\n<li><p>生成版本</p>\n<p><code>git commit -m &#39;版本描述信息&#39;</code></p>\n</li>\n<li><p>查看版本记录</p>\n<p><code>git log </code></p>\n<p><code>git log --graph</code>以图形化的形式查看版本记录</p>\n<p><code>git log --graph --pretty=format:&quot;%h %s&quot;</code>简略版的版本记录，包括哈希值和版本描述</p>\n</li>\n</ol>\n<h3 id=\"我想回退指定版本？\"><a href=\"#我想回退指定版本？\" class=\"headerlink\" title=\"我想回退指定版本？\"></a>我想回退指定版本？</h3><ol>\n<li><p>回滚到之前版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">git reset --hard 版本号   </span><br></pre></td></tr></table></figure></li>\n<li><p>回滚到之后版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\">git reset --hard 版本号</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"一个master分支不够怎么办？\"><a href=\"#一个master分支不够怎么办？\" class=\"headerlink\" title=\"一个master分支不够怎么办？\"></a>一个master分支不够怎么办？</h3><ul>\n<li>分支可以给我们提供另外一个环境，从master主线脱离出来，可以形成master专注于上线版本，新的dev 分支可以用于开发分支。</li>\n</ul>\n<blockquote>\n<p><strong>基本的命令：</strong></p>\n<ul>\n<li><p>查看分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></li>\n<li><p>创建新的分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 分支名称</span><br></pre></td></tr></table></figure></li>\n<li><p>切换分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名称</span><br></pre></td></tr></table></figure></li>\n<li><p>分支合并（可能产生冲突）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge 要合并的分支</span><br></pre></td></tr></table></figure></li>\n<li><p>删除分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名称</span><br></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<h3 id=\"我想去公司继续搞代码？\"><a href=\"#我想去公司继续搞代码？\" class=\"headerlink\" title=\"我想去公司继续搞代码？\"></a>我想去公司继续搞代码？</h3><ul>\n<li>注册GitHub账号</li>\n<li>在GitHub新建一个仓库，记下仓库的地址</li>\n</ul>\n<h4 id=\"去公司之前你需要先把代码上传到自己的GitHub\"><a href=\"#去公司之前你需要先把代码上传到自己的GitHub\" class=\"headerlink\" title=\"去公司之前你需要先把代码上传到自己的GitHub\"></a>去公司之前你需要先把代码上传到自己的GitHub</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.给你的GitHub仓库起一个别名</span><br><span class=\"line\">\tgit remote add origin 远程仓库地址</span><br><span class=\"line\">2.向GitHub推送你的代码</span><br><span class=\"line\">\tgit push -u origin 分支（后面可以简写成git push,这样默认的是master）</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"到公司了，是一台新电脑，我该怎么办？\"><a href=\"#到公司了，是一台新电脑，我该怎么办？\" class=\"headerlink\" title=\"到公司了，是一台新电脑，我该怎么办？\"></a>到公司了，是一台新电脑，我该怎么办？</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.克隆远程仓库</span><br><span class=\"line\">\tgit clone 远程仓库名称（内部已经实现了给远程仓库起别名）</span><br><span class=\"line\"></span><br><span class=\"line\">2.切换分支</span><br><span class=\"line\">\t可以直接切换分支，本地新电脑已经有了所有分支</span><br><span class=\"line\">\tgit checkout 分支名称</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>下面展现你在公司新电脑上的一套命令流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.切换到dev分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2.把master分支合并到dev分支（只需要做一次，以保持dev分支的最新版本）</span><br><span class=\"line\">\tgit merge master</span><br><span class=\"line\">3.修改代码</span><br><span class=\"line\">4.提交代码到远程仓库</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m &#x27;版本信息&#x27;</span><br><span class=\"line\">\tgit push origin dev (提交dev分支)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"下班回家继续开发\"><a href=\"#下班回家继续开发\" class=\"headerlink\" title=\"下班回家继续开发\"></a>下班回家继续开发</h4><ul>\n<li><p>下面展现你回到家继续写代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.切换到dev分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2.从远程仓库拉下代码</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\">3.继续开发</span><br><span class=\"line\"></span><br><span class=\"line\">4.提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m &#x27;版本描述&#x27;</span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"第二天又上班去\"><a href=\"#第二天又上班去\" class=\"headerlink\" title=\"第二天又上班去\"></a>第二天又上班去</h4><p>下面展示你第二天上班需要做的事情</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.切换到dev 分支进行开发</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">2.拉最新代码，这是一个更新的步骤，不需要再去clone</span><br><span class=\"line\">\tgit pull origin dev </span><br><span class=\"line\">3.继续开发</span><br><span class=\"line\"></span><br><span class=\"line\">4.提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m &#x27;版本描述&#x27;</span><br><span class=\"line\">\tgit push origin dev </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开发完毕要上线\"><a href=\"#开发完毕要上线\" class=\"headerlink\" title=\"开发完毕要上线\"></a>开发完毕要上线</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.将dev 分支合并到master分支</span><br><span class=\"line\">\tgit checkout master</span><br><span class=\"line\">\tgit merge dev</span><br><span class=\"line\">\tgit push origin master</span><br><span class=\"line\"></span><br><span class=\"line\">2.把dev推到远程仓库</span><br><span class=\"line\">\tgit checkout dev</span><br><span class=\"line\">\tgit merge master</span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"约女票吃大餐，公司代码忘提交，回家该咋办？\"><a href=\"#约女票吃大餐，公司代码忘提交，回家该咋办？\" class=\"headerlink\" title=\"约女票吃大餐，公司代码忘提交，回家该咋办？\"></a>约女票吃大餐，公司代码忘提交，回家该咋办？</h3><h4 id=\"吃完大餐，在家继续工作\"><a href=\"#吃完大餐，在家继续工作\" class=\"headerlink\" title=\"吃完大餐，在家继续工作\"></a>吃完大餐，在家继续工作</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.拉代码</span><br><span class=\"line\">\tgit pull origin dev</span><br><span class=\"line\">2.继续开发新功能</span><br><span class=\"line\"></span><br><span class=\"line\">3.长记性，一定提交代码</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m &#x27;版本描述&#x27;</span><br><span class=\"line\">\tgit push origin dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二天起床去公司赶紧拉昨天的代码\"><a href=\"#第二天起床去公司赶紧拉昨天的代码\" class=\"headerlink\" title=\"第二天起床去公司赶紧拉昨天的代码\"></a>第二天起床去公司赶紧拉昨天的代码</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.拉代码，把昨天晚上在家写的代码拉到本地(昨天在公司写的代码和昨晚在家写的代码之间有合并，冲突)</span><br><span class=\"line\">\tgit push origin dev</span><br><span class=\"line\">2.有冲突解决冲突</span><br><span class=\"line\"></span><br><span class=\"line\">3.继续开发剩余功能</span><br><span class=\"line\"></span><br><span class=\"line\">4.把dev分支一定记得推到远端</span><br><span class=\"line\">\tgit add .</span><br><span class=\"line\">\tgit commit -m &#x27;版本描述&#x27;</span><br><span class=\"line\">\tgit push origin dev</span><br><span class=\"line\">\t\t&gt;上面一句命令有两个功能：拉下来和合并，使用下面两句命令可以替换</span><br><span class=\"line\">\t\tgit fetch origin dev</span><br><span class=\"line\">\t\tgit merge origin/dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"借助软件快速解决冲突的方法？\"><a href=\"#借助软件快速解决冲突的方法？\" class=\"headerlink\" title=\"借助软件快速解决冲突的方法？\"></a>借助软件快速解决冲突的方法？</h3><ol>\n<li><p>安装beyond compare</p>\n</li>\n<li><p>在git配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global merge.tool bc3</span><br><span class=\"line\">git config --global mergetool.path &#x27;/usr/local/bin/bcomp&#x27;</span><br><span class=\"line\">git config --global meregtool.keepBackup false</span><br></pre></td></tr></table></figure></li>\n<li><p>使用beyond compare解决冲突</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mergetool</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用Tag替代commit，完成版本管理\"><a href=\"#使用Tag替代commit，完成版本管理\" class=\"headerlink\" title=\"使用Tag替代commit，完成版本管理\"></a>使用Tag替代commit，完成版本管理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0 -m &#x27;版本描述&#x27;            创建本地Tag信息</span><br><span class=\"line\">git tag -d v1.0  删除Tag</span><br><span class=\"line\">git push origin --tags \t将本地Tag推送到远端仓库</span><br><span class=\"line\">git pull origin --tags  更新本地Tag版本信息</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout v1.0  \t切换Tag\t\t\t\t\t</span><br><span class=\"line\">git clone -b v1.0 \t指定Tag下载代码\t\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><ul>\n<li>fork ,开源项目源代码拷贝到远程仓库</li>\n<li>给源代码的作者提交bug申请（pull request)</li>\n<li>.gitignore文件，让git不再管理当前目录下的某些文件，参见<a href=\"https://github.com/github/gitignore\">忽略文件</a></li>\n<li>issues,文档以及任务管理</li>\n<li>Wiki，项目文档</li>\n</ul>\n<h3 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h3><p>本文档主要参考<a class=\"btn-beautify button--animated \" href=\"https://www.bilibili.com/video/BV19E411f76x/\" \n  title=\"B站 老男孩视频\"><i class=\"far fa-hand-point-right\"></i><span>B站 老男孩视频</span></a></p>\n<p>视频原笔记：<a href=\"https://pan.baidu.com/s/1-E8_Kcn8i8tYCRT6vepMzw\" title=\"密码i3um\">原文档参考i3um</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-07-08T03:55:07.593Z","updated":"2021-07-08T03:55:07.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xex000jk057hxhw21rp","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"cover":"https://tva1.sinaimg.cn/large/008i3skNly1gs9l9ly6j6j31900u0u0z.jpg","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"nginx简单使用","date":"2021-03-31T16:00:00.000Z","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gsn6el6z53j30cs031jrc.jpg","_content":"\n### nginx \n\n- http服务器\n\n  - 能够处理http协议\n\n- 反向代理服务器\n\n- 邮件服务器\n\n  - IMAP/POP3/SMTP\n\n  ### nginx 优势\n\n  - 更快-数以万计的并发时，nginx可以比其他web服务器更快的响应\n  - 高扩展-低耦合的设计\n  - 高可靠-大量的网站都在使用\n  - 低内存的消耗-对内存的消耗很小\n  - 热部署-提供不间断的服务器升级\n\n### nginx 的相关资源\n\n- {% btn 'http://nginx.org',nginx维护包,far fa-hand-point-right,outline %}\n- {% btn 'http://tengine.taobao.org/documentation_cn.html',nginx中文文档,far fa-hand-point-right,outline %}\n\n### nginx 相关配置\n\n#### ubuntu 的软件依赖项\n\n> {% label gcc,g++编译器 green%}\n>\n> `sudo apt-get install gcc`\n>\n> `sudo apt-get install g++`\n>\n> `sudo apt-get install build-essential`\n>\n> `sudo apt-get install libtool`          \n>\n> {% label pcre库 green %}\n>\n> {% btn 'ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/',pcre包下载,far fa-hand-point-right,outline %}\n>\n> - `./configure`\n> - `make`\n> - `sudo make install`\n>\n> {% label zlib green %}\n>\n> {% btn 'http://zlib.net/',zlib,far fa-hand-point-right,outline %}\n>\n> - `./configure`\n> - `make`\n> - `sudo make install`\n>\n> {% label openssl green %}\n>\n> {% btn 'https://www.openssl.org/source/',openssl,far fa-hand-point-right,outline %}\n>\n> - `./configure`\n> - `make`\n> - `sudo make install`\n\n\n\n### nginx相关操作\n\n- 进入到安装目录\n  - `/usr/local/nginx/sbin/`       \n- 启动\n  - `sudo ./nginx`         \n  - `sudo ./nginx -c nginx配置文件`\n- 停止\n  - `sudo ./nginx -s stop`  --暴力\n  - `sudo ./nginx -s quit` --柔和\n- 重新加载\n  - `sudo ./nginx -s reload`    \n- 测试配置信息\n  - `sudo ./nginx -t`\n\n### nginx 的相关配置\n\n- nginx 的配置文件由主配置文件和辅助配置文件构成\n\n![nginx 配置文件](https://tva1.sinaimg.cn/large/008i3skNly1gsn5k0xyvlj31u605mwhg.jpg)\n\n- nginx 的配置文件结构\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5mnaftoj31720u0dhg.jpg\" alt=\"image-20210720092437398\" style=\"zoom: 25%;\" />\n\n\n\n> `main`:\tnginx运行时的参数，与业务没有关系，如工作进程数\n>\n> `http`: 提供与http服务相关的参数\n>\n> `server`: http 服务支持多个server，每一个server都可以有自己的配置项\n>\n> `locatio`: \t http服务中，对URL对应的配置，包括资源访问路径，文件，命令\n\n### nginx 配置静态页面\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn62hs5pxj60qe0b00t502.jpg\" alt=\"image-20210720093954168\" style=\"zoom: 50%;\" />\n\n\n\n- `root\t`: 放置静态网页的根目录\n- `index`: 要访问的网页资源\n\n### nginx 的反向代理配置\n\n- 反向代理：指代理服务器来接受internet的请求，然后将请求转发给内部的服务器，服务器的结果也是通过代理给客户端。\t代理服务器来均衡的分配和协调服务器资源的使用。\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5s56w73j31rs0u0tbz.jpg\" alt=\"image-20210720092956542\" style=\"zoom:33%;\" />\n\n\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5wazi96j30zq0u0n20.jpg\" alt=\"image-20210720093356778\" style=\"zoom:25%;\" />\n\n\n\n\n\n","source":"_posts/nginx.md","raw":"---\ntitle: nginx简单使用\ndate: 2021-04-01\ntags: \n  - nginx\ncategories:\n  - Tools\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gsn6el6z53j30cs031jrc.jpg\n---\n\n### nginx \n\n- http服务器\n\n  - 能够处理http协议\n\n- 反向代理服务器\n\n- 邮件服务器\n\n  - IMAP/POP3/SMTP\n\n  ### nginx 优势\n\n  - 更快-数以万计的并发时，nginx可以比其他web服务器更快的响应\n  - 高扩展-低耦合的设计\n  - 高可靠-大量的网站都在使用\n  - 低内存的消耗-对内存的消耗很小\n  - 热部署-提供不间断的服务器升级\n\n### nginx 的相关资源\n\n- {% btn 'http://nginx.org',nginx维护包,far fa-hand-point-right,outline %}\n- {% btn 'http://tengine.taobao.org/documentation_cn.html',nginx中文文档,far fa-hand-point-right,outline %}\n\n### nginx 相关配置\n\n#### ubuntu 的软件依赖项\n\n> {% label gcc,g++编译器 green%}\n>\n> `sudo apt-get install gcc`\n>\n> `sudo apt-get install g++`\n>\n> `sudo apt-get install build-essential`\n>\n> `sudo apt-get install libtool`          \n>\n> {% label pcre库 green %}\n>\n> {% btn 'ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/',pcre包下载,far fa-hand-point-right,outline %}\n>\n> - `./configure`\n> - `make`\n> - `sudo make install`\n>\n> {% label zlib green %}\n>\n> {% btn 'http://zlib.net/',zlib,far fa-hand-point-right,outline %}\n>\n> - `./configure`\n> - `make`\n> - `sudo make install`\n>\n> {% label openssl green %}\n>\n> {% btn 'https://www.openssl.org/source/',openssl,far fa-hand-point-right,outline %}\n>\n> - `./configure`\n> - `make`\n> - `sudo make install`\n\n\n\n### nginx相关操作\n\n- 进入到安装目录\n  - `/usr/local/nginx/sbin/`       \n- 启动\n  - `sudo ./nginx`         \n  - `sudo ./nginx -c nginx配置文件`\n- 停止\n  - `sudo ./nginx -s stop`  --暴力\n  - `sudo ./nginx -s quit` --柔和\n- 重新加载\n  - `sudo ./nginx -s reload`    \n- 测试配置信息\n  - `sudo ./nginx -t`\n\n### nginx 的相关配置\n\n- nginx 的配置文件由主配置文件和辅助配置文件构成\n\n![nginx 配置文件](https://tva1.sinaimg.cn/large/008i3skNly1gsn5k0xyvlj31u605mwhg.jpg)\n\n- nginx 的配置文件结构\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5mnaftoj31720u0dhg.jpg\" alt=\"image-20210720092437398\" style=\"zoom: 25%;\" />\n\n\n\n> `main`:\tnginx运行时的参数，与业务没有关系，如工作进程数\n>\n> `http`: 提供与http服务相关的参数\n>\n> `server`: http 服务支持多个server，每一个server都可以有自己的配置项\n>\n> `locatio`: \t http服务中，对URL对应的配置，包括资源访问路径，文件，命令\n\n### nginx 配置静态页面\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn62hs5pxj60qe0b00t502.jpg\" alt=\"image-20210720093954168\" style=\"zoom: 50%;\" />\n\n\n\n- `root\t`: 放置静态网页的根目录\n- `index`: 要访问的网页资源\n\n### nginx 的反向代理配置\n\n- 反向代理：指代理服务器来接受internet的请求，然后将请求转发给内部的服务器，服务器的结果也是通过代理给客户端。\t代理服务器来均衡的分配和协调服务器资源的使用。\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5s56w73j31rs0u0tbz.jpg\" alt=\"image-20210720092956542\" style=\"zoom:33%;\" />\n\n\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5wazi96j30zq0u0n20.jpg\" alt=\"image-20210720093356778\" style=\"zoom:25%;\" />\n\n\n\n\n\n","slug":"nginx","published":1,"updated":"2021-07-20T01:51:52.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xez000kk057be2id2fe","content":"<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><ul>\n<li><p>http服务器</p>\n<ul>\n<li>能够处理http协议</li>\n</ul>\n</li>\n<li><p>反向代理服务器</p>\n</li>\n<li><p>邮件服务器</p>\n<ul>\n<li>IMAP/POP3/SMTP</li>\n</ul>\n<h3 id=\"nginx-优势\"><a href=\"#nginx-优势\" class=\"headerlink\" title=\"nginx 优势\"></a>nginx 优势</h3><ul>\n<li>更快-数以万计的并发时，nginx可以比其他web服务器更快的响应</li>\n<li>高扩展-低耦合的设计</li>\n<li>高可靠-大量的网站都在使用</li>\n<li>低内存的消耗-对内存的消耗很小</li>\n<li>热部署-提供不间断的服务器升级</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nginx-的相关资源\"><a href=\"#nginx-的相关资源\" class=\"headerlink\" title=\"nginx 的相关资源\"></a>nginx 的相关资源</h3><ul>\n<li><a class=\"btn-beautify button--animated outline\" href=\"http://nginx.org\" \n  title=\"nginx维护包\"><i class=\"far fa-hand-point-right\"></i><span>nginx维护包</span></a></li>\n<li><a class=\"btn-beautify button--animated outline\" href=\"http://tengine.taobao.org/documentation_cn.html\" \n  title=\"nginx中文文档\"><i class=\"far fa-hand-point-right\"></i><span>nginx中文文档</span></a></li>\n</ul>\n<h3 id=\"nginx-相关配置\"><a href=\"#nginx-相关配置\" class=\"headerlink\" title=\"nginx 相关配置\"></a>nginx 相关配置</h3><h4 id=\"ubuntu-的软件依赖项\"><a href=\"#ubuntu-的软件依赖项\" class=\"headerlink\" title=\"ubuntu 的软件依赖项\"></a>ubuntu 的软件依赖项</h4><blockquote>\n<mark class=\"hl-label green\">gcc,g++编译器</mark> \n\n<p><code>sudo apt-get install gcc</code></p>\n<p><code>sudo apt-get install g++</code></p>\n<p><code>sudo apt-get install build-essential</code></p>\n<p><code>sudo apt-get install libtool</code>          </p>\n<mark class=\"hl-label green\">pcre库</mark> \n\n<a class=\"btn-beautify button--animated outline\" href=\"ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/\" \n  title=\"pcre包下载\"><i class=\"far fa-hand-point-right\"></i><span>pcre包下载</span></a>\n\n<ul>\n<li><code>./configure</code></li>\n<li><code>make</code></li>\n<li><code>sudo make install</code></li>\n</ul>\n<mark class=\"hl-label green\">zlib</mark> \n\n<a class=\"btn-beautify button--animated outline\" href=\"http://zlib.net/\" \n  title=\"zlib\"><i class=\"far fa-hand-point-right\"></i><span>zlib</span></a>\n\n<ul>\n<li><code>./configure</code></li>\n<li><code>make</code></li>\n<li><code>sudo make install</code></li>\n</ul>\n<mark class=\"hl-label green\">openssl</mark> \n\n<a class=\"btn-beautify button--animated outline\" href=\"https://www.openssl.org/source/\" \n  title=\"openssl\"><i class=\"far fa-hand-point-right\"></i><span>openssl</span></a>\n\n<ul>\n<li><code>./configure</code></li>\n<li><code>make</code></li>\n<li><code>sudo make install</code></li>\n</ul>\n</blockquote>\n<h3 id=\"nginx相关操作\"><a href=\"#nginx相关操作\" class=\"headerlink\" title=\"nginx相关操作\"></a>nginx相关操作</h3><ul>\n<li>进入到安装目录<ul>\n<li><code>/usr/local/nginx/sbin/</code>       </li>\n</ul>\n</li>\n<li>启动<ul>\n<li><code>sudo ./nginx</code>         </li>\n<li><code>sudo ./nginx -c nginx配置文件</code></li>\n</ul>\n</li>\n<li>停止<ul>\n<li><code>sudo ./nginx -s stop</code>  –暴力</li>\n<li><code>sudo ./nginx -s quit</code> –柔和</li>\n</ul>\n</li>\n<li>重新加载<ul>\n<li><code>sudo ./nginx -s reload</code>    </li>\n</ul>\n</li>\n<li>测试配置信息<ul>\n<li><code>sudo ./nginx -t</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nginx-的相关配置\"><a href=\"#nginx-的相关配置\" class=\"headerlink\" title=\"nginx 的相关配置\"></a>nginx 的相关配置</h3><ul>\n<li>nginx 的配置文件由主配置文件和辅助配置文件构成</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5k0xyvlj31u605mwhg.jpg\" alt=\"nginx 配置文件\"></p>\n<ul>\n<li>nginx 的配置文件结构</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5mnaftoj31720u0dhg.jpg\" alt=\"image-20210720092437398\" style=\"zoom: 25%;\" />\n\n\n\n<blockquote>\n<p><code>main</code>:    nginx运行时的参数，与业务没有关系，如工作进程数</p>\n<p><code>http</code>: 提供与http服务相关的参数</p>\n<p><code>server</code>: http 服务支持多个server，每一个server都可以有自己的配置项</p>\n<p><code>locatio</code>:      http服务中，对URL对应的配置，包括资源访问路径，文件，命令</p>\n</blockquote>\n<h3 id=\"nginx-配置静态页面\"><a href=\"#nginx-配置静态页面\" class=\"headerlink\" title=\"nginx 配置静态页面\"></a>nginx 配置静态页面</h3><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn62hs5pxj60qe0b00t502.jpg\" alt=\"image-20210720093954168\" style=\"zoom: 50%;\" />\n\n\n\n<ul>\n<li><code>root    </code>: 放置静态网页的根目录</li>\n<li><code>index</code>: 要访问的网页资源</li>\n</ul>\n<h3 id=\"nginx-的反向代理配置\"><a href=\"#nginx-的反向代理配置\" class=\"headerlink\" title=\"nginx 的反向代理配置\"></a>nginx 的反向代理配置</h3><ul>\n<li>反向代理：指代理服务器来接受internet的请求，然后将请求转发给内部的服务器，服务器的结果也是通过代理给客户端。    代理服务器来均衡的分配和协调服务器资源的使用。</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5s56w73j31rs0u0tbz.jpg\" alt=\"image-20210720092956542\" style=\"zoom:33%;\" />\n\n\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5wazi96j30zq0u0n20.jpg\" alt=\"image-20210720093356778\" style=\"zoom:25%;\" />\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><ul>\n<li><p>http服务器</p>\n<ul>\n<li>能够处理http协议</li>\n</ul>\n</li>\n<li><p>反向代理服务器</p>\n</li>\n<li><p>邮件服务器</p>\n<ul>\n<li>IMAP/POP3/SMTP</li>\n</ul>\n<h3 id=\"nginx-优势\"><a href=\"#nginx-优势\" class=\"headerlink\" title=\"nginx 优势\"></a>nginx 优势</h3><ul>\n<li>更快-数以万计的并发时，nginx可以比其他web服务器更快的响应</li>\n<li>高扩展-低耦合的设计</li>\n<li>高可靠-大量的网站都在使用</li>\n<li>低内存的消耗-对内存的消耗很小</li>\n<li>热部署-提供不间断的服务器升级</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nginx-的相关资源\"><a href=\"#nginx-的相关资源\" class=\"headerlink\" title=\"nginx 的相关资源\"></a>nginx 的相关资源</h3><ul>\n<li><a class=\"btn-beautify button--animated outline\" href=\"http://nginx.org\" \n  title=\"nginx维护包\"><i class=\"far fa-hand-point-right\"></i><span>nginx维护包</span></a></li>\n<li><a class=\"btn-beautify button--animated outline\" href=\"http://tengine.taobao.org/documentation_cn.html\" \n  title=\"nginx中文文档\"><i class=\"far fa-hand-point-right\"></i><span>nginx中文文档</span></a></li>\n</ul>\n<h3 id=\"nginx-相关配置\"><a href=\"#nginx-相关配置\" class=\"headerlink\" title=\"nginx 相关配置\"></a>nginx 相关配置</h3><h4 id=\"ubuntu-的软件依赖项\"><a href=\"#ubuntu-的软件依赖项\" class=\"headerlink\" title=\"ubuntu 的软件依赖项\"></a>ubuntu 的软件依赖项</h4><blockquote>\n<mark class=\"hl-label green\">gcc,g++编译器</mark> \n\n<p><code>sudo apt-get install gcc</code></p>\n<p><code>sudo apt-get install g++</code></p>\n<p><code>sudo apt-get install build-essential</code></p>\n<p><code>sudo apt-get install libtool</code>          </p>\n<mark class=\"hl-label green\">pcre库</mark> \n\n<a class=\"btn-beautify button--animated outline\" href=\"ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/\" \n  title=\"pcre包下载\"><i class=\"far fa-hand-point-right\"></i><span>pcre包下载</span></a>\n\n<ul>\n<li><code>./configure</code></li>\n<li><code>make</code></li>\n<li><code>sudo make install</code></li>\n</ul>\n<mark class=\"hl-label green\">zlib</mark> \n\n<a class=\"btn-beautify button--animated outline\" href=\"http://zlib.net/\" \n  title=\"zlib\"><i class=\"far fa-hand-point-right\"></i><span>zlib</span></a>\n\n<ul>\n<li><code>./configure</code></li>\n<li><code>make</code></li>\n<li><code>sudo make install</code></li>\n</ul>\n<mark class=\"hl-label green\">openssl</mark> \n\n<a class=\"btn-beautify button--animated outline\" href=\"https://www.openssl.org/source/\" \n  title=\"openssl\"><i class=\"far fa-hand-point-right\"></i><span>openssl</span></a>\n\n<ul>\n<li><code>./configure</code></li>\n<li><code>make</code></li>\n<li><code>sudo make install</code></li>\n</ul>\n</blockquote>\n<h3 id=\"nginx相关操作\"><a href=\"#nginx相关操作\" class=\"headerlink\" title=\"nginx相关操作\"></a>nginx相关操作</h3><ul>\n<li>进入到安装目录<ul>\n<li><code>/usr/local/nginx/sbin/</code>       </li>\n</ul>\n</li>\n<li>启动<ul>\n<li><code>sudo ./nginx</code>         </li>\n<li><code>sudo ./nginx -c nginx配置文件</code></li>\n</ul>\n</li>\n<li>停止<ul>\n<li><code>sudo ./nginx -s stop</code>  –暴力</li>\n<li><code>sudo ./nginx -s quit</code> –柔和</li>\n</ul>\n</li>\n<li>重新加载<ul>\n<li><code>sudo ./nginx -s reload</code>    </li>\n</ul>\n</li>\n<li>测试配置信息<ul>\n<li><code>sudo ./nginx -t</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nginx-的相关配置\"><a href=\"#nginx-的相关配置\" class=\"headerlink\" title=\"nginx 的相关配置\"></a>nginx 的相关配置</h3><ul>\n<li>nginx 的配置文件由主配置文件和辅助配置文件构成</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5k0xyvlj31u605mwhg.jpg\" alt=\"nginx 配置文件\"></p>\n<ul>\n<li>nginx 的配置文件结构</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5mnaftoj31720u0dhg.jpg\" alt=\"image-20210720092437398\" style=\"zoom: 25%;\" />\n\n\n\n<blockquote>\n<p><code>main</code>:    nginx运行时的参数，与业务没有关系，如工作进程数</p>\n<p><code>http</code>: 提供与http服务相关的参数</p>\n<p><code>server</code>: http 服务支持多个server，每一个server都可以有自己的配置项</p>\n<p><code>locatio</code>:      http服务中，对URL对应的配置，包括资源访问路径，文件，命令</p>\n</blockquote>\n<h3 id=\"nginx-配置静态页面\"><a href=\"#nginx-配置静态页面\" class=\"headerlink\" title=\"nginx 配置静态页面\"></a>nginx 配置静态页面</h3><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn62hs5pxj60qe0b00t502.jpg\" alt=\"image-20210720093954168\" style=\"zoom: 50%;\" />\n\n\n\n<ul>\n<li><code>root    </code>: 放置静态网页的根目录</li>\n<li><code>index</code>: 要访问的网页资源</li>\n</ul>\n<h3 id=\"nginx-的反向代理配置\"><a href=\"#nginx-的反向代理配置\" class=\"headerlink\" title=\"nginx 的反向代理配置\"></a>nginx 的反向代理配置</h3><ul>\n<li>反向代理：指代理服务器来接受internet的请求，然后将请求转发给内部的服务器，服务器的结果也是通过代理给客户端。    代理服务器来均衡的分配和协调服务器资源的使用。</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5s56w73j31rs0u0tbz.jpg\" alt=\"image-20210720092956542\" style=\"zoom:33%;\" />\n\n\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsn5wazi96j30zq0u0n20.jpg\" alt=\"image-20210720093356778\" style=\"zoom:25%;\" />\n\n\n\n\n\n"},{"title":"POST信息解析","date":"2021-03-27T16:00:00.000Z","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gsmi6zxbwij317w0na14p.jpg","highlight_shrink":true,"sticky":2,"_content":"\n### 原来的文本信息\n\n![post后收到的信息](https://tva1.sinaimg.cn/large/008i3skNly1gsmh9xt4rxj31ea0u0199.jpg)\n\n\n\n### 解析后的内容\n\n![这是一张图片，可以直接被打开成图片](https://tva1.sinaimg.cn/large/008i3skNly1gsmhbbe8luj31eb0u0qi8.jpg)\n\n\n\n### post 信息返回解析\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <ctype.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\n//fcgi 程序需要的头文件\n#include \"fcgi_config.h\"\n#include \"fcgi_stdio.h\"\n\n\n/**\n * @brief  去掉一个字符串两边的空白字符\n *\n * @param inbuf确保inbuf可修改\n *\n * @returns   \n *      0 成功\n *      -1 失败\n */\n\nint trim_space(char *inbuf)\n{\n    if(inbuf == NULL)\n        return -1;\n\n    char * tmp = inbuf;\n    int i = 0;\n    int j = strlen(tmp) -1 ;\n\n    //\"###user##\"\n    //i = 3\n    //j = 6\n    while(isspace(tmp[i]) && tmp[i] != '\\0') //从左边开始去空格\n    {\n        i++;\n    }\n    while(isspace(tmp[j]) && j > i)//从右边开始去空格\n    {\n        j--;\n    }\n    int count = j-i+1; //6-3+1-->4 //得出去掉左右空格后的真实字符个数\n    strncpy(inbuf,tmp+i,count);\n    inbuf[count] = '\\0';\n\n    return 0;\n}\n\n/**\n * @brief  在字符串full_data中查找字符串substr第一次出现的位置\n *\n * @param full_data \t  源字符串首地址\n * @param full_data_len 源字符串长度\n * @param substr        匹配字符串首地址\n *\n * @returns   \n *      成功: 匹配字符串首地址\n *      失败：NULL\n */\n//这个函数的功能和strstr是类似的 \nchar* memstr(char* full_data, int full_data_len, char* substr) \n{ \n\t//异常处理\n    if (full_data == NULL || full_data_len <= 0 || substr == NULL) \n\t{ \n        return NULL; \n    } \n\n    if (*substr == '\\0')\n\t{ \n        return NULL; \n    } \n\n\t//匹配子串的长度\n    int sublen = strlen(substr); \n\n    int i; \n    char* cur = full_data; \n    int last_possible = full_data_len - sublen + 1; //减去匹配子串后的长度\n  \t//last_possible 需要循环匹配的最大次数\n    for (i = 0; i < last_possible; i++) \n\t{ \n        if (*cur == *substr) //如果*cur的字符和 *substr中的第一个字符对的上，就开始整个子串的匹配\n\t\t{ \n            if (memcmp(cur, substr, sublen) == 0) //整个子串的匹配\n\t\t\t{ \n                //found  \n                return cur; //找见返回源串中 包含子串的起始位置\n            } \n        }\n\t\t\n        cur++; \n    } \n\n    return NULL; \n} \n\n\n\n\n\n\nint main(void)\n{\n\n//1.get data len from nginx web content\nwhile (FCGI_Accept() >= 0)\n    {\n        //==========> 获取post数据的长度 <===========\n        char *contentLength = getenv(\"CONTENT_LENGTH\");\n        long len;\n        int ret = 0;\n\n        printf(\"Content-type: text/html\\r\\n\\r\\n\");\n\n        if (contentLength != NULL)\n        {\n            len = strtol(contentLength, NULL, 10); //字符串转long， 或者atol\n        }\n        else\n        {\n            len = 0;\n        }\n\n        if (len <= 0)\n        {\n            printf(\"No data from standard input\\n\");\n            ret = -1;\n        }\n        printf(\"len=%d\",len);\n\n        //==========> 开辟存放文件的 内存 <===========\n        //malloc space to save conten\n        char *web_content = (char *)malloc(sizeof(char)*len);\n        if(web_content == NULL)\n        {\n            perror(\"malloc error!\");\n            return -1;\n        }\n        memset(web_content,0,len);\n\n        ret = fread(web_content,1,len,stdin); //保存返回的数据\n        if(ret == 0)\n        {\n            perror(\"get web content error!\");\n            return -1;\n        }\n\n        FILE *fp = fopen(\"./check_info.txt\",\"w+\");//把数据写到文件里面，等待验证\n\n        fwrite(web_content,1,ret,fp);\n\n        fclose(fp);\n\n        //===========> 开始处理前端发送过来的post数据格式 <============\n        char *begin = web_content;    //内存起点\n        char *p = begin;\n\n        /*\n       ------WebKitFormBoundary88asdgewtgewx\\r\\n\n       Content-Disposition: form-data; user=\"mike\"; filename=\"xxx.jpg\"; md5=\"xxxx\"; size=10240\\r\\n\n       Content-Type: application/octet-stream\\r\\n\n       \\r\\n\n       真正的文件内容\\r\\n\n       ------WebKitFormBoundary88asdgewtgewx\n       */\n\n        //get boundary 得到分界线, ------WebKitFormBoundary88asdgewtgewx\n        p = strstr(begin,\"\\r\\n\"); //p到第一行的末尾\n        if(p == NULL)\n        {\n            perror(\"get first_line error!\");\n            return -1;\n        }\n        char first_line[128] = {0}; //保存第一行的内容，也就是分界线\n        strncpy(first_line,begin,p-begin);\n        first_line[p-begin] = '\\0';\n        printf(\"%s\\n\",first_line);\n\n        //jump \\r\\n\n        p += 2;\n         //new len，保存剩余的需要处理的数据长度\n        len -= (p-begin); \n        //new begin\n        begin = p;\n        \n        //----------------------------------------get file_name  begin--------\n        //to second_line,get file_name\n  \t\t\t//第二行的处理，这里面会保存文件的各种信息\n        char file_name[128] = {0};\n    \n        char *q = begin; //begin 指向第二行的起始位置\n        q = strstr(q,\"filename=\"); \n        //filename=\"xxxxx\"\n        //^\n        q += strlen(\"filename=\");\n        //filename=\"xxxxx\"\n        //         ^\n        q++;\n        //filename=\"xxxxx\"\n        //          ^ \n        char *k = strchr(q,'\"');\n        //filename=\"xxxxx\"\n        //               ^\n        strncpy(file_name,q,k-q);\n        file_name[k-q] = '\\0';\n        trim_space(file_name);\n        printf(\"%s\\n\",file_name);\n        //----------------------------------------get file_name  end --------\n\n        p = strstr(begin,\"\\r\\n\"); //到第二行的 \\r\\n 位置\n        if(p == NULL)\n        {\n            perror(\"get second_line error!\");\n            return -1;\n        }\n\n        p += 2; //thired line start 第三行的起始位置\n        len -= (p- begin) ;\n        begin = p; //thired line start\n\n        p = strstr(p,\"\\r\\n\"); //thired line end 第三行的末尾\n        p += 4;//\\r\\n\\r\\n // jump 3 line,4 line --->to 5 line 跳过第三行的末尾和第四行\n        len -= (p-begin) ; //odd len\n\n        //下面才是文件的真正内容\n        /*\n        真正的文件内容\\r\\n\n       ------WebKitFormBoundary88asdgewtgewx\n       */\n\n        begin = p; //begin=p --->5 line start\n        //printf(\"%s\",p) ;\n\n        p = memstr(begin, len, first_line);// 获取到标志再次出现的位置\n        //printf(\"%s\",p) ;\n        if(p == NULL)\n        {\n            perror(\"find second flag_line error!\");\n            return -1;\n        }\n\n        p -= 2; //to real content end\n\n        //real content  = p-begin ;\n        //=====> 此时begin-->p两个指针的区间就是post的文件二进制数据\n        //======>将数据写入文件中,其中文件名也是从post数据解析得来  <===========\n        //OKKKKKK!!!!!!\n        int fd = open(\"./content.txt\", O_CREAT|O_WRONLY, 0644);\n        if (fd < 0)\n        {\n           \n            free(web_content);\n            return -1;\n        }\n\n        //ftruncate会将参数fd指定的文件大小改为参数length指定的大小\n        ftruncate(fd, (p-begin));\n        write(fd, begin, (p-begin));\n        close(fd);\n    }\n\n    return 0;\n}\n```\n\n","source":"_posts/post 信息返回解析.md","raw":"---\ntitle: POST信息解析\ndate: 2021-03-28\ntag:\n  - 数据解析\ncategories:\n  - C++\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gsmi6zxbwij317w0na14p.jpg\nhighlight_shrink: true\nsticky: 2\n---\n\n### 原来的文本信息\n\n![post后收到的信息](https://tva1.sinaimg.cn/large/008i3skNly1gsmh9xt4rxj31ea0u0199.jpg)\n\n\n\n### 解析后的内容\n\n![这是一张图片，可以直接被打开成图片](https://tva1.sinaimg.cn/large/008i3skNly1gsmhbbe8luj31eb0u0qi8.jpg)\n\n\n\n### post 信息返回解析\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <ctype.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\n//fcgi 程序需要的头文件\n#include \"fcgi_config.h\"\n#include \"fcgi_stdio.h\"\n\n\n/**\n * @brief  去掉一个字符串两边的空白字符\n *\n * @param inbuf确保inbuf可修改\n *\n * @returns   \n *      0 成功\n *      -1 失败\n */\n\nint trim_space(char *inbuf)\n{\n    if(inbuf == NULL)\n        return -1;\n\n    char * tmp = inbuf;\n    int i = 0;\n    int j = strlen(tmp) -1 ;\n\n    //\"###user##\"\n    //i = 3\n    //j = 6\n    while(isspace(tmp[i]) && tmp[i] != '\\0') //从左边开始去空格\n    {\n        i++;\n    }\n    while(isspace(tmp[j]) && j > i)//从右边开始去空格\n    {\n        j--;\n    }\n    int count = j-i+1; //6-3+1-->4 //得出去掉左右空格后的真实字符个数\n    strncpy(inbuf,tmp+i,count);\n    inbuf[count] = '\\0';\n\n    return 0;\n}\n\n/**\n * @brief  在字符串full_data中查找字符串substr第一次出现的位置\n *\n * @param full_data \t  源字符串首地址\n * @param full_data_len 源字符串长度\n * @param substr        匹配字符串首地址\n *\n * @returns   \n *      成功: 匹配字符串首地址\n *      失败：NULL\n */\n//这个函数的功能和strstr是类似的 \nchar* memstr(char* full_data, int full_data_len, char* substr) \n{ \n\t//异常处理\n    if (full_data == NULL || full_data_len <= 0 || substr == NULL) \n\t{ \n        return NULL; \n    } \n\n    if (*substr == '\\0')\n\t{ \n        return NULL; \n    } \n\n\t//匹配子串的长度\n    int sublen = strlen(substr); \n\n    int i; \n    char* cur = full_data; \n    int last_possible = full_data_len - sublen + 1; //减去匹配子串后的长度\n  \t//last_possible 需要循环匹配的最大次数\n    for (i = 0; i < last_possible; i++) \n\t{ \n        if (*cur == *substr) //如果*cur的字符和 *substr中的第一个字符对的上，就开始整个子串的匹配\n\t\t{ \n            if (memcmp(cur, substr, sublen) == 0) //整个子串的匹配\n\t\t\t{ \n                //found  \n                return cur; //找见返回源串中 包含子串的起始位置\n            } \n        }\n\t\t\n        cur++; \n    } \n\n    return NULL; \n} \n\n\n\n\n\n\nint main(void)\n{\n\n//1.get data len from nginx web content\nwhile (FCGI_Accept() >= 0)\n    {\n        //==========> 获取post数据的长度 <===========\n        char *contentLength = getenv(\"CONTENT_LENGTH\");\n        long len;\n        int ret = 0;\n\n        printf(\"Content-type: text/html\\r\\n\\r\\n\");\n\n        if (contentLength != NULL)\n        {\n            len = strtol(contentLength, NULL, 10); //字符串转long， 或者atol\n        }\n        else\n        {\n            len = 0;\n        }\n\n        if (len <= 0)\n        {\n            printf(\"No data from standard input\\n\");\n            ret = -1;\n        }\n        printf(\"len=%d\",len);\n\n        //==========> 开辟存放文件的 内存 <===========\n        //malloc space to save conten\n        char *web_content = (char *)malloc(sizeof(char)*len);\n        if(web_content == NULL)\n        {\n            perror(\"malloc error!\");\n            return -1;\n        }\n        memset(web_content,0,len);\n\n        ret = fread(web_content,1,len,stdin); //保存返回的数据\n        if(ret == 0)\n        {\n            perror(\"get web content error!\");\n            return -1;\n        }\n\n        FILE *fp = fopen(\"./check_info.txt\",\"w+\");//把数据写到文件里面，等待验证\n\n        fwrite(web_content,1,ret,fp);\n\n        fclose(fp);\n\n        //===========> 开始处理前端发送过来的post数据格式 <============\n        char *begin = web_content;    //内存起点\n        char *p = begin;\n\n        /*\n       ------WebKitFormBoundary88asdgewtgewx\\r\\n\n       Content-Disposition: form-data; user=\"mike\"; filename=\"xxx.jpg\"; md5=\"xxxx\"; size=10240\\r\\n\n       Content-Type: application/octet-stream\\r\\n\n       \\r\\n\n       真正的文件内容\\r\\n\n       ------WebKitFormBoundary88asdgewtgewx\n       */\n\n        //get boundary 得到分界线, ------WebKitFormBoundary88asdgewtgewx\n        p = strstr(begin,\"\\r\\n\"); //p到第一行的末尾\n        if(p == NULL)\n        {\n            perror(\"get first_line error!\");\n            return -1;\n        }\n        char first_line[128] = {0}; //保存第一行的内容，也就是分界线\n        strncpy(first_line,begin,p-begin);\n        first_line[p-begin] = '\\0';\n        printf(\"%s\\n\",first_line);\n\n        //jump \\r\\n\n        p += 2;\n         //new len，保存剩余的需要处理的数据长度\n        len -= (p-begin); \n        //new begin\n        begin = p;\n        \n        //----------------------------------------get file_name  begin--------\n        //to second_line,get file_name\n  \t\t\t//第二行的处理，这里面会保存文件的各种信息\n        char file_name[128] = {0};\n    \n        char *q = begin; //begin 指向第二行的起始位置\n        q = strstr(q,\"filename=\"); \n        //filename=\"xxxxx\"\n        //^\n        q += strlen(\"filename=\");\n        //filename=\"xxxxx\"\n        //         ^\n        q++;\n        //filename=\"xxxxx\"\n        //          ^ \n        char *k = strchr(q,'\"');\n        //filename=\"xxxxx\"\n        //               ^\n        strncpy(file_name,q,k-q);\n        file_name[k-q] = '\\0';\n        trim_space(file_name);\n        printf(\"%s\\n\",file_name);\n        //----------------------------------------get file_name  end --------\n\n        p = strstr(begin,\"\\r\\n\"); //到第二行的 \\r\\n 位置\n        if(p == NULL)\n        {\n            perror(\"get second_line error!\");\n            return -1;\n        }\n\n        p += 2; //thired line start 第三行的起始位置\n        len -= (p- begin) ;\n        begin = p; //thired line start\n\n        p = strstr(p,\"\\r\\n\"); //thired line end 第三行的末尾\n        p += 4;//\\r\\n\\r\\n // jump 3 line,4 line --->to 5 line 跳过第三行的末尾和第四行\n        len -= (p-begin) ; //odd len\n\n        //下面才是文件的真正内容\n        /*\n        真正的文件内容\\r\\n\n       ------WebKitFormBoundary88asdgewtgewx\n       */\n\n        begin = p; //begin=p --->5 line start\n        //printf(\"%s\",p) ;\n\n        p = memstr(begin, len, first_line);// 获取到标志再次出现的位置\n        //printf(\"%s\",p) ;\n        if(p == NULL)\n        {\n            perror(\"find second flag_line error!\");\n            return -1;\n        }\n\n        p -= 2; //to real content end\n\n        //real content  = p-begin ;\n        //=====> 此时begin-->p两个指针的区间就是post的文件二进制数据\n        //======>将数据写入文件中,其中文件名也是从post数据解析得来  <===========\n        //OKKKKKK!!!!!!\n        int fd = open(\"./content.txt\", O_CREAT|O_WRONLY, 0644);\n        if (fd < 0)\n        {\n           \n            free(web_content);\n            return -1;\n        }\n\n        //ftruncate会将参数fd指定的文件大小改为参数length指定的大小\n        ftruncate(fd, (p-begin));\n        write(fd, begin, (p-begin));\n        close(fd);\n    }\n\n    return 0;\n}\n```\n\n","slug":"post 信息返回解析","published":1,"updated":"2021-07-19T11:54:24.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xf1000ok0576zh0gl4e","content":"<h3 id=\"原来的文本信息\"><a href=\"#原来的文本信息\" class=\"headerlink\" title=\"原来的文本信息\"></a>原来的文本信息</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsmh9xt4rxj31ea0u0199.jpg\" alt=\"post后收到的信息\"></p>\n<h3 id=\"解析后的内容\"><a href=\"#解析后的内容\" class=\"headerlink\" title=\"解析后的内容\"></a>解析后的内容</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsmhbbe8luj31eb0u0qi8.jpg\" alt=\"这是一张图片，可以直接被打开成图片\"></p>\n<h3 id=\"post-信息返回解析\"><a href=\"#post-信息返回解析\" class=\"headerlink\" title=\"post 信息返回解析\"></a>post 信息返回解析</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//fcgi 程序需要的头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgi_config.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgi_stdio.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  去掉一个字符串两边的空白字符</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param inbuf确保inbuf可修改</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *      0 成功</span></span><br><span class=\"line\"><span class=\"comment\"> *      -1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">trim_space</span><span class=\"params\">(<span class=\"keyword\">char</span> *inbuf)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(inbuf == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> * tmp = inbuf;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"built_in\">strlen</span>(tmp) <span class=\"number\">-1</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//&quot;###user##&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//i = 3</span></span><br><span class=\"line\">    <span class=\"comment\">//j = 6</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isspace</span>(tmp[i]) &amp;&amp; tmp[i] != <span class=\"string\">&#x27;\\0&#x27;</span>) <span class=\"comment\">//从左边开始去空格</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isspace</span>(tmp[j]) &amp;&amp; j &gt; i)<span class=\"comment\">//从右边开始去空格</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = j-i+<span class=\"number\">1</span>; <span class=\"comment\">//6-3+1--&gt;4 //得出去掉左右空格后的真实字符个数</span></span><br><span class=\"line\">    <span class=\"built_in\">strncpy</span>(inbuf,tmp+i,count);</span><br><span class=\"line\">    inbuf[count] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  在字符串full_data中查找字符串substr第一次出现的位置</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param full_data \t  源字符串首地址</span></span><br><span class=\"line\"><span class=\"comment\"> * @param full_data_len 源字符串长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @param substr        匹配字符串首地址</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *      成功: 匹配字符串首地址</span></span><br><span class=\"line\"><span class=\"comment\"> *      失败：NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//这个函数的功能和strstr是类似的 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">memstr</span><span class=\"params\">(<span class=\"keyword\">char</span>* full_data, <span class=\"keyword\">int</span> full_data_len, <span class=\"keyword\">char</span>* substr)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//异常处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (full_data == <span class=\"literal\">NULL</span> || full_data_len &lt;= <span class=\"number\">0</span> || substr == <span class=\"literal\">NULL</span>) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*substr == <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//匹配子串的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sublen = <span class=\"built_in\">strlen</span>(substr); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i; </span><br><span class=\"line\">    <span class=\"keyword\">char</span>* cur = full_data; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> last_possible = full_data_len - sublen + <span class=\"number\">1</span>; <span class=\"comment\">//减去匹配子串后的长度</span></span><br><span class=\"line\">  \t<span class=\"comment\">//last_possible 需要循环匹配的最大次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; last_possible; i++) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*cur == *substr) <span class=\"comment\">//如果*cur的字符和 *substr中的第一个字符对的上，就开始整个子串的匹配</span></span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">memcmp</span>(cur, substr, sublen) == <span class=\"number\">0</span>) <span class=\"comment\">//整个子串的匹配</span></span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">                <span class=\"comment\">//found  </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> cur; <span class=\"comment\">//找见返回源串中 包含子串的起始位置</span></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        cur++; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.get data len from nginx web content</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (FCGI_Accept() &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//==========&gt; 获取post数据的长度 &lt;===========</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *contentLength = getenv(<span class=\"string\">&quot;CONTENT_LENGTH&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content-type: text/html\\r\\n\\r\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (contentLength != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            len = strtol(contentLength, <span class=\"literal\">NULL</span>, <span class=\"number\">10</span>); <span class=\"comment\">//字符串转long， 或者atol</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No data from standard input\\n&quot;</span>);</span><br><span class=\"line\">            ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;len=%d&quot;</span>,len);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//==========&gt; 开辟存放文件的 内存 &lt;===========</span></span><br><span class=\"line\">        <span class=\"comment\">//malloc space to save conten</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *web_content = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>)*len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(web_content == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;malloc error!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(web_content,<span class=\"number\">0</span>,len);</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = fread(web_content,<span class=\"number\">1</span>,len,<span class=\"built_in\">stdin</span>); <span class=\"comment\">//保存返回的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;get web content error!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        FILE *fp = fopen(<span class=\"string\">&quot;./check_info.txt&quot;</span>,<span class=\"string\">&quot;w+&quot;</span>);<span class=\"comment\">//把数据写到文件里面，等待验证</span></span><br><span class=\"line\"></span><br><span class=\"line\">        fwrite(web_content,<span class=\"number\">1</span>,ret,fp);</span><br><span class=\"line\"></span><br><span class=\"line\">        fclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//===========&gt; 开始处理前端发送过来的post数据格式 &lt;============</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *begin = web_content;    <span class=\"comment\">//内存起点</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p = begin;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       ------WebKitFormBoundary88asdgewtgewx\\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       Content-Disposition: form-data; user=&quot;mike&quot;; filename=&quot;xxx.jpg&quot;; md5=&quot;xxxx&quot;; size=10240\\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       Content-Type: application/octet-stream\\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       \\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       真正的文件内容\\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       ------WebKitFormBoundary88asdgewtgewx</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//get boundary 得到分界线, ------WebKitFormBoundary88asdgewtgewx</span></span><br><span class=\"line\">        p = <span class=\"built_in\">strstr</span>(begin,<span class=\"string\">&quot;\\r\\n&quot;</span>); <span class=\"comment\">//p到第一行的末尾</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;get first_line error!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> first_line[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">//保存第一行的内容，也就是分界线</span></span><br><span class=\"line\">        <span class=\"built_in\">strncpy</span>(first_line,begin,p-begin);</span><br><span class=\"line\">        first_line[p-begin] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,first_line);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//jump \\r\\n</span></span><br><span class=\"line\">        p += <span class=\"number\">2</span>;</span><br><span class=\"line\">         <span class=\"comment\">//new len，保存剩余的需要处理的数据长度</span></span><br><span class=\"line\">        len -= (p-begin); </span><br><span class=\"line\">        <span class=\"comment\">//new begin</span></span><br><span class=\"line\">        begin = p;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//----------------------------------------get file_name  begin--------</span></span><br><span class=\"line\">        <span class=\"comment\">//to second_line,get file_name</span></span><br><span class=\"line\">  \t\t\t<span class=\"comment\">//第二行的处理，这里面会保存文件的各种信息</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> file_name[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">char</span> *q = begin; <span class=\"comment\">//begin 指向第二行的起始位置</span></span><br><span class=\"line\">        q = <span class=\"built_in\">strstr</span>(q,<span class=\"string\">&quot;filename=&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//filename=&quot;xxxxx&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">//^</span></span><br><span class=\"line\">        q += <span class=\"built_in\">strlen</span>(<span class=\"string\">&quot;filename=&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//filename=&quot;xxxxx&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">//         ^</span></span><br><span class=\"line\">        q++;</span><br><span class=\"line\">        <span class=\"comment\">//filename=&quot;xxxxx&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">//          ^ </span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *k = <span class=\"built_in\">strchr</span>(q,<span class=\"string\">&#x27;&quot;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//filename=&quot;xxxxx&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">//               ^</span></span><br><span class=\"line\">        <span class=\"built_in\">strncpy</span>(file_name,q,k-q);</span><br><span class=\"line\">        file_name[k-q] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        trim_space(file_name);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,file_name);</span><br><span class=\"line\">        <span class=\"comment\">//----------------------------------------get file_name  end --------</span></span><br><span class=\"line\"></span><br><span class=\"line\">        p = <span class=\"built_in\">strstr</span>(begin,<span class=\"string\">&quot;\\r\\n&quot;</span>); <span class=\"comment\">//到第二行的 \\r\\n 位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;get second_line error!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        p += <span class=\"number\">2</span>; <span class=\"comment\">//thired line start 第三行的起始位置</span></span><br><span class=\"line\">        len -= (p- begin) ;</span><br><span class=\"line\">        begin = p; <span class=\"comment\">//thired line start</span></span><br><span class=\"line\"></span><br><span class=\"line\">        p = <span class=\"built_in\">strstr</span>(p,<span class=\"string\">&quot;\\r\\n&quot;</span>); <span class=\"comment\">//thired line end 第三行的末尾</span></span><br><span class=\"line\">        p += <span class=\"number\">4</span>;<span class=\"comment\">//\\r\\n\\r\\n // jump 3 line,4 line ---&gt;to 5 line 跳过第三行的末尾和第四行</span></span><br><span class=\"line\">        len -= (p-begin) ; <span class=\"comment\">//odd len</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//下面才是文件的真正内容</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        真正的文件内容\\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       ------WebKitFormBoundary88asdgewtgewx</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        begin = p; <span class=\"comment\">//begin=p ---&gt;5 line start</span></span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;%s&quot;,p) ;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        p = memstr(begin, len, first_line);<span class=\"comment\">// 获取到标志再次出现的位置</span></span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;%s&quot;,p) ;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;find second flag_line error!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        p -= <span class=\"number\">2</span>; <span class=\"comment\">//to real content end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//real content  = p-begin ;</span></span><br><span class=\"line\">        <span class=\"comment\">//=====&gt; 此时begin--&gt;p两个指针的区间就是post的文件二进制数据</span></span><br><span class=\"line\">        <span class=\"comment\">//======&gt;将数据写入文件中,其中文件名也是从post数据解析得来  &lt;===========</span></span><br><span class=\"line\">        <span class=\"comment\">//OKKKKKK!!!!!!</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> fd = open(<span class=\"string\">&quot;./content.txt&quot;</span>, O_CREAT|O_WRONLY, <span class=\"number\">0644</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"built_in\">free</span>(web_content);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//ftruncate会将参数fd指定的文件大小改为参数length指定的大小</span></span><br><span class=\"line\">        ftruncate(fd, (p-begin));</span><br><span class=\"line\">        write(fd, begin, (p-begin));</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"原来的文本信息\"><a href=\"#原来的文本信息\" class=\"headerlink\" title=\"原来的文本信息\"></a>原来的文本信息</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsmh9xt4rxj31ea0u0199.jpg\" alt=\"post后收到的信息\"></p>\n<h3 id=\"解析后的内容\"><a href=\"#解析后的内容\" class=\"headerlink\" title=\"解析后的内容\"></a>解析后的内容</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsmhbbe8luj31eb0u0qi8.jpg\" alt=\"这是一张图片，可以直接被打开成图片\"></p>\n<h3 id=\"post-信息返回解析\"><a href=\"#post-信息返回解析\" class=\"headerlink\" title=\"post 信息返回解析\"></a>post 信息返回解析</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//fcgi 程序需要的头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgi_config.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fcgi_stdio.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  去掉一个字符串两边的空白字符</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param inbuf确保inbuf可修改</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *      0 成功</span></span><br><span class=\"line\"><span class=\"comment\"> *      -1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">trim_space</span><span class=\"params\">(<span class=\"keyword\">char</span> *inbuf)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(inbuf == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> * tmp = inbuf;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"built_in\">strlen</span>(tmp) <span class=\"number\">-1</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//&quot;###user##&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//i = 3</span></span><br><span class=\"line\">    <span class=\"comment\">//j = 6</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isspace</span>(tmp[i]) &amp;&amp; tmp[i] != <span class=\"string\">&#x27;\\0&#x27;</span>) <span class=\"comment\">//从左边开始去空格</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isspace</span>(tmp[j]) &amp;&amp; j &gt; i)<span class=\"comment\">//从右边开始去空格</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = j-i+<span class=\"number\">1</span>; <span class=\"comment\">//6-3+1--&gt;4 //得出去掉左右空格后的真实字符个数</span></span><br><span class=\"line\">    <span class=\"built_in\">strncpy</span>(inbuf,tmp+i,count);</span><br><span class=\"line\">    inbuf[count] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  在字符串full_data中查找字符串substr第一次出现的位置</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param full_data \t  源字符串首地址</span></span><br><span class=\"line\"><span class=\"comment\"> * @param full_data_len 源字符串长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @param substr        匹配字符串首地址</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *      成功: 匹配字符串首地址</span></span><br><span class=\"line\"><span class=\"comment\"> *      失败：NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//这个函数的功能和strstr是类似的 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">memstr</span><span class=\"params\">(<span class=\"keyword\">char</span>* full_data, <span class=\"keyword\">int</span> full_data_len, <span class=\"keyword\">char</span>* substr)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//异常处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (full_data == <span class=\"literal\">NULL</span> || full_data_len &lt;= <span class=\"number\">0</span> || substr == <span class=\"literal\">NULL</span>) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*substr == <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//匹配子串的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sublen = <span class=\"built_in\">strlen</span>(substr); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i; </span><br><span class=\"line\">    <span class=\"keyword\">char</span>* cur = full_data; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> last_possible = full_data_len - sublen + <span class=\"number\">1</span>; <span class=\"comment\">//减去匹配子串后的长度</span></span><br><span class=\"line\">  \t<span class=\"comment\">//last_possible 需要循环匹配的最大次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; last_possible; i++) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*cur == *substr) <span class=\"comment\">//如果*cur的字符和 *substr中的第一个字符对的上，就开始整个子串的匹配</span></span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">memcmp</span>(cur, substr, sublen) == <span class=\"number\">0</span>) <span class=\"comment\">//整个子串的匹配</span></span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">                <span class=\"comment\">//found  </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> cur; <span class=\"comment\">//找见返回源串中 包含子串的起始位置</span></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        cur++; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.get data len from nginx web content</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (FCGI_Accept() &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//==========&gt; 获取post数据的长度 &lt;===========</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *contentLength = getenv(<span class=\"string\">&quot;CONTENT_LENGTH&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content-type: text/html\\r\\n\\r\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (contentLength != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            len = strtol(contentLength, <span class=\"literal\">NULL</span>, <span class=\"number\">10</span>); <span class=\"comment\">//字符串转long， 或者atol</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No data from standard input\\n&quot;</span>);</span><br><span class=\"line\">            ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;len=%d&quot;</span>,len);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//==========&gt; 开辟存放文件的 内存 &lt;===========</span></span><br><span class=\"line\">        <span class=\"comment\">//malloc space to save conten</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *web_content = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>)*len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(web_content == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;malloc error!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(web_content,<span class=\"number\">0</span>,len);</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = fread(web_content,<span class=\"number\">1</span>,len,<span class=\"built_in\">stdin</span>); <span class=\"comment\">//保存返回的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;get web content error!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        FILE *fp = fopen(<span class=\"string\">&quot;./check_info.txt&quot;</span>,<span class=\"string\">&quot;w+&quot;</span>);<span class=\"comment\">//把数据写到文件里面，等待验证</span></span><br><span class=\"line\"></span><br><span class=\"line\">        fwrite(web_content,<span class=\"number\">1</span>,ret,fp);</span><br><span class=\"line\"></span><br><span class=\"line\">        fclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//===========&gt; 开始处理前端发送过来的post数据格式 &lt;============</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *begin = web_content;    <span class=\"comment\">//内存起点</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p = begin;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       ------WebKitFormBoundary88asdgewtgewx\\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       Content-Disposition: form-data; user=&quot;mike&quot;; filename=&quot;xxx.jpg&quot;; md5=&quot;xxxx&quot;; size=10240\\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       Content-Type: application/octet-stream\\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       \\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       真正的文件内容\\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       ------WebKitFormBoundary88asdgewtgewx</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//get boundary 得到分界线, ------WebKitFormBoundary88asdgewtgewx</span></span><br><span class=\"line\">        p = <span class=\"built_in\">strstr</span>(begin,<span class=\"string\">&quot;\\r\\n&quot;</span>); <span class=\"comment\">//p到第一行的末尾</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;get first_line error!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> first_line[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">//保存第一行的内容，也就是分界线</span></span><br><span class=\"line\">        <span class=\"built_in\">strncpy</span>(first_line,begin,p-begin);</span><br><span class=\"line\">        first_line[p-begin] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,first_line);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//jump \\r\\n</span></span><br><span class=\"line\">        p += <span class=\"number\">2</span>;</span><br><span class=\"line\">         <span class=\"comment\">//new len，保存剩余的需要处理的数据长度</span></span><br><span class=\"line\">        len -= (p-begin); </span><br><span class=\"line\">        <span class=\"comment\">//new begin</span></span><br><span class=\"line\">        begin = p;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//----------------------------------------get file_name  begin--------</span></span><br><span class=\"line\">        <span class=\"comment\">//to second_line,get file_name</span></span><br><span class=\"line\">  \t\t\t<span class=\"comment\">//第二行的处理，这里面会保存文件的各种信息</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> file_name[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">char</span> *q = begin; <span class=\"comment\">//begin 指向第二行的起始位置</span></span><br><span class=\"line\">        q = <span class=\"built_in\">strstr</span>(q,<span class=\"string\">&quot;filename=&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//filename=&quot;xxxxx&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">//^</span></span><br><span class=\"line\">        q += <span class=\"built_in\">strlen</span>(<span class=\"string\">&quot;filename=&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//filename=&quot;xxxxx&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">//         ^</span></span><br><span class=\"line\">        q++;</span><br><span class=\"line\">        <span class=\"comment\">//filename=&quot;xxxxx&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">//          ^ </span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *k = <span class=\"built_in\">strchr</span>(q,<span class=\"string\">&#x27;&quot;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//filename=&quot;xxxxx&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">//               ^</span></span><br><span class=\"line\">        <span class=\"built_in\">strncpy</span>(file_name,q,k-q);</span><br><span class=\"line\">        file_name[k-q] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        trim_space(file_name);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,file_name);</span><br><span class=\"line\">        <span class=\"comment\">//----------------------------------------get file_name  end --------</span></span><br><span class=\"line\"></span><br><span class=\"line\">        p = <span class=\"built_in\">strstr</span>(begin,<span class=\"string\">&quot;\\r\\n&quot;</span>); <span class=\"comment\">//到第二行的 \\r\\n 位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;get second_line error!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        p += <span class=\"number\">2</span>; <span class=\"comment\">//thired line start 第三行的起始位置</span></span><br><span class=\"line\">        len -= (p- begin) ;</span><br><span class=\"line\">        begin = p; <span class=\"comment\">//thired line start</span></span><br><span class=\"line\"></span><br><span class=\"line\">        p = <span class=\"built_in\">strstr</span>(p,<span class=\"string\">&quot;\\r\\n&quot;</span>); <span class=\"comment\">//thired line end 第三行的末尾</span></span><br><span class=\"line\">        p += <span class=\"number\">4</span>;<span class=\"comment\">//\\r\\n\\r\\n // jump 3 line,4 line ---&gt;to 5 line 跳过第三行的末尾和第四行</span></span><br><span class=\"line\">        len -= (p-begin) ; <span class=\"comment\">//odd len</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//下面才是文件的真正内容</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        真正的文件内容\\r\\n</span></span><br><span class=\"line\"><span class=\"comment\">       ------WebKitFormBoundary88asdgewtgewx</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        begin = p; <span class=\"comment\">//begin=p ---&gt;5 line start</span></span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;%s&quot;,p) ;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        p = memstr(begin, len, first_line);<span class=\"comment\">// 获取到标志再次出现的位置</span></span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;%s&quot;,p) ;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;find second flag_line error!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        p -= <span class=\"number\">2</span>; <span class=\"comment\">//to real content end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//real content  = p-begin ;</span></span><br><span class=\"line\">        <span class=\"comment\">//=====&gt; 此时begin--&gt;p两个指针的区间就是post的文件二进制数据</span></span><br><span class=\"line\">        <span class=\"comment\">//======&gt;将数据写入文件中,其中文件名也是从post数据解析得来  &lt;===========</span></span><br><span class=\"line\">        <span class=\"comment\">//OKKKKKK!!!!!!</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> fd = open(<span class=\"string\">&quot;./content.txt&quot;</span>, O_CREAT|O_WRONLY, <span class=\"number\">0644</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"built_in\">free</span>(web_content);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//ftruncate会将参数fd指定的文件大小改为参数length指定的大小</span></span><br><span class=\"line\">        ftruncate(fd, (p-begin));</span><br><span class=\"line\">        write(fd, begin, (p-begin));</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"static","date":"2020-07-07T16:00:00.000Z","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gseq98n6j2j30bn0bjwfp.jpg","_content":"\n### 静态变量\n\n* 函数中的变量，类中的变量，用static修饰\n\n<b>函数中的静态变量</b>\n\n当变量用static修饰时，生命周期和程序的生命周期一样。即使多次调用该函数，静态变量也只分配一次空间，而且它的值还会累计使用。这对于需要先前存储函数状态的任何应用程序有非常的作用。\n\n```cpp\n#include <iostream>\n#include <string>\nusing namespace std;\n\nvoid demo()\n{\n  //static var\n  static int var = 0;\n  cout<<var<<\" \";\n  \n  var ++;\n}\n\nint main()\n{\n  for(int i = 0;i<3;i++)\n  \tdemo();\n  return 0;\n}\n\n\noutput:\n0 1 2 \n```\n\n* 每次调用demo() 都不会对var 进行初始化，它的值是累计的状态。\n\n<b>类中的静态变量</b>\n\n* 由于static的变量只被初始化了一次，故它在静态存储区分配了空间。因此**类中的静态变量由所有对象共享**；**不同的对象，不能有相同静态变量的多个副本。也就是这个原因，静态变量不能使用构造函数进行初始化**\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Apple\n{\npublic:\n\tstatic int i;\n  \n  Apple()\n  {\n  \t\t//do nothing  \n  };\n  \n};\n\nint main()\n{\n  Apple obj1;\n  Apple obj2;\n  obj1.i = 2;\n  obj2.i = 3;\n  \n  cout<<obj1.i<<\" \"<<obj2.i<<endl;\n  return 0;\n}\n\n\n\n//output:\nUndefined symbols for architecture x86_64:\n  \"Apple::i\", referenced from:\n      _main in class_static-b4ba1a.o\n```\n\n\n\n\n\n* 上面尝试为多个对象创建多个静态变量的副本,最终的结果是错误的，正确的：\n\n  类中的静态变量应由用户使用类外的类名和范围解析运算符显式初始化。\n\n\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Apple\n{\n public:\n  static int i;\n  \n  Apple(){};\n  \n};\n\nint Apple::i = 1;\n\nint main()\n{\n  Apple obj;\n  \n  cout <<obj.i<<endl;\n  \n  return 0;\n}\n\n//output\n1\n```\n\n\n\n\n\n### 静态成员\n\n\n\n<b>类对象为静态</b>\n\n\n\n和变量的static属性一样，声明对象时static修饰可以让对象的生命周期直到程序结束。\n\n\n\n```cpp\n//如下程序的对象是非静态的\n\n#include <iostream>\nusing namespace std;\n\nclass Apple\n{\n\tint i ;\n  public:\n  \tApple()\n    {\n      i = 0;\n      cout<<\"in constructor\"<<endl;\n    }\n  ~Apple()\n  {\n    cout<<\"in destructor\"<<endl;\n  }\n};\n\nint main()\n{\n  \n  int x = 0;\n  if(x == 0)\n  {\n    Apple obj;\n  }\n  \n  cout<<\"end of main\"<<endl;\n  return 0;\n}\n\n\n//output:\nin constructor\nin destructor\nend of main\n  \n  \n//如果main函数中这样做：\n  \nif(x == 0)\n{\n  static Apple obj;\n}\n\n\n\n//output:\nin constructor\nend of main\nin destructor\n  \n//main函数结束后调用析构函数，静态对象的范围贯穿程序的生命周期\n```\n\n\n\n类成员函数为静态\n\n\n\n* 类中的静态函数和静态成员一样，也不依赖于类的对象，我们使用类名加范围解析运算符来调用静态成员函数\n\n\n\n* 允许静态成员函数仅访问静态数据成员或者其他静态成员函数，它们无法访问类的非静态数据成员或者成员函数\n\n\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Apple\n{\n  public:\n  static void printMSG()\n  {\n    cout<<\"welcome\"<<endl;\n  }\n};\n\nint mian()\n{\n  Apple::printMSG();\n  \n  return 0;\n  \n}\n\n//output\nwelcome\n```\n\n\n\n### 综合举例\n\n- TestStatic.h\n\n```cpp\n#pragma once\n\n\n\n#include <iostream>\n\n\nusing std::cout;\nusing std::endl;\n\n\n\nclass TestStatic\n{\npublic:\n\tTestStatic();\n\tvoid func1();\n\tstatic void func2();\n\tstatic void func3(const TestStatic& obj);\n\n\n\tconst static int num4 = 99;//又要实现共享，又要不可变，直接类内初始化\n\tint num1;\n\tstatic int num2;\n\n\t\nprivate:\n\tstatic int num3;\n};\n\n\n```\n\n- TestStatic.h\n\n```cpp\n#include \"TestStatic.h\"\n\n\n\n\n\n//1.静态变量的初始化,在类内声明，在类外定义，区分作用域控制符\n\nint TestStatic::num3 = 300;\nint TestStatic::num2 = 200;\n\n\n\nTestStatic::TestStatic()\n{\n\tthis->num1 = 100;\n}\n\n\n\nvoid TestStatic::func1()\n{\n\tcout << \"num1 = \" << this->num1 << endl;\n\tcout << \"通过成员函数调用num2 = \" << TestStatic::num2 << endl;//类内访问private \n}\n\n//4\nvoid TestStatic::func2()\n{\n\tcout << \"l类中的静态函数，用于管理类中的静态数据\" << endl;\n}\n\n\n\n//6\nvoid TestStatic::func3(const TestStatic& obj)\n{\n\tcout <<\"用对象访问非静态变量\"<< obj.num1 << endl;\n}\n\n\n```\n\n\n\n- main.cpp\n\n```cpp\n#include \"TestStatic.h\"\n\n//5\n//静态成员 在编译的时候已经分配内存，那个时候对象还没有创建\n//类内声明，类外定义\n// className::static_func    className::static_value\n\n//静态成员变量在各个对象中传递信息\n//静态成员函数用来管理静态变量\n\n\n//----------------------\n//1.静态全局变量\nstatic int dd;//静态区（全局区）.bss;=0;定义到文件结尾\n\nnamespace TT\n{\n\n\t//2.静态局部变量\n\tstatic int dd2;//静态区（全局区）.bss;=0;定义到作用域结束\n\t//作用域结束也不会销毁，会直到程序结束\n\t//再次被调用的时候，值是不变的\n}\n\n\n//3.静态函数：限制在本文件使用，在别的文件中不可调用\n//不要在CPP中声明 非static 全局函数\n//不要在H中声明static函数\n\nstatic void sfunc1() {\n\n\tcout << \" global static func\" << endl;\n\n\tcout << \" TT \" << TT::dd2 << endl;\n\n}\n\n\n\n\n\n\n\n\nint main(void)\n{\n\n\tTestStatic ts1;\n\t//调用static var\n\tcout << \"通过对象直接调用\" << ts1.num2 << endl;\n\tcout << \"通过类的作用域调用\" << TestStatic::num2 << endl;\n\tts1.func1();\n\n\tcout << \"dd = \"<<dd << endl;\n\n\tsfunc1();\n\n\tTestStatic::func2();\n\tTestStatic::func3(ts1);\n\n\tcout << \"出了作用域访问局部static变量 dd = \" << TT::dd2 << endl;\n\n\tcout << \"const static value = \" << ts1.num4 << endl;\n\n\n\treturn 0;\n}\n\n```\n\n","source":"_posts/static.md","raw":"---\ntitle: static\ndate: 2020-07-08\ntag:\n  - static\n  - C++\ncategories: \"C++\"\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gseq98n6j2j30bn0bjwfp.jpg\n---\n\n### 静态变量\n\n* 函数中的变量，类中的变量，用static修饰\n\n<b>函数中的静态变量</b>\n\n当变量用static修饰时，生命周期和程序的生命周期一样。即使多次调用该函数，静态变量也只分配一次空间，而且它的值还会累计使用。这对于需要先前存储函数状态的任何应用程序有非常的作用。\n\n```cpp\n#include <iostream>\n#include <string>\nusing namespace std;\n\nvoid demo()\n{\n  //static var\n  static int var = 0;\n  cout<<var<<\" \";\n  \n  var ++;\n}\n\nint main()\n{\n  for(int i = 0;i<3;i++)\n  \tdemo();\n  return 0;\n}\n\n\noutput:\n0 1 2 \n```\n\n* 每次调用demo() 都不会对var 进行初始化，它的值是累计的状态。\n\n<b>类中的静态变量</b>\n\n* 由于static的变量只被初始化了一次，故它在静态存储区分配了空间。因此**类中的静态变量由所有对象共享**；**不同的对象，不能有相同静态变量的多个副本。也就是这个原因，静态变量不能使用构造函数进行初始化**\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Apple\n{\npublic:\n\tstatic int i;\n  \n  Apple()\n  {\n  \t\t//do nothing  \n  };\n  \n};\n\nint main()\n{\n  Apple obj1;\n  Apple obj2;\n  obj1.i = 2;\n  obj2.i = 3;\n  \n  cout<<obj1.i<<\" \"<<obj2.i<<endl;\n  return 0;\n}\n\n\n\n//output:\nUndefined symbols for architecture x86_64:\n  \"Apple::i\", referenced from:\n      _main in class_static-b4ba1a.o\n```\n\n\n\n\n\n* 上面尝试为多个对象创建多个静态变量的副本,最终的结果是错误的，正确的：\n\n  类中的静态变量应由用户使用类外的类名和范围解析运算符显式初始化。\n\n\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Apple\n{\n public:\n  static int i;\n  \n  Apple(){};\n  \n};\n\nint Apple::i = 1;\n\nint main()\n{\n  Apple obj;\n  \n  cout <<obj.i<<endl;\n  \n  return 0;\n}\n\n//output\n1\n```\n\n\n\n\n\n### 静态成员\n\n\n\n<b>类对象为静态</b>\n\n\n\n和变量的static属性一样，声明对象时static修饰可以让对象的生命周期直到程序结束。\n\n\n\n```cpp\n//如下程序的对象是非静态的\n\n#include <iostream>\nusing namespace std;\n\nclass Apple\n{\n\tint i ;\n  public:\n  \tApple()\n    {\n      i = 0;\n      cout<<\"in constructor\"<<endl;\n    }\n  ~Apple()\n  {\n    cout<<\"in destructor\"<<endl;\n  }\n};\n\nint main()\n{\n  \n  int x = 0;\n  if(x == 0)\n  {\n    Apple obj;\n  }\n  \n  cout<<\"end of main\"<<endl;\n  return 0;\n}\n\n\n//output:\nin constructor\nin destructor\nend of main\n  \n  \n//如果main函数中这样做：\n  \nif(x == 0)\n{\n  static Apple obj;\n}\n\n\n\n//output:\nin constructor\nend of main\nin destructor\n  \n//main函数结束后调用析构函数，静态对象的范围贯穿程序的生命周期\n```\n\n\n\n类成员函数为静态\n\n\n\n* 类中的静态函数和静态成员一样，也不依赖于类的对象，我们使用类名加范围解析运算符来调用静态成员函数\n\n\n\n* 允许静态成员函数仅访问静态数据成员或者其他静态成员函数，它们无法访问类的非静态数据成员或者成员函数\n\n\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Apple\n{\n  public:\n  static void printMSG()\n  {\n    cout<<\"welcome\"<<endl;\n  }\n};\n\nint mian()\n{\n  Apple::printMSG();\n  \n  return 0;\n  \n}\n\n//output\nwelcome\n```\n\n\n\n### 综合举例\n\n- TestStatic.h\n\n```cpp\n#pragma once\n\n\n\n#include <iostream>\n\n\nusing std::cout;\nusing std::endl;\n\n\n\nclass TestStatic\n{\npublic:\n\tTestStatic();\n\tvoid func1();\n\tstatic void func2();\n\tstatic void func3(const TestStatic& obj);\n\n\n\tconst static int num4 = 99;//又要实现共享，又要不可变，直接类内初始化\n\tint num1;\n\tstatic int num2;\n\n\t\nprivate:\n\tstatic int num3;\n};\n\n\n```\n\n- TestStatic.h\n\n```cpp\n#include \"TestStatic.h\"\n\n\n\n\n\n//1.静态变量的初始化,在类内声明，在类外定义，区分作用域控制符\n\nint TestStatic::num3 = 300;\nint TestStatic::num2 = 200;\n\n\n\nTestStatic::TestStatic()\n{\n\tthis->num1 = 100;\n}\n\n\n\nvoid TestStatic::func1()\n{\n\tcout << \"num1 = \" << this->num1 << endl;\n\tcout << \"通过成员函数调用num2 = \" << TestStatic::num2 << endl;//类内访问private \n}\n\n//4\nvoid TestStatic::func2()\n{\n\tcout << \"l类中的静态函数，用于管理类中的静态数据\" << endl;\n}\n\n\n\n//6\nvoid TestStatic::func3(const TestStatic& obj)\n{\n\tcout <<\"用对象访问非静态变量\"<< obj.num1 << endl;\n}\n\n\n```\n\n\n\n- main.cpp\n\n```cpp\n#include \"TestStatic.h\"\n\n//5\n//静态成员 在编译的时候已经分配内存，那个时候对象还没有创建\n//类内声明，类外定义\n// className::static_func    className::static_value\n\n//静态成员变量在各个对象中传递信息\n//静态成员函数用来管理静态变量\n\n\n//----------------------\n//1.静态全局变量\nstatic int dd;//静态区（全局区）.bss;=0;定义到文件结尾\n\nnamespace TT\n{\n\n\t//2.静态局部变量\n\tstatic int dd2;//静态区（全局区）.bss;=0;定义到作用域结束\n\t//作用域结束也不会销毁，会直到程序结束\n\t//再次被调用的时候，值是不变的\n}\n\n\n//3.静态函数：限制在本文件使用，在别的文件中不可调用\n//不要在CPP中声明 非static 全局函数\n//不要在H中声明static函数\n\nstatic void sfunc1() {\n\n\tcout << \" global static func\" << endl;\n\n\tcout << \" TT \" << TT::dd2 << endl;\n\n}\n\n\n\n\n\n\n\n\nint main(void)\n{\n\n\tTestStatic ts1;\n\t//调用static var\n\tcout << \"通过对象直接调用\" << ts1.num2 << endl;\n\tcout << \"通过类的作用域调用\" << TestStatic::num2 << endl;\n\tts1.func1();\n\n\tcout << \"dd = \"<<dd << endl;\n\n\tsfunc1();\n\n\tTestStatic::func2();\n\tTestStatic::func3(ts1);\n\n\tcout << \"出了作用域访问局部static变量 dd = \" << TT::dd2 << endl;\n\n\tcout << \"const static value = \" << ts1.num4 << endl;\n\n\n\treturn 0;\n}\n\n```\n\n","slug":"static","published":1,"updated":"2021-07-12T18:28:33.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xf2000rk057agqt78b0","content":"<h3 id=\"静态变量\"><a href=\"#静态变量\" class=\"headerlink\" title=\"静态变量\"></a>静态变量</h3><ul>\n<li>函数中的变量，类中的变量，用static修饰</li>\n</ul>\n<p><b>函数中的静态变量</b></p>\n<p>当变量用static修饰时，生命周期和程序的生命周期一样。即使多次调用该函数，静态变量也只分配一次空间，而且它的值还会累计使用。这对于需要先前存储函数状态的任何应用程序有非常的作用。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//static var</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> var = <span class=\"number\">0</span>;</span><br><span class=\"line\">  cout&lt;&lt;var&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  var ++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">  \t<span class=\"built_in\">demo</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">output:</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>每次调用demo() 都不会对var 进行初始化，它的值是累计的状态。</li>\n</ul>\n<p><b>类中的静态变量</b></p>\n<ul>\n<li>由于static的变量只被初始化了一次，故它在静态存储区分配了空间。因此<strong>类中的静态变量由所有对象共享</strong>；<strong>不同的对象，不能有相同静态变量的多个副本。也就是这个原因，静态变量不能使用构造函数进行初始化</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">Apple</span>()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  \t\t<span class=\"comment\">//do nothing  </span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Apple obj1;</span><br><span class=\"line\">  Apple obj2;</span><br><span class=\"line\">  obj1.i = <span class=\"number\">2</span>;</span><br><span class=\"line\">  obj2.i = <span class=\"number\">3</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  cout&lt;&lt;obj1.i&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;obj2.i&lt;&lt;endl;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output:</span></span><br><span class=\"line\">Undefined symbols <span class=\"keyword\">for</span> architecture x86_64:</span><br><span class=\"line\">  <span class=\"string\">&quot;Apple::i&quot;</span>, referenced from:</span><br><span class=\"line\">      _main in class_static-b4ba1a.o</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<ul>\n<li><p>上面尝试为多个对象创建多个静态变量的副本,最终的结果是错误的，正确的：</p>\n<p>类中的静态变量应由用户使用类外的类名和范围解析运算符显式初始化。</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">Apple</span>()&#123;&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> Apple::i = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Apple obj;</span><br><span class=\"line\">  </span><br><span class=\"line\">  cout &lt;&lt;obj.i&lt;&lt;endl;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><p><b>类对象为静态</b></p>\n<p>和变量的static属性一样，声明对象时static修饰可以让对象的生命周期直到程序结束。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如下程序的对象是非静态的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i ;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \t<span class=\"built_in\">Apple</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      i = <span class=\"number\">0</span>;</span><br><span class=\"line\">      cout&lt;&lt;<span class=\"string\">&quot;in constructor&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ~<span class=\"built_in\">Apple</span>()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;in destructor&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Apple obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  cout&lt;&lt;<span class=\"string\">&quot;end of main&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output:</span></span><br><span class=\"line\">in constructor</span><br><span class=\"line\">in destructor</span><br><span class=\"line\">end of main</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//如果main函数中这样做：</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(x == <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Apple obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output:</span></span><br><span class=\"line\">in constructor</span><br><span class=\"line\">end of main</span><br><span class=\"line\">in destructor</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//main函数结束后调用析构函数，静态对象的范围贯穿程序的生命周期</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>类成员函数为静态</p>\n<ul>\n<li>类中的静态函数和静态成员一样，也不依赖于类的对象，我们使用类名加范围解析运算符来调用静态成员函数</li>\n</ul>\n<ul>\n<li>允许静态成员函数仅访问静态数据成员或者其他静态成员函数，它们无法访问类的非静态数据成员或者成员函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printMSG</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;welcome&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mian</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Apple::<span class=\"built_in\">printMSG</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output</span></span><br><span class=\"line\">welcome</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"综合举例\"><a href=\"#综合举例\" class=\"headerlink\" title=\"综合举例\"></a>综合举例</h3><ul>\n<li>TestStatic.h</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> std::cout;</span><br><span class=\"line\"><span class=\"keyword\">using</span> std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStatic</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">TestStatic</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func3</span><span class=\"params\">(<span class=\"keyword\">const</span> TestStatic&amp; obj)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num4 = <span class=\"number\">99</span>;<span class=\"comment\">//又要实现共享，又要不可变，直接类内初始化</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num1;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num2;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num3;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TestStatic.h</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;TestStatic.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.静态变量的初始化,在类内声明，在类外定义，区分作用域控制符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> TestStatic::num3 = <span class=\"number\">300</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> TestStatic::num2 = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TestStatic::<span class=\"built_in\">TestStatic</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;num1 = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestStatic::func1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;num1 = &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;num1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;通过成员函数调用num2 = &quot;</span> &lt;&lt; TestStatic::num2 &lt;&lt; endl;<span class=\"comment\">//类内访问private </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestStatic::func2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;l类中的静态函数，用于管理类中的静态数据&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestStatic::func3</span><span class=\"params\">(<span class=\"keyword\">const</span> TestStatic&amp; obj)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt;<span class=\"string\">&quot;用对象访问非静态变量&quot;</span>&lt;&lt; obj.num1 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>main.cpp</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;TestStatic.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"comment\">//静态成员 在编译的时候已经分配内存，那个时候对象还没有创建</span></span><br><span class=\"line\"><span class=\"comment\">//类内声明，类外定义</span></span><br><span class=\"line\"><span class=\"comment\">// className::static_func    className::static_value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态成员变量在各个对象中传递信息</span></span><br><span class=\"line\"><span class=\"comment\">//静态成员函数用来管理静态变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//----------------------</span></span><br><span class=\"line\"><span class=\"comment\">//1.静态全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> dd;<span class=\"comment\">//静态区（全局区）.bss;=0;定义到文件结尾</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> TT</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.静态局部变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> dd2;<span class=\"comment\">//静态区（全局区）.bss;=0;定义到作用域结束</span></span><br><span class=\"line\">\t<span class=\"comment\">//作用域结束也不会销毁，会直到程序结束</span></span><br><span class=\"line\">\t<span class=\"comment\">//再次被调用的时候，值是不变的</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3.静态函数：限制在本文件使用，在别的文件中不可调用</span></span><br><span class=\"line\"><span class=\"comment\">//不要在CPP中声明 非static 全局函数</span></span><br><span class=\"line\"><span class=\"comment\">//不要在H中声明static函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sfunc1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; global static func&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; TT &quot;</span> &lt;&lt; TT::dd2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTestStatic ts1;</span><br><span class=\"line\">\t<span class=\"comment\">//调用static var</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;通过对象直接调用&quot;</span> &lt;&lt; ts1.num2 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;通过类的作用域调用&quot;</span> &lt;&lt; TestStatic::num2 &lt;&lt; endl;</span><br><span class=\"line\">\tts1.<span class=\"built_in\">func1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;dd = &quot;</span>&lt;&lt;dd &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">sfunc1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tTestStatic::<span class=\"built_in\">func2</span>();</span><br><span class=\"line\">\tTestStatic::<span class=\"built_in\">func3</span>(ts1);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;出了作用域访问局部static变量 dd = &quot;</span> &lt;&lt; TT::dd2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;const static value = &quot;</span> &lt;&lt; ts1.num4 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"静态变量\"><a href=\"#静态变量\" class=\"headerlink\" title=\"静态变量\"></a>静态变量</h3><ul>\n<li>函数中的变量，类中的变量，用static修饰</li>\n</ul>\n<p><b>函数中的静态变量</b></p>\n<p>当变量用static修饰时，生命周期和程序的生命周期一样。即使多次调用该函数，静态变量也只分配一次空间，而且它的值还会累计使用。这对于需要先前存储函数状态的任何应用程序有非常的作用。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//static var</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> var = <span class=\"number\">0</span>;</span><br><span class=\"line\">  cout&lt;&lt;var&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  var ++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">  \t<span class=\"built_in\">demo</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">output:</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>每次调用demo() 都不会对var 进行初始化，它的值是累计的状态。</li>\n</ul>\n<p><b>类中的静态变量</b></p>\n<ul>\n<li>由于static的变量只被初始化了一次，故它在静态存储区分配了空间。因此<strong>类中的静态变量由所有对象共享</strong>；<strong>不同的对象，不能有相同静态变量的多个副本。也就是这个原因，静态变量不能使用构造函数进行初始化</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">Apple</span>()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  \t\t<span class=\"comment\">//do nothing  </span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Apple obj1;</span><br><span class=\"line\">  Apple obj2;</span><br><span class=\"line\">  obj1.i = <span class=\"number\">2</span>;</span><br><span class=\"line\">  obj2.i = <span class=\"number\">3</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  cout&lt;&lt;obj1.i&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;obj2.i&lt;&lt;endl;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output:</span></span><br><span class=\"line\">Undefined symbols <span class=\"keyword\">for</span> architecture x86_64:</span><br><span class=\"line\">  <span class=\"string\">&quot;Apple::i&quot;</span>, referenced from:</span><br><span class=\"line\">      _main in class_static-b4ba1a.o</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<ul>\n<li><p>上面尝试为多个对象创建多个静态变量的副本,最终的结果是错误的，正确的：</p>\n<p>类中的静态变量应由用户使用类外的类名和范围解析运算符显式初始化。</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">Apple</span>()&#123;&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> Apple::i = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Apple obj;</span><br><span class=\"line\">  </span><br><span class=\"line\">  cout &lt;&lt;obj.i&lt;&lt;endl;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><p><b>类对象为静态</b></p>\n<p>和变量的static属性一样，声明对象时static修饰可以让对象的生命周期直到程序结束。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如下程序的对象是非静态的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i ;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \t<span class=\"built_in\">Apple</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      i = <span class=\"number\">0</span>;</span><br><span class=\"line\">      cout&lt;&lt;<span class=\"string\">&quot;in constructor&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ~<span class=\"built_in\">Apple</span>()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;in destructor&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x == <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Apple obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  cout&lt;&lt;<span class=\"string\">&quot;end of main&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output:</span></span><br><span class=\"line\">in constructor</span><br><span class=\"line\">in destructor</span><br><span class=\"line\">end of main</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//如果main函数中这样做：</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(x == <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Apple obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output:</span></span><br><span class=\"line\">in constructor</span><br><span class=\"line\">end of main</span><br><span class=\"line\">in destructor</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//main函数结束后调用析构函数，静态对象的范围贯穿程序的生命周期</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>类成员函数为静态</p>\n<ul>\n<li>类中的静态函数和静态成员一样，也不依赖于类的对象，我们使用类名加范围解析运算符来调用静态成员函数</li>\n</ul>\n<ul>\n<li>允许静态成员函数仅访问静态数据成员或者其他静态成员函数，它们无法访问类的非静态数据成员或者成员函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printMSG</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;welcome&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mian</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Apple::<span class=\"built_in\">printMSG</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output</span></span><br><span class=\"line\">welcome</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"综合举例\"><a href=\"#综合举例\" class=\"headerlink\" title=\"综合举例\"></a>综合举例</h3><ul>\n<li>TestStatic.h</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> std::cout;</span><br><span class=\"line\"><span class=\"keyword\">using</span> std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStatic</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">TestStatic</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func3</span><span class=\"params\">(<span class=\"keyword\">const</span> TestStatic&amp; obj)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num4 = <span class=\"number\">99</span>;<span class=\"comment\">//又要实现共享，又要不可变，直接类内初始化</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num1;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num2;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num3;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TestStatic.h</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;TestStatic.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.静态变量的初始化,在类内声明，在类外定义，区分作用域控制符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> TestStatic::num3 = <span class=\"number\">300</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> TestStatic::num2 = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TestStatic::<span class=\"built_in\">TestStatic</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;num1 = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestStatic::func1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;num1 = &quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;num1 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;通过成员函数调用num2 = &quot;</span> &lt;&lt; TestStatic::num2 &lt;&lt; endl;<span class=\"comment\">//类内访问private </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestStatic::func2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;l类中的静态函数，用于管理类中的静态数据&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestStatic::func3</span><span class=\"params\">(<span class=\"keyword\">const</span> TestStatic&amp; obj)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt;<span class=\"string\">&quot;用对象访问非静态变量&quot;</span>&lt;&lt; obj.num1 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>main.cpp</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;TestStatic.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"comment\">//静态成员 在编译的时候已经分配内存，那个时候对象还没有创建</span></span><br><span class=\"line\"><span class=\"comment\">//类内声明，类外定义</span></span><br><span class=\"line\"><span class=\"comment\">// className::static_func    className::static_value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态成员变量在各个对象中传递信息</span></span><br><span class=\"line\"><span class=\"comment\">//静态成员函数用来管理静态变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//----------------------</span></span><br><span class=\"line\"><span class=\"comment\">//1.静态全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> dd;<span class=\"comment\">//静态区（全局区）.bss;=0;定义到文件结尾</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> TT</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.静态局部变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> dd2;<span class=\"comment\">//静态区（全局区）.bss;=0;定义到作用域结束</span></span><br><span class=\"line\">\t<span class=\"comment\">//作用域结束也不会销毁，会直到程序结束</span></span><br><span class=\"line\">\t<span class=\"comment\">//再次被调用的时候，值是不变的</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3.静态函数：限制在本文件使用，在别的文件中不可调用</span></span><br><span class=\"line\"><span class=\"comment\">//不要在CPP中声明 非static 全局函数</span></span><br><span class=\"line\"><span class=\"comment\">//不要在H中声明static函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sfunc1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; global static func&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; TT &quot;</span> &lt;&lt; TT::dd2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTestStatic ts1;</span><br><span class=\"line\">\t<span class=\"comment\">//调用static var</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;通过对象直接调用&quot;</span> &lt;&lt; ts1.num2 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;通过类的作用域调用&quot;</span> &lt;&lt; TestStatic::num2 &lt;&lt; endl;</span><br><span class=\"line\">\tts1.<span class=\"built_in\">func1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;dd = &quot;</span>&lt;&lt;dd &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">sfunc1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tTestStatic::<span class=\"built_in\">func2</span>();</span><br><span class=\"line\">\tTestStatic::<span class=\"built_in\">func3</span>(ts1);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;出了作用域访问局部static变量 dd = &quot;</span> &lt;&lt; TT::dd2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;const static value = &quot;</span> &lt;&lt; ts1.num4 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"三次握手-四次挥手","date":"2020-06-09T16:00:00.000Z","keywords":"底层，TCP","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gsa3cx0bbqj314k0kadh2.jpg","sticky":2,"_content":"\n### 1.TCP\n\n​\tTCP 是一种面向连接的{% label 单播的 blue %}，可靠的，流式传输协议，位于网络模型的传输层，为应用程序间提供数据传输。\n\n### 2.TCP 连接的建立和终止\n\n{% tabs test %}\n<!-- tab 三次握手 -->\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa4ckwmfwj30l00hnmyy.jpg\" alt=\"TCP三次握手\" style=\"zoom:80%;\" />\n\n<!-- endtab -->\n\n<!-- tab 四次挥手 -->\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa5pfte0gj30lt0kjacc.jpg\" alt=\"四次挥手\" style=\"zoom:80%;\" />\n\n<!-- endtab -->\n{% endtabs %}\n\n{% label TCP建立连接-三次握手 green %}\n\n- 1.服务器调用{% label socket green %},{% label bind green %},{% label listen green %}完成初始化，服务器做好准备等待外部的TCP连接的到来，这种方式为{% label 被动打开 pink %}，这个时候服务器处于{% label LISTEN pink %}状态，等待客户端的连接请求。\n- 2.客户端通过{% label connect green %}发起{% label 主动打开 pink %}，向服务器发出连接请求，发送请求标识位SYN=1，同时发送初始化序号seq=x.SYN报文不允许携带数据，消耗一个序号。此时客户端进入{% label SYN-SEND pink %}状态\n- 3.服务器接收到客户端的请求，需要确认客户端的报文端，在确认报文中把SYN和ACK都置为1。确认号是：ack = x+1,同时服务器向客户端发起连接请求，初始化序号seq=y.服务器进入{% label SYN-RECVIVED(同步收到) pink %}状态。\n- 4.客户端在收到服务器发出的响应后，给出确认连接，置ACK=1，seq =y+1,ack=y+1.此时客户端进入{% label ESTABLISHED  pink %}状态.\n- 5.服务器收到客户端的确认后，也进入了{% label ESTABLISHED  pink %}状态.           \n\n> 总结：\n>\n> 服务器状态变化：LISTEN--->SENT-RECVIVED--->ESTABLISHED\n>\n> 客户端状态变化：SYN-SEND--->ESTABLISHED     \n\n\n\n{% label TCP断开连接-四次挥手 green %}\n\n- 1.客户端发出断开连接请求，停止发送数据，{% label 主动关闭TCP连接 pink %}。客户端发送FIN，请求断开连接，序号为seq=u,此时客户端进入{% label FIN-WAIT-1(终止等待1) pink %}状态\n- 2.服务器接收到客户端的断开连接请求，发出确认报文，置ACK=1.生成自己的序号seq=v,回复ack=u+1.服务器进入{% label  CLOSE-WAIT(关闭等待) pink %}状态\n- 3.客户端收到服务器的确认后，就会进入{% label FIN-WAIT-2(终止等待2) pink %}状态。\n- 4.服务器发出断开连接的FIN，发送完断开连接请求之后，服务器主动进入了{% label LAST-ACK(最后确认) pink %}状态。\n- 5.客户端收到服务器的断开连接请求，客户端发出确认断开连接。客户端进入{% label TIME_WAIT(时间等待) pink %}阶段，经过{% label 2MSL pink %}，客户端进入{% label CLOSED pink %}状态。\n- 6.服务器收到客户端的断开连接确认后，进入{% label CLOSED pink %}状态。服务器结素TCP连接的时间要比客户端早。\n\n### 3.TCP半关闭\n\n​\t{% label TCP半关闭 pink %}指关闭了数据流的一个传输方向。在TCP半关闭的场景：我已经完成了数据发送，给对方发送了FIN，此时就是处于半关闭状态，这个状态下，我还继续可以接受对方的数据，但是我无法发送数据，知道对方发给我一个FIN，这个状态才会发生变化。\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa5p65xobj30l20lbtat.jpg\" style=\"zoom:80%;\" />\n\n\n\n```c\n//设置半关闭的状态\n#include <sys/socket.h>\nint shutdown(int sockfd,int how);\n```\n\n- 参数：                  \n\n  - sockfd: 要操作的文件描述符（socket的返回值）\n  - how\n    - SHUT_RD 关闭文件描述符对应的读操作\n    - SHUT_WR 关闭文件描述符对应的写操作\n    - SHUT_RDWR 关闭文件描述符对应的读写操作\n\n  - 返回值：\n\n    - 成功 0 ，失败 -1\n\n      \n\n### 4.TIME_WAIT状态\n\n​\t主动关闭连接的一方会进入TIME_WAIT状态。这个状态会等待2MSL，也就是最大段生存周期时间的两倍。\n\nMSL是TCP段期望的最大生存时间。也就是网络中存在的最长时间。当TCP发送完最后的ACK后，等待2MSL时间后才会退出，这样能够让TCP重新发送最终的ACK以避免丢失的情况。重新发送最终的 ACK 并不是因为客户端要重传了ACK，而是因为服务器重传了 FIN，服务器经常回发送 FIN，因为它需要 ACK 的响应才能够关闭连接，如果生存时间超过了 2MSL 的话，客户端就会发送 RST，使服务端出错。（主动关闭方重新发送的最终ACK，是因为被动关闭方重传了它的FIN。事实上，被动关闭方总是重传FIN直到它收到一个最终的ACK。）\n\n\n\n```c\n//由于2MSL的等待时间，所以一个端口段时间的启用，会报端口已占用，无法启动服务器\n//设置端口复用\n\nint setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);\n/*\nsockfd 要操作的文件描述符（socket的返回值）\nlevel:端口复用需要使用 SOL_SOCKET 宏\noptname: SO_REUSEADDR 或者 SO_REUSEPORT\noptval: 0 不设置。1设置\noptlen: optval 指针指向的内存大小 sizeof (int)\n\nint op = 1;\nsetsockopt(fd,SOL_SOCKET,SO_REUSEADDR,op,sizeof(op));\n\n*/\n```\n\n\n\n### 5.状态转换\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa6n0twhrj30rs0teaew.jpg\" alt=\"TCP状态转换图\" style=\"zoom:67%;\" />\n\n\n\n{% label 客户端 green %}\n\n- 第一次握手：发送 SYN，没有状态 -> SYN_SENT\n- 第二次握手：收到回复的 ACK，SYN_SENT -> ESTABLISHED\n- 主动断开连接，第一次挥手发送 FIN，状态 ESTABLISHED -> FIN_WAIT_1\n- 第二次挥手，收到 ACK，状态 FIN_WAIT_1 -> FIN_WAIT_2\n- 第三次挥手，收到 FIN，状态 FIN_WAIT_2 -> TIME_WAIT\n- 第四次挥手，回复 ACK，等待 2 倍报文时长之后，状态 TIME_WAIT -> 没有状态\n\n{% label 服务器 green %}\n启动监听，没有状态 -> LISTEN\n第一次握手，收到 SYN，状态 LISTEN -> SYN_RCVD\n第三次握手，收到 ACK，状态 SYN_RCVD -> ESTABLISHED\n收到断开连接请求，第一次挥手状态 ESTABLISHED -> CLOSE_WAIT\n第三次挥手，发送 FIN 请求和客户端断开连接，状态 CLOSE_WAIT -> LAST_ACK\n第四次挥手，收到 ACK，状态 LAST_ACK -> 无状态(没有了)\n\n\n","source":"_posts/三次握手-四次挥手.md","raw":"---\ntitle: 三次握手-四次挥手\ndate: 2020-06-10\ntag:\n  - 网络\n  - 底层\ncategories:\n  - Linux\nkeywords: \"底层，TCP\"\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gsa3cx0bbqj314k0kadh2.jpg\nsticky: 2\n---\n\n### 1.TCP\n\n​\tTCP 是一种面向连接的{% label 单播的 blue %}，可靠的，流式传输协议，位于网络模型的传输层，为应用程序间提供数据传输。\n\n### 2.TCP 连接的建立和终止\n\n{% tabs test %}\n<!-- tab 三次握手 -->\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa4ckwmfwj30l00hnmyy.jpg\" alt=\"TCP三次握手\" style=\"zoom:80%;\" />\n\n<!-- endtab -->\n\n<!-- tab 四次挥手 -->\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa5pfte0gj30lt0kjacc.jpg\" alt=\"四次挥手\" style=\"zoom:80%;\" />\n\n<!-- endtab -->\n{% endtabs %}\n\n{% label TCP建立连接-三次握手 green %}\n\n- 1.服务器调用{% label socket green %},{% label bind green %},{% label listen green %}完成初始化，服务器做好准备等待外部的TCP连接的到来，这种方式为{% label 被动打开 pink %}，这个时候服务器处于{% label LISTEN pink %}状态，等待客户端的连接请求。\n- 2.客户端通过{% label connect green %}发起{% label 主动打开 pink %}，向服务器发出连接请求，发送请求标识位SYN=1，同时发送初始化序号seq=x.SYN报文不允许携带数据，消耗一个序号。此时客户端进入{% label SYN-SEND pink %}状态\n- 3.服务器接收到客户端的请求，需要确认客户端的报文端，在确认报文中把SYN和ACK都置为1。确认号是：ack = x+1,同时服务器向客户端发起连接请求，初始化序号seq=y.服务器进入{% label SYN-RECVIVED(同步收到) pink %}状态。\n- 4.客户端在收到服务器发出的响应后，给出确认连接，置ACK=1，seq =y+1,ack=y+1.此时客户端进入{% label ESTABLISHED  pink %}状态.\n- 5.服务器收到客户端的确认后，也进入了{% label ESTABLISHED  pink %}状态.           \n\n> 总结：\n>\n> 服务器状态变化：LISTEN--->SENT-RECVIVED--->ESTABLISHED\n>\n> 客户端状态变化：SYN-SEND--->ESTABLISHED     \n\n\n\n{% label TCP断开连接-四次挥手 green %}\n\n- 1.客户端发出断开连接请求，停止发送数据，{% label 主动关闭TCP连接 pink %}。客户端发送FIN，请求断开连接，序号为seq=u,此时客户端进入{% label FIN-WAIT-1(终止等待1) pink %}状态\n- 2.服务器接收到客户端的断开连接请求，发出确认报文，置ACK=1.生成自己的序号seq=v,回复ack=u+1.服务器进入{% label  CLOSE-WAIT(关闭等待) pink %}状态\n- 3.客户端收到服务器的确认后，就会进入{% label FIN-WAIT-2(终止等待2) pink %}状态。\n- 4.服务器发出断开连接的FIN，发送完断开连接请求之后，服务器主动进入了{% label LAST-ACK(最后确认) pink %}状态。\n- 5.客户端收到服务器的断开连接请求，客户端发出确认断开连接。客户端进入{% label TIME_WAIT(时间等待) pink %}阶段，经过{% label 2MSL pink %}，客户端进入{% label CLOSED pink %}状态。\n- 6.服务器收到客户端的断开连接确认后，进入{% label CLOSED pink %}状态。服务器结素TCP连接的时间要比客户端早。\n\n### 3.TCP半关闭\n\n​\t{% label TCP半关闭 pink %}指关闭了数据流的一个传输方向。在TCP半关闭的场景：我已经完成了数据发送，给对方发送了FIN，此时就是处于半关闭状态，这个状态下，我还继续可以接受对方的数据，但是我无法发送数据，知道对方发给我一个FIN，这个状态才会发生变化。\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa5p65xobj30l20lbtat.jpg\" style=\"zoom:80%;\" />\n\n\n\n```c\n//设置半关闭的状态\n#include <sys/socket.h>\nint shutdown(int sockfd,int how);\n```\n\n- 参数：                  \n\n  - sockfd: 要操作的文件描述符（socket的返回值）\n  - how\n    - SHUT_RD 关闭文件描述符对应的读操作\n    - SHUT_WR 关闭文件描述符对应的写操作\n    - SHUT_RDWR 关闭文件描述符对应的读写操作\n\n  - 返回值：\n\n    - 成功 0 ，失败 -1\n\n      \n\n### 4.TIME_WAIT状态\n\n​\t主动关闭连接的一方会进入TIME_WAIT状态。这个状态会等待2MSL，也就是最大段生存周期时间的两倍。\n\nMSL是TCP段期望的最大生存时间。也就是网络中存在的最长时间。当TCP发送完最后的ACK后，等待2MSL时间后才会退出，这样能够让TCP重新发送最终的ACK以避免丢失的情况。重新发送最终的 ACK 并不是因为客户端要重传了ACK，而是因为服务器重传了 FIN，服务器经常回发送 FIN，因为它需要 ACK 的响应才能够关闭连接，如果生存时间超过了 2MSL 的话，客户端就会发送 RST，使服务端出错。（主动关闭方重新发送的最终ACK，是因为被动关闭方重传了它的FIN。事实上，被动关闭方总是重传FIN直到它收到一个最终的ACK。）\n\n\n\n```c\n//由于2MSL的等待时间，所以一个端口段时间的启用，会报端口已占用，无法启动服务器\n//设置端口复用\n\nint setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);\n/*\nsockfd 要操作的文件描述符（socket的返回值）\nlevel:端口复用需要使用 SOL_SOCKET 宏\noptname: SO_REUSEADDR 或者 SO_REUSEPORT\noptval: 0 不设置。1设置\noptlen: optval 指针指向的内存大小 sizeof (int)\n\nint op = 1;\nsetsockopt(fd,SOL_SOCKET,SO_REUSEADDR,op,sizeof(op));\n\n*/\n```\n\n\n\n### 5.状态转换\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa6n0twhrj30rs0teaew.jpg\" alt=\"TCP状态转换图\" style=\"zoom:67%;\" />\n\n\n\n{% label 客户端 green %}\n\n- 第一次握手：发送 SYN，没有状态 -> SYN_SENT\n- 第二次握手：收到回复的 ACK，SYN_SENT -> ESTABLISHED\n- 主动断开连接，第一次挥手发送 FIN，状态 ESTABLISHED -> FIN_WAIT_1\n- 第二次挥手，收到 ACK，状态 FIN_WAIT_1 -> FIN_WAIT_2\n- 第三次挥手，收到 FIN，状态 FIN_WAIT_2 -> TIME_WAIT\n- 第四次挥手，回复 ACK，等待 2 倍报文时长之后，状态 TIME_WAIT -> 没有状态\n\n{% label 服务器 green %}\n启动监听，没有状态 -> LISTEN\n第一次握手，收到 SYN，状态 LISTEN -> SYN_RCVD\n第三次握手，收到 ACK，状态 SYN_RCVD -> ESTABLISHED\n收到断开连接请求，第一次挥手状态 ESTABLISHED -> CLOSE_WAIT\n第三次挥手，发送 FIN 请求和客户端断开连接，状态 CLOSE_WAIT -> LAST_ACK\n第四次挥手，收到 ACK，状态 LAST_ACK -> 无状态(没有了)\n\n\n","slug":"三次握手-四次挥手","published":1,"updated":"2021-07-08T20:12:30.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xf3000wk057ff19ch6h","content":"<h3 id=\"1-TCP\"><a href=\"#1-TCP\" class=\"headerlink\" title=\"1.TCP\"></a>1.TCP</h3><p>​    TCP 是一种面向连接的<mark class=\"hl-label blue\">单播的</mark> ，可靠的，流式传输协议，位于网络模型的传输层，为应用程序间提供数据传输。</p>\n<h3 id=\"2-TCP-连接的建立和终止\"><a href=\"#2-TCP-连接的建立和终止\" class=\"headerlink\" title=\"2.TCP 连接的建立和终止\"></a>2.TCP 连接的建立和终止</h3><div class=\"tabs\" id=\"test\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#test-1\">三次握手</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#test-2\">四次挥手</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"test-1\"><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa4ckwmfwj30l00hnmyy.jpg\" alt=\"TCP三次握手\" style=\"zoom:80%;\" /><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"test-2\"><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa5pfte0gj30lt0kjacc.jpg\" alt=\"四次挥手\" style=\"zoom:80%;\" /><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<mark class=\"hl-label green\">TCP建立连接-三次握手</mark> \n\n<ul>\n<li>1.服务器调用<mark class=\"hl-label green\">socket</mark> ,<mark class=\"hl-label green\">bind</mark> ,<mark class=\"hl-label green\">listen</mark> 完成初始化，服务器做好准备等待外部的TCP连接的到来，这种方式为<mark class=\"hl-label pink\">被动打开</mark> ，这个时候服务器处于<mark class=\"hl-label pink\">LISTEN</mark> 状态，等待客户端的连接请求。</li>\n<li>2.客户端通过<mark class=\"hl-label green\">connect</mark> 发起<mark class=\"hl-label pink\">主动打开</mark> ，向服务器发出连接请求，发送请求标识位SYN=1，同时发送初始化序号seq=x.SYN报文不允许携带数据，消耗一个序号。此时客户端进入<mark class=\"hl-label pink\">SYN-SEND</mark> 状态</li>\n<li>3.服务器接收到客户端的请求，需要确认客户端的报文端，在确认报文中把SYN和ACK都置为1。确认号是：ack = x+1,同时服务器向客户端发起连接请求，初始化序号seq=y.服务器进入<mark class=\"hl-label pink\">SYN-RECVIVED(同步收到)</mark> 状态。</li>\n<li>4.客户端在收到服务器发出的响应后，给出确认连接，置ACK=1，seq =y+1,ack=y+1.此时客户端进入<mark class=\"hl-label pink\">ESTABLISHED</mark> 状态.</li>\n<li>5.服务器收到客户端的确认后，也进入了<mark class=\"hl-label pink\">ESTABLISHED</mark> 状态.           </li>\n</ul>\n<blockquote>\n<p>总结：</p>\n<p>服务器状态变化：LISTEN—&gt;SENT-RECVIVED—&gt;ESTABLISHED</p>\n<p>客户端状态变化：SYN-SEND—&gt;ESTABLISHED     </p>\n</blockquote>\n<mark class=\"hl-label green\">TCP断开连接-四次挥手</mark> \n\n<ul>\n<li>1.客户端发出断开连接请求，停止发送数据，<mark class=\"hl-label pink\">主动关闭TCP连接</mark> 。客户端发送FIN，请求断开连接，序号为seq=u,此时客户端进入<mark class=\"hl-label pink\">FIN-WAIT-1(终止等待1)</mark> 状态</li>\n<li>2.服务器接收到客户端的断开连接请求，发出确认报文，置ACK=1.生成自己的序号seq=v,回复ack=u+1.服务器进入<mark class=\"hl-label pink\">CLOSE-WAIT(关闭等待)</mark> 状态</li>\n<li>3.客户端收到服务器的确认后，就会进入<mark class=\"hl-label pink\">FIN-WAIT-2(终止等待2)</mark> 状态。</li>\n<li>4.服务器发出断开连接的FIN，发送完断开连接请求之后，服务器主动进入了<mark class=\"hl-label pink\">LAST-ACK(最后确认)</mark> 状态。</li>\n<li>5.客户端收到服务器的断开连接请求，客户端发出确认断开连接。客户端进入<mark class=\"hl-label pink\">TIME_WAIT(时间等待)</mark> 阶段，经过<mark class=\"hl-label pink\">2MSL</mark> ，客户端进入<mark class=\"hl-label pink\">CLOSED</mark> 状态。</li>\n<li>6.服务器收到客户端的断开连接确认后，进入<mark class=\"hl-label pink\">CLOSED</mark> 状态。服务器结素TCP连接的时间要比客户端早。</li>\n</ul>\n<h3 id=\"3-TCP半关闭\"><a href=\"#3-TCP半关闭\" class=\"headerlink\" title=\"3.TCP半关闭\"></a>3.TCP半关闭</h3><p>​    <mark class=\"hl-label pink\">TCP半关闭</mark> 指关闭了数据流的一个传输方向。在TCP半关闭的场景：我已经完成了数据发送，给对方发送了FIN，此时就是处于半关闭状态，这个状态下，我还继续可以接受对方的数据，但是我无法发送数据，知道对方发给我一个FIN，这个状态才会发生变化。</p>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa5p65xobj30l20lbtat.jpg\" style=\"zoom:80%;\" />\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置半关闭的状态</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shutdown</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd,<span class=\"keyword\">int</span> how)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>参数：                  </p>\n<ul>\n<li><p>sockfd: 要操作的文件描述符（socket的返回值）</p>\n</li>\n<li><p>how</p>\n<ul>\n<li>SHUT_RD 关闭文件描述符对应的读操作</li>\n<li>SHUT_WR 关闭文件描述符对应的写操作</li>\n<li>SHUT_RDWR 关闭文件描述符对应的读写操作</li>\n</ul>\n</li>\n<li><p>返回值：</p>\n<ul>\n<li>成功 0 ，失败 -1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-TIME-WAIT状态\"><a href=\"#4-TIME-WAIT状态\" class=\"headerlink\" title=\"4.TIME_WAIT状态\"></a>4.TIME_WAIT状态</h3><p>​    主动关闭连接的一方会进入TIME_WAIT状态。这个状态会等待2MSL，也就是最大段生存周期时间的两倍。</p>\n<p>MSL是TCP段期望的最大生存时间。也就是网络中存在的最长时间。当TCP发送完最后的ACK后，等待2MSL时间后才会退出，这样能够让TCP重新发送最终的ACK以避免丢失的情况。重新发送最终的 ACK 并不是因为客户端要重传了ACK，而是因为服务器重传了 FIN，服务器经常回发送 FIN，因为它需要 ACK 的响应才能够关闭连接，如果生存时间超过了 2MSL 的话，客户端就会发送 RST，使服务端出错。（主动关闭方重新发送的最终ACK，是因为被动关闭方重传了它的FIN。事实上，被动关闭方总是重传FIN直到它收到一个最终的ACK。）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//由于2MSL的等待时间，所以一个端口段时间的启用，会报端口已占用，无法启动服务器</span></span><br><span class=\"line\"><span class=\"comment\">//设置端口复用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setsockopt</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">int</span> level, <span class=\"keyword\">int</span> optname, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *optval, <span class=\"keyword\">socklen_t</span> optlen)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">sockfd 要操作的文件描述符（socket的返回值）</span></span><br><span class=\"line\"><span class=\"comment\">level:端口复用需要使用 SOL_SOCKET 宏</span></span><br><span class=\"line\"><span class=\"comment\">optname: SO_REUSEADDR 或者 SO_REUSEPORT</span></span><br><span class=\"line\"><span class=\"comment\">optval: 0 不设置。1设置</span></span><br><span class=\"line\"><span class=\"comment\">optlen: optval 指针指向的内存大小 sizeof (int)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">int op = 1;</span></span><br><span class=\"line\"><span class=\"comment\">setsockopt(fd,SOL_SOCKET,SO_REUSEADDR,op,sizeof(op));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-状态转换\"><a href=\"#5-状态转换\" class=\"headerlink\" title=\"5.状态转换\"></a>5.状态转换</h3><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa6n0twhrj30rs0teaew.jpg\" alt=\"TCP状态转换图\" style=\"zoom:67%;\" />\n\n\n\n<mark class=\"hl-label green\">客户端</mark> \n\n<ul>\n<li>第一次握手：发送 SYN，没有状态 -&gt; SYN_SENT</li>\n<li>第二次握手：收到回复的 ACK，SYN_SENT -&gt; ESTABLISHED</li>\n<li>主动断开连接，第一次挥手发送 FIN，状态 ESTABLISHED -&gt; FIN_WAIT_1</li>\n<li>第二次挥手，收到 ACK，状态 FIN_WAIT_1 -&gt; FIN_WAIT_2</li>\n<li>第三次挥手，收到 FIN，状态 FIN_WAIT_2 -&gt; TIME_WAIT</li>\n<li>第四次挥手，回复 ACK，等待 2 倍报文时长之后，状态 TIME_WAIT -&gt; 没有状态</li>\n</ul>\n<mark class=\"hl-label green\">服务器</mark> \n<p>启动监听，没有状态 -&gt; LISTEN<br>第一次握手，收到 SYN，状态 LISTEN -&gt; SYN_RCVD<br>第三次握手，收到 ACK，状态 SYN_RCVD -&gt; ESTABLISHED<br>收到断开连接请求，第一次挥手状态 ESTABLISHED -&gt; CLOSE_WAIT<br>第三次挥手，发送 FIN 请求和客户端断开连接，状态 CLOSE_WAIT -&gt; LAST_ACK<br>第四次挥手，收到 ACK，状态 LAST_ACK -&gt; 无状态(没有了)</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"1-TCP\"><a href=\"#1-TCP\" class=\"headerlink\" title=\"1.TCP\"></a>1.TCP</h3><p>​    TCP 是一种面向连接的<mark class=\"hl-label blue\">单播的</mark> ，可靠的，流式传输协议，位于网络模型的传输层，为应用程序间提供数据传输。</p>\n<h3 id=\"2-TCP-连接的建立和终止\"><a href=\"#2-TCP-连接的建立和终止\" class=\"headerlink\" title=\"2.TCP 连接的建立和终止\"></a>2.TCP 连接的建立和终止</h3><div class=\"tabs\" id=\"test\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#test-1\">三次握手</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#test-2\">四次挥手</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"test-1\"><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa4ckwmfwj30l00hnmyy.jpg\" alt=\"TCP三次握手\" style=\"zoom:80%;\" /><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"test-2\"><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa5pfte0gj30lt0kjacc.jpg\" alt=\"四次挥手\" style=\"zoom:80%;\" /><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<mark class=\"hl-label green\">TCP建立连接-三次握手</mark> \n\n<ul>\n<li>1.服务器调用<mark class=\"hl-label green\">socket</mark> ,<mark class=\"hl-label green\">bind</mark> ,<mark class=\"hl-label green\">listen</mark> 完成初始化，服务器做好准备等待外部的TCP连接的到来，这种方式为<mark class=\"hl-label pink\">被动打开</mark> ，这个时候服务器处于<mark class=\"hl-label pink\">LISTEN</mark> 状态，等待客户端的连接请求。</li>\n<li>2.客户端通过<mark class=\"hl-label green\">connect</mark> 发起<mark class=\"hl-label pink\">主动打开</mark> ，向服务器发出连接请求，发送请求标识位SYN=1，同时发送初始化序号seq=x.SYN报文不允许携带数据，消耗一个序号。此时客户端进入<mark class=\"hl-label pink\">SYN-SEND</mark> 状态</li>\n<li>3.服务器接收到客户端的请求，需要确认客户端的报文端，在确认报文中把SYN和ACK都置为1。确认号是：ack = x+1,同时服务器向客户端发起连接请求，初始化序号seq=y.服务器进入<mark class=\"hl-label pink\">SYN-RECVIVED(同步收到)</mark> 状态。</li>\n<li>4.客户端在收到服务器发出的响应后，给出确认连接，置ACK=1，seq =y+1,ack=y+1.此时客户端进入<mark class=\"hl-label pink\">ESTABLISHED</mark> 状态.</li>\n<li>5.服务器收到客户端的确认后，也进入了<mark class=\"hl-label pink\">ESTABLISHED</mark> 状态.           </li>\n</ul>\n<blockquote>\n<p>总结：</p>\n<p>服务器状态变化：LISTEN—&gt;SENT-RECVIVED—&gt;ESTABLISHED</p>\n<p>客户端状态变化：SYN-SEND—&gt;ESTABLISHED     </p>\n</blockquote>\n<mark class=\"hl-label green\">TCP断开连接-四次挥手</mark> \n\n<ul>\n<li>1.客户端发出断开连接请求，停止发送数据，<mark class=\"hl-label pink\">主动关闭TCP连接</mark> 。客户端发送FIN，请求断开连接，序号为seq=u,此时客户端进入<mark class=\"hl-label pink\">FIN-WAIT-1(终止等待1)</mark> 状态</li>\n<li>2.服务器接收到客户端的断开连接请求，发出确认报文，置ACK=1.生成自己的序号seq=v,回复ack=u+1.服务器进入<mark class=\"hl-label pink\">CLOSE-WAIT(关闭等待)</mark> 状态</li>\n<li>3.客户端收到服务器的确认后，就会进入<mark class=\"hl-label pink\">FIN-WAIT-2(终止等待2)</mark> 状态。</li>\n<li>4.服务器发出断开连接的FIN，发送完断开连接请求之后，服务器主动进入了<mark class=\"hl-label pink\">LAST-ACK(最后确认)</mark> 状态。</li>\n<li>5.客户端收到服务器的断开连接请求，客户端发出确认断开连接。客户端进入<mark class=\"hl-label pink\">TIME_WAIT(时间等待)</mark> 阶段，经过<mark class=\"hl-label pink\">2MSL</mark> ，客户端进入<mark class=\"hl-label pink\">CLOSED</mark> 状态。</li>\n<li>6.服务器收到客户端的断开连接确认后，进入<mark class=\"hl-label pink\">CLOSED</mark> 状态。服务器结素TCP连接的时间要比客户端早。</li>\n</ul>\n<h3 id=\"3-TCP半关闭\"><a href=\"#3-TCP半关闭\" class=\"headerlink\" title=\"3.TCP半关闭\"></a>3.TCP半关闭</h3><p>​    <mark class=\"hl-label pink\">TCP半关闭</mark> 指关闭了数据流的一个传输方向。在TCP半关闭的场景：我已经完成了数据发送，给对方发送了FIN，此时就是处于半关闭状态，这个状态下，我还继续可以接受对方的数据，但是我无法发送数据，知道对方发给我一个FIN，这个状态才会发生变化。</p>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa5p65xobj30l20lbtat.jpg\" style=\"zoom:80%;\" />\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置半关闭的状态</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shutdown</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd,<span class=\"keyword\">int</span> how)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>参数：                  </p>\n<ul>\n<li><p>sockfd: 要操作的文件描述符（socket的返回值）</p>\n</li>\n<li><p>how</p>\n<ul>\n<li>SHUT_RD 关闭文件描述符对应的读操作</li>\n<li>SHUT_WR 关闭文件描述符对应的写操作</li>\n<li>SHUT_RDWR 关闭文件描述符对应的读写操作</li>\n</ul>\n</li>\n<li><p>返回值：</p>\n<ul>\n<li>成功 0 ，失败 -1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-TIME-WAIT状态\"><a href=\"#4-TIME-WAIT状态\" class=\"headerlink\" title=\"4.TIME_WAIT状态\"></a>4.TIME_WAIT状态</h3><p>​    主动关闭连接的一方会进入TIME_WAIT状态。这个状态会等待2MSL，也就是最大段生存周期时间的两倍。</p>\n<p>MSL是TCP段期望的最大生存时间。也就是网络中存在的最长时间。当TCP发送完最后的ACK后，等待2MSL时间后才会退出，这样能够让TCP重新发送最终的ACK以避免丢失的情况。重新发送最终的 ACK 并不是因为客户端要重传了ACK，而是因为服务器重传了 FIN，服务器经常回发送 FIN，因为它需要 ACK 的响应才能够关闭连接，如果生存时间超过了 2MSL 的话，客户端就会发送 RST，使服务端出错。（主动关闭方重新发送的最终ACK，是因为被动关闭方重传了它的FIN。事实上，被动关闭方总是重传FIN直到它收到一个最终的ACK。）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//由于2MSL的等待时间，所以一个端口段时间的启用，会报端口已占用，无法启动服务器</span></span><br><span class=\"line\"><span class=\"comment\">//设置端口复用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setsockopt</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">int</span> level, <span class=\"keyword\">int</span> optname, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *optval, <span class=\"keyword\">socklen_t</span> optlen)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">sockfd 要操作的文件描述符（socket的返回值）</span></span><br><span class=\"line\"><span class=\"comment\">level:端口复用需要使用 SOL_SOCKET 宏</span></span><br><span class=\"line\"><span class=\"comment\">optname: SO_REUSEADDR 或者 SO_REUSEPORT</span></span><br><span class=\"line\"><span class=\"comment\">optval: 0 不设置。1设置</span></span><br><span class=\"line\"><span class=\"comment\">optlen: optval 指针指向的内存大小 sizeof (int)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">int op = 1;</span></span><br><span class=\"line\"><span class=\"comment\">setsockopt(fd,SOL_SOCKET,SO_REUSEADDR,op,sizeof(op));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-状态转换\"><a href=\"#5-状态转换\" class=\"headerlink\" title=\"5.状态转换\"></a>5.状态转换</h3><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsa6n0twhrj30rs0teaew.jpg\" alt=\"TCP状态转换图\" style=\"zoom:67%;\" />\n\n\n\n<mark class=\"hl-label green\">客户端</mark> \n\n<ul>\n<li>第一次握手：发送 SYN，没有状态 -&gt; SYN_SENT</li>\n<li>第二次握手：收到回复的 ACK，SYN_SENT -&gt; ESTABLISHED</li>\n<li>主动断开连接，第一次挥手发送 FIN，状态 ESTABLISHED -&gt; FIN_WAIT_1</li>\n<li>第二次挥手，收到 ACK，状态 FIN_WAIT_1 -&gt; FIN_WAIT_2</li>\n<li>第三次挥手，收到 FIN，状态 FIN_WAIT_2 -&gt; TIME_WAIT</li>\n<li>第四次挥手，回复 ACK，等待 2 倍报文时长之后，状态 TIME_WAIT -&gt; 没有状态</li>\n</ul>\n<mark class=\"hl-label green\">服务器</mark> \n<p>启动监听，没有状态 -&gt; LISTEN<br>第一次握手，收到 SYN，状态 LISTEN -&gt; SYN_RCVD<br>第三次握手，收到 ACK，状态 SYN_RCVD -&gt; ESTABLISHED<br>收到断开连接请求，第一次挥手状态 ESTABLISHED -&gt; CLOSE_WAIT<br>第三次挥手，发送 FIN 请求和客户端断开连接，状态 CLOSE_WAIT -&gt; LAST_ACK<br>第四次挥手，收到 ACK，状态 LAST_ACK -&gt; 无状态(没有了)</p>\n"},{"title":"可变参函数","date":"2021-03-14T16:00:00.000Z","cover":"https://tse3-mm.cn.bing.net/th/id/OIP-C.TbY-e9Tb8GByCgSu7VdXbAHaEN?pid=ImgDet&rs=1","sticky":2,"_content":"\n### C库宏实现\n\n```c\n#include <stdarg.h>\n\nvoid va_start(va_list ap,last_arg);\n参数：\n  \tap va_list 类型，va_start 函数用来初始化ap 变量，它用来存储通过 va_arg 获取额外参数时所必需的信息\n  \tlast_arg 是最后一个传递给函数已知的固定参数，即省略号之前的参数\n作用：\n  初始化ap变量\n调用时机：\n  在va_arg 和 va_end 之间被调用\n  \n//-------------------------------------\n  type va_arg(va_list ap,type)\n  \n 参数：\n  \tap va_start 初始化的变量\n  \ttype 参数列表中元素的类型\n 作用：\n  \t检索函数参数列表中类型为 type 的下一个参数。它无法判断检索到的参数是否是传给函数的最后一个参数。\n\n//-------------------------------------\nva_end 清理为ap保留的内存，如果在从函数返回之前没有调用 va_end，则结果为未定义。\n\n```\n\n\n\n```c\n//求和\nint sum(int count,...)\n{\n    va_list ap;\n    int sum = 0;\n\n    va_start(ap,count);\n\n    for(int i = 0;i<count;++i)\n    {\n        sum += va_arg(ap,int);\n    }\n\n    va_end(ap);\n\n    return sum;\n}\n\n//sum(3,12,2,1); //3 代表参数的个数 ，后面的每一个都是参数\n\n//该方法是极不安全的，宏本身无法提供任何安全性保证\n```\n\n\n\n### c++11 的initializer_list\n\n```c++\n#include <initializer_list>\nusing namespace std; // std 命名空间的\n\nint sum(initializer_list<int> ll)\n{\n    int sum = 0;\n    \n    for(auto p = ll.begin();p!=ll.end();++p)\n    {\n        sum += *p;\n    }\n\n    return sum;\n}\n\n//调用：\nsum({12,2,34,10}); //用{}括住参数\n\n//编译加上 -std=c++11\n```\n\n\n\n### 可变参数模板\n\n- 可变参数模板和普通模板的写法类似，用`...`表示0到多个不同类型的参数\n\n```c++\ntemplate<typename T>  //原始的不可变参数的形式\ntemplate<typename... T> //可变参数，0到多个\ntemplate<typename T1,typename... T2> //1到多个参数\n```\n\n- 打印多个不同类型的数据.      \n\n```c++\n#include <iostream>\n\nvoid print(){} //0个参数的调用函数\n\ntemplate<typename T,typename... T2>\nvoid print(const T& firstArg,const T2&... args)\n{\n  std::cout<<firstArg<<\"\\t除去第一个参数，后面可变参数的个数：\"<<sizeof...(args)<<std::endl;\n  std::cout << __PRETTY_FUNCTION__ << \"\\n\";\n  print(args...);\n}\n\nint main(void)\n{\n  print(\"hello\",1,22.34);\n  return. 0;\n}\n\n//编译 g++ xxx.cpp -std=c++11\n\n//out:\n/*\nhello   除去第一个参数，后面可变参数的个数： 2\nvoid print(const T &, const T2 &...) [T = char [6], T2 = <int, double>]\n1       除去第一个参数，后面可变参数的个数： 1\nvoid print(const T &, const T2 &...) [T = int, T2 = <double>]\n22.34   除去第一个参数，后面可变参数的个数： 0\nvoid print(const T &, const T2 &...) [T = double, T2 = <>]\n*/\n\n\n\n//说明：\n//sizeof...(args) 获取args的参数个数\n\n```\n\n- 比较多个数的大小\n\n```c++\n#include <iostream>\nusing namespace std;\n\ntemplate<typename T>\nT myMax(T value)\n{\n    return value;\n}\n\ntemplate<typename T,typename...Type>\nT myMax(T firstArg,Type...args)\n{\n    cout << __PRETTY_FUNCTION__ << \"\\n\";\n    return max(firstArg,myMax(args...));\n    \n}\n\nint main(void)\n{\n\n    int max_num = myMax<int>(1,23,99,67,10);\n    cout<<max_num<<endl;\n    return 0;\n}\n\n//out\n/*\nT myMax(T, Type...) [T = int, Type = <int, int, int, int>]\nT myMax(T, Type...) [T = int, Type = <int, int, int>]\nT myMax(T, Type...) [T = int, Type = <int, int>]\nT myMax(T, Type...) [T = int, Type = <int>]\n99\n\n*/\n```\n\n","source":"_posts/可变参函数.md","raw":"---\ntitle: 可变参函数\ndate: 2021-03-15\ntags:\n  - 变参\ncategories:\n  - C++\ncover: https://tse3-mm.cn.bing.net/th/id/OIP-C.TbY-e9Tb8GByCgSu7VdXbAHaEN?pid=ImgDet&rs=1\nsticky: 2\n---\n\n### C库宏实现\n\n```c\n#include <stdarg.h>\n\nvoid va_start(va_list ap,last_arg);\n参数：\n  \tap va_list 类型，va_start 函数用来初始化ap 变量，它用来存储通过 va_arg 获取额外参数时所必需的信息\n  \tlast_arg 是最后一个传递给函数已知的固定参数，即省略号之前的参数\n作用：\n  初始化ap变量\n调用时机：\n  在va_arg 和 va_end 之间被调用\n  \n//-------------------------------------\n  type va_arg(va_list ap,type)\n  \n 参数：\n  \tap va_start 初始化的变量\n  \ttype 参数列表中元素的类型\n 作用：\n  \t检索函数参数列表中类型为 type 的下一个参数。它无法判断检索到的参数是否是传给函数的最后一个参数。\n\n//-------------------------------------\nva_end 清理为ap保留的内存，如果在从函数返回之前没有调用 va_end，则结果为未定义。\n\n```\n\n\n\n```c\n//求和\nint sum(int count,...)\n{\n    va_list ap;\n    int sum = 0;\n\n    va_start(ap,count);\n\n    for(int i = 0;i<count;++i)\n    {\n        sum += va_arg(ap,int);\n    }\n\n    va_end(ap);\n\n    return sum;\n}\n\n//sum(3,12,2,1); //3 代表参数的个数 ，后面的每一个都是参数\n\n//该方法是极不安全的，宏本身无法提供任何安全性保证\n```\n\n\n\n### c++11 的initializer_list\n\n```c++\n#include <initializer_list>\nusing namespace std; // std 命名空间的\n\nint sum(initializer_list<int> ll)\n{\n    int sum = 0;\n    \n    for(auto p = ll.begin();p!=ll.end();++p)\n    {\n        sum += *p;\n    }\n\n    return sum;\n}\n\n//调用：\nsum({12,2,34,10}); //用{}括住参数\n\n//编译加上 -std=c++11\n```\n\n\n\n### 可变参数模板\n\n- 可变参数模板和普通模板的写法类似，用`...`表示0到多个不同类型的参数\n\n```c++\ntemplate<typename T>  //原始的不可变参数的形式\ntemplate<typename... T> //可变参数，0到多个\ntemplate<typename T1,typename... T2> //1到多个参数\n```\n\n- 打印多个不同类型的数据.      \n\n```c++\n#include <iostream>\n\nvoid print(){} //0个参数的调用函数\n\ntemplate<typename T,typename... T2>\nvoid print(const T& firstArg,const T2&... args)\n{\n  std::cout<<firstArg<<\"\\t除去第一个参数，后面可变参数的个数：\"<<sizeof...(args)<<std::endl;\n  std::cout << __PRETTY_FUNCTION__ << \"\\n\";\n  print(args...);\n}\n\nint main(void)\n{\n  print(\"hello\",1,22.34);\n  return. 0;\n}\n\n//编译 g++ xxx.cpp -std=c++11\n\n//out:\n/*\nhello   除去第一个参数，后面可变参数的个数： 2\nvoid print(const T &, const T2 &...) [T = char [6], T2 = <int, double>]\n1       除去第一个参数，后面可变参数的个数： 1\nvoid print(const T &, const T2 &...) [T = int, T2 = <double>]\n22.34   除去第一个参数，后面可变参数的个数： 0\nvoid print(const T &, const T2 &...) [T = double, T2 = <>]\n*/\n\n\n\n//说明：\n//sizeof...(args) 获取args的参数个数\n\n```\n\n- 比较多个数的大小\n\n```c++\n#include <iostream>\nusing namespace std;\n\ntemplate<typename T>\nT myMax(T value)\n{\n    return value;\n}\n\ntemplate<typename T,typename...Type>\nT myMax(T firstArg,Type...args)\n{\n    cout << __PRETTY_FUNCTION__ << \"\\n\";\n    return max(firstArg,myMax(args...));\n    \n}\n\nint main(void)\n{\n\n    int max_num = myMax<int>(1,23,99,67,10);\n    cout<<max_num<<endl;\n    return 0;\n}\n\n//out\n/*\nT myMax(T, Type...) [T = int, Type = <int, int, int, int>]\nT myMax(T, Type...) [T = int, Type = <int, int, int>]\nT myMax(T, Type...) [T = int, Type = <int, int>]\nT myMax(T, Type...) [T = int, Type = <int>]\n99\n\n*/\n```\n\n","slug":"可变参函数","published":1,"updated":"2021-08-04T16:55:55.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xf5000yk0576afoc4jq","content":"<h3 id=\"C库宏实现\"><a href=\"#C库宏实现\" class=\"headerlink\" title=\"C库宏实现\"></a>C库宏实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">va_start</span><span class=\"params\">(va_list ap,last_arg)</span></span>;</span><br><span class=\"line\">参数：</span><br><span class=\"line\">  \tap va_list 类型，va_start 函数用来初始化ap 变量，它用来存储通过 va_arg 获取额外参数时所必需的信息</span><br><span class=\"line\">  \tlast_arg 是最后一个传递给函数已知的固定参数，即省略号之前的参数</span><br><span class=\"line\">作用：</span><br><span class=\"line\">  初始化ap变量</span><br><span class=\"line\">调用时机：</span><br><span class=\"line\">  在va_arg 和 va_end 之间被调用</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//-------------------------------------</span></span><br><span class=\"line\">  <span class=\"function\">type <span class=\"title\">va_arg</span><span class=\"params\">(va_list ap,type)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span></span><br><span class=\"line\"><span class=\"function\"> 参数：</span></span><br><span class=\"line\"><span class=\"function\">  \tap va_start 初始化的变量</span></span><br><span class=\"line\"><span class=\"function\">  \ttype 参数列表中元素的类型</span></span><br><span class=\"line\"><span class=\"function\"> 作用：</span></span><br><span class=\"line\"><span class=\"function\">  \t检索函数参数列表中类型为 type 的下一个参数。它无法判断检索到的参数是否是传给函数的最后一个参数。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//-------------------------------------</span></span></span><br><span class=\"line\"><span class=\"function\">va_end 清理为ap保留的内存，如果在从函数返回之前没有调用 va_end，则结果为未定义。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> count,...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    va_list ap;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    va_start(ap,count);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;count;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += va_arg(ap,<span class=\"keyword\">int</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    va_end(ap);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sum(3,12,2,1); //3 代表参数的个数 ，后面的每一个都是参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//该方法是极不安全的，宏本身无法提供任何安全性保证</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"c-11-的initializer-list\"><a href=\"#c-11-的initializer-list\" class=\"headerlink\" title=\"c++11 的initializer_list\"></a>c++11 的initializer_list</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;initializer_list&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; <span class=\"comment\">// std 命名空间的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(initializer_list&lt;<span class=\"keyword\">int</span>&gt; ll)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = ll.<span class=\"built_in\">begin</span>();p!=ll.<span class=\"built_in\">end</span>();++p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += *p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用：</span></span><br><span class=\"line\"><span class=\"built_in\">sum</span>(&#123;<span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">34</span>,<span class=\"number\">10</span>&#125;); <span class=\"comment\">//用&#123;&#125;括住参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编译加上 -std=c++11</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"可变参数模板\"><a href=\"#可变参数模板\" class=\"headerlink\" title=\"可变参数模板\"></a>可变参数模板</h3><ul>\n<li>可变参数模板和普通模板的写法类似，用<code>...</code>表示0到多个不同类型的参数</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;  <span class=\"comment\">//原始的不可变参数的形式</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span>... T&gt; <span class=\"comment\">//可变参数，0到多个</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T1,<span class=\"keyword\">typename</span>... T2&gt; <span class=\"comment\">//1到多个参数</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打印多个不同类型的数据.      </li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;&#125; <span class=\"comment\">//0个参数的调用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">typename</span>... T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; firstArg,<span class=\"keyword\">const</span> T2&amp;... args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  std::cout&lt;&lt;firstArg&lt;&lt;<span class=\"string\">&quot;\\t除去第一个参数，后面可变参数的个数：&quot;</span>&lt;&lt;<span class=\"keyword\">sizeof</span>...(args)&lt;&lt;std::endl;</span><br><span class=\"line\">  std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(args...);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"number\">1</span>,<span class=\"number\">22.34</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>. <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编译 g++ xxx.cpp -std=c++11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//out:</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">hello   除去第一个参数，后面可变参数的个数： 2</span></span><br><span class=\"line\"><span class=\"comment\">void print(const T &amp;, const T2 &amp;...) [T = char [6], T2 = &lt;int, double&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">1       除去第一个参数，后面可变参数的个数： 1</span></span><br><span class=\"line\"><span class=\"comment\">void print(const T &amp;, const T2 &amp;...) [T = int, T2 = &lt;double&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">22.34   除去第一个参数，后面可变参数的个数： 0</span></span><br><span class=\"line\"><span class=\"comment\">void print(const T &amp;, const T2 &amp;...) [T = double, T2 = &lt;&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//说明：</span></span><br><span class=\"line\"><span class=\"comment\">//sizeof...(args) 获取args的参数个数</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>比较多个数的大小</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">myMax</span><span class=\"params\">(T value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">typename</span>...Type&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">myMax</span><span class=\"params\">(T firstArg,Type...args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(firstArg,<span class=\"built_in\">myMax</span>(args...));</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_num = myMax&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>,<span class=\"number\">23</span>,<span class=\"number\">99</span>,<span class=\"number\">67</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    cout&lt;&lt;max_num&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//out</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">T myMax(T, Type...) [T = int, Type = &lt;int, int, int, int&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">T myMax(T, Type...) [T = int, Type = &lt;int, int, int&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">T myMax(T, Type...) [T = int, Type = &lt;int, int&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">T myMax(T, Type...) [T = int, Type = &lt;int&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">99</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"C库宏实现\"><a href=\"#C库宏实现\" class=\"headerlink\" title=\"C库宏实现\"></a>C库宏实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">va_start</span><span class=\"params\">(va_list ap,last_arg)</span></span>;</span><br><span class=\"line\">参数：</span><br><span class=\"line\">  \tap va_list 类型，va_start 函数用来初始化ap 变量，它用来存储通过 va_arg 获取额外参数时所必需的信息</span><br><span class=\"line\">  \tlast_arg 是最后一个传递给函数已知的固定参数，即省略号之前的参数</span><br><span class=\"line\">作用：</span><br><span class=\"line\">  初始化ap变量</span><br><span class=\"line\">调用时机：</span><br><span class=\"line\">  在va_arg 和 va_end 之间被调用</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//-------------------------------------</span></span><br><span class=\"line\">  <span class=\"function\">type <span class=\"title\">va_arg</span><span class=\"params\">(va_list ap,type)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span></span><br><span class=\"line\"><span class=\"function\"> 参数：</span></span><br><span class=\"line\"><span class=\"function\">  \tap va_start 初始化的变量</span></span><br><span class=\"line\"><span class=\"function\">  \ttype 参数列表中元素的类型</span></span><br><span class=\"line\"><span class=\"function\"> 作用：</span></span><br><span class=\"line\"><span class=\"function\">  \t检索函数参数列表中类型为 type 的下一个参数。它无法判断检索到的参数是否是传给函数的最后一个参数。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//-------------------------------------</span></span></span><br><span class=\"line\"><span class=\"function\">va_end 清理为ap保留的内存，如果在从函数返回之前没有调用 va_end，则结果为未定义。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> count,...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    va_list ap;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    va_start(ap,count);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;count;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += va_arg(ap,<span class=\"keyword\">int</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    va_end(ap);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sum(3,12,2,1); //3 代表参数的个数 ，后面的每一个都是参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//该方法是极不安全的，宏本身无法提供任何安全性保证</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"c-11-的initializer-list\"><a href=\"#c-11-的initializer-list\" class=\"headerlink\" title=\"c++11 的initializer_list\"></a>c++11 的initializer_list</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;initializer_list&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; <span class=\"comment\">// std 命名空间的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(initializer_list&lt;<span class=\"keyword\">int</span>&gt; ll)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = ll.<span class=\"built_in\">begin</span>();p!=ll.<span class=\"built_in\">end</span>();++p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += *p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用：</span></span><br><span class=\"line\"><span class=\"built_in\">sum</span>(&#123;<span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">34</span>,<span class=\"number\">10</span>&#125;); <span class=\"comment\">//用&#123;&#125;括住参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编译加上 -std=c++11</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"可变参数模板\"><a href=\"#可变参数模板\" class=\"headerlink\" title=\"可变参数模板\"></a>可变参数模板</h3><ul>\n<li>可变参数模板和普通模板的写法类似，用<code>...</code>表示0到多个不同类型的参数</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;  <span class=\"comment\">//原始的不可变参数的形式</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span>... T&gt; <span class=\"comment\">//可变参数，0到多个</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T1,<span class=\"keyword\">typename</span>... T2&gt; <span class=\"comment\">//1到多个参数</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打印多个不同类型的数据.      </li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;&#125; <span class=\"comment\">//0个参数的调用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">typename</span>... T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; firstArg,<span class=\"keyword\">const</span> T2&amp;... args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  std::cout&lt;&lt;firstArg&lt;&lt;<span class=\"string\">&quot;\\t除去第一个参数，后面可变参数的个数：&quot;</span>&lt;&lt;<span class=\"keyword\">sizeof</span>...(args)&lt;&lt;std::endl;</span><br><span class=\"line\">  std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(args...);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"number\">1</span>,<span class=\"number\">22.34</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>. <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编译 g++ xxx.cpp -std=c++11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//out:</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">hello   除去第一个参数，后面可变参数的个数： 2</span></span><br><span class=\"line\"><span class=\"comment\">void print(const T &amp;, const T2 &amp;...) [T = char [6], T2 = &lt;int, double&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">1       除去第一个参数，后面可变参数的个数： 1</span></span><br><span class=\"line\"><span class=\"comment\">void print(const T &amp;, const T2 &amp;...) [T = int, T2 = &lt;double&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">22.34   除去第一个参数，后面可变参数的个数： 0</span></span><br><span class=\"line\"><span class=\"comment\">void print(const T &amp;, const T2 &amp;...) [T = double, T2 = &lt;&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//说明：</span></span><br><span class=\"line\"><span class=\"comment\">//sizeof...(args) 获取args的参数个数</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>比较多个数的大小</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">myMax</span><span class=\"params\">(T value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">typename</span>...Type&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">myMax</span><span class=\"params\">(T firstArg,Type...args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(firstArg,<span class=\"built_in\">myMax</span>(args...));</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_num = myMax&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>,<span class=\"number\">23</span>,<span class=\"number\">99</span>,<span class=\"number\">67</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    cout&lt;&lt;max_num&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//out</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">T myMax(T, Type...) [T = int, Type = &lt;int, int, int, int&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">T myMax(T, Type...) [T = int, Type = &lt;int, int, int&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">T myMax(T, Type...) [T = int, Type = &lt;int, int&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">T myMax(T, Type...) [T = int, Type = &lt;int&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">99</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"大小端和网络字节序","date":"2020-06-07T16:00:00.000Z","keywords":"底层，字节序","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gs9r5js3tnj30hj06w76z.jpg","sticky":1,"_content":"#### 1.大小端\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gs9r5js3tnj30hj06w76z.jpg\" alt=\"大小端\" style=\"zoom:60%;\" />\n\n```c\n大端字节序：高地址储存在低位\n小端字节序：高地址存储在高位\n```\n\n#### 2.判断\n\n```c\n#include <stdio.h>\nint main()\n{\n    int a = 1;\n    char ch = *(char*)&a;\n    if(ch)\n        printf(\"little\\n\");\n    else\n        printf(\"big\\n\");\n  \n    return 0;\n}\n```\n\n#### 3.共用体判断\n\n```c\n#include <stdio.h>\nunion\n{\n  char ch;\n  int a;\n}un;\nint main()\n{\n   un.a = 0x12345678;\n  \n   if(ui.ch == 0x12)\n       printf(\"big\\n\");\n    else\n        printf(\"little\\n\");\n  \n    return 0; \n}\n```\n\n#### 4.网络字节序\n\n* 网络上传输的数据都是{% label 字节流 blue %}，对于一个多字节的数值的传输，先传输那个字节？接受端接收的第一个字节作为高字节还是低字节？\n\n```c\n//UDP/TCP/IP协议规定，把接收到的第一个字节作为高字节看待，也就是网络字节序是大端字节序\n\n  \n//字节序转换函数\n  \n#include <arpa/inet.h>\n\n//主机字节序转化为网络字节序\nunit32_t htonl (unit32_t hostlong);\nunit16_t htons (unit16_t hostshort);\n\n//网络字节序转化为主机字节序\nunit32_t ntohl (unit32_t netlong);\nunit16_t ntohs (unit16_t netshort);\n\n/*\nh--host\nn--network\ns--short--PORT\nl--long--IP\n*/  \n```\n\n```c\n#include <stdio.h>\n#include <arpa/inet.h>\n\nint main()\n{\n    unsigned int x = 0x12345678;\n    unsigned char *p = (unsigned char *)&x;\n    printf(\"%0x_%0x_%0x_%0x\\n\",p[0],p[1],p[2],p[3]);\n  \n    unsigned int y = htonl(x);\n    p = (unsigned char*)&y;\n    printf(\"%0x_%0x_%0x_%0x\\n\",p[0],p[1],p[2],p[3]);\n  \n    return 0;\n}\n\n\n//output\n78_56_34_12\n12_34_56_78\n```\n","source":"_posts/大小端.md","raw":"---\ntitle: 大小端和网络字节序\ndate: 2020-06-08\ntag:\n  - 基础\n  - 底层\ncategories:\n  - Linux\nkeywords: \"底层，字节序\"\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gs9r5js3tnj30hj06w76z.jpg\nsticky: 1\n---\n#### 1.大小端\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gs9r5js3tnj30hj06w76z.jpg\" alt=\"大小端\" style=\"zoom:60%;\" />\n\n```c\n大端字节序：高地址储存在低位\n小端字节序：高地址存储在高位\n```\n\n#### 2.判断\n\n```c\n#include <stdio.h>\nint main()\n{\n    int a = 1;\n    char ch = *(char*)&a;\n    if(ch)\n        printf(\"little\\n\");\n    else\n        printf(\"big\\n\");\n  \n    return 0;\n}\n```\n\n#### 3.共用体判断\n\n```c\n#include <stdio.h>\nunion\n{\n  char ch;\n  int a;\n}un;\nint main()\n{\n   un.a = 0x12345678;\n  \n   if(ui.ch == 0x12)\n       printf(\"big\\n\");\n    else\n        printf(\"little\\n\");\n  \n    return 0; \n}\n```\n\n#### 4.网络字节序\n\n* 网络上传输的数据都是{% label 字节流 blue %}，对于一个多字节的数值的传输，先传输那个字节？接受端接收的第一个字节作为高字节还是低字节？\n\n```c\n//UDP/TCP/IP协议规定，把接收到的第一个字节作为高字节看待，也就是网络字节序是大端字节序\n\n  \n//字节序转换函数\n  \n#include <arpa/inet.h>\n\n//主机字节序转化为网络字节序\nunit32_t htonl (unit32_t hostlong);\nunit16_t htons (unit16_t hostshort);\n\n//网络字节序转化为主机字节序\nunit32_t ntohl (unit32_t netlong);\nunit16_t ntohs (unit16_t netshort);\n\n/*\nh--host\nn--network\ns--short--PORT\nl--long--IP\n*/  \n```\n\n```c\n#include <stdio.h>\n#include <arpa/inet.h>\n\nint main()\n{\n    unsigned int x = 0x12345678;\n    unsigned char *p = (unsigned char *)&x;\n    printf(\"%0x_%0x_%0x_%0x\\n\",p[0],p[1],p[2],p[3]);\n  \n    unsigned int y = htonl(x);\n    p = (unsigned char*)&y;\n    printf(\"%0x_%0x_%0x_%0x\\n\",p[0],p[1],p[2],p[3]);\n  \n    return 0;\n}\n\n\n//output\n78_56_34_12\n12_34_56_78\n```\n","slug":"大小端","published":1,"updated":"2021-07-08T18:24:42.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xf60011k057ehcreoio","content":"<h4 id=\"1-大小端\"><a href=\"#1-大小端\" class=\"headerlink\" title=\"1.大小端\"></a>1.大小端</h4><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gs9r5js3tnj30hj06w76z.jpg\" alt=\"大小端\" style=\"zoom:60%;\" />\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大端字节序：高地址储存在低位</span><br><span class=\"line\">小端字节序：高地址存储在高位</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-判断\"><a href=\"#2-判断\" class=\"headerlink\" title=\"2.判断\"></a>2.判断</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = *(<span class=\"keyword\">char</span>*)&amp;a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ch)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;little\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;big\\n&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-共用体判断\"><a href=\"#3-共用体判断\" class=\"headerlink\" title=\"3.共用体判断\"></a>3.共用体判断</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">&#125;un;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   un.a = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">if</span>(ui.ch == <span class=\"number\">0x12</span>)</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;big\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;little\\n&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-网络字节序\"><a href=\"#4-网络字节序\" class=\"headerlink\" title=\"4.网络字节序\"></a>4.网络字节序</h4><ul>\n<li>网络上传输的数据都是<mark class=\"hl-label blue\">字节流</mark> ，对于一个多字节的数值的传输，先传输那个字节？接受端接收的第一个字节作为高字节还是低字节？</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//UDP/TCP/IP协议规定，把接收到的第一个字节作为高字节看待，也就是网络字节序是大端字节序</span></span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//字节序转换函数</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主机字节序转化为网络字节序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unit32_t</span> <span class=\"title\">htonl</span> <span class=\"params\">(<span class=\"keyword\">unit32_t</span> hostlong)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unit16_t</span> <span class=\"title\">htons</span> <span class=\"params\">(<span class=\"keyword\">unit16_t</span> hostshort)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//网络字节序转化为主机字节序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unit32_t</span> <span class=\"title\">ntohl</span> <span class=\"params\">(<span class=\"keyword\">unit32_t</span> netlong)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unit16_t</span> <span class=\"title\">ntohs</span> <span class=\"params\">(<span class=\"keyword\">unit16_t</span> netshort)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">h--host</span></span><br><span class=\"line\"><span class=\"comment\">n--network</span></span><br><span class=\"line\"><span class=\"comment\">s--short--PORT</span></span><br><span class=\"line\"><span class=\"comment\">l--long--IP</span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> x = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *p = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)&amp;x;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%0x_%0x_%0x_%0x\\n&quot;</span>,p[<span class=\"number\">0</span>],p[<span class=\"number\">1</span>],p[<span class=\"number\">2</span>],p[<span class=\"number\">3</span>]);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> y = htonl(x);</span><br><span class=\"line\">    p = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)&amp;y;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%0x_%0x_%0x_%0x\\n&quot;</span>,p[<span class=\"number\">0</span>],p[<span class=\"number\">1</span>],p[<span class=\"number\">2</span>],p[<span class=\"number\">3</span>]);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output</span></span><br><span class=\"line\"><span class=\"number\">78</span>_56_34_12</span><br><span class=\"line\"><span class=\"number\">12</span>_34_56_78</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h4 id=\"1-大小端\"><a href=\"#1-大小端\" class=\"headerlink\" title=\"1.大小端\"></a>1.大小端</h4><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gs9r5js3tnj30hj06w76z.jpg\" alt=\"大小端\" style=\"zoom:60%;\" />\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大端字节序：高地址储存在低位</span><br><span class=\"line\">小端字节序：高地址存储在高位</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-判断\"><a href=\"#2-判断\" class=\"headerlink\" title=\"2.判断\"></a>2.判断</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = *(<span class=\"keyword\">char</span>*)&amp;a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ch)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;little\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;big\\n&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-共用体判断\"><a href=\"#3-共用体判断\" class=\"headerlink\" title=\"3.共用体判断\"></a>3.共用体判断</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">&#125;un;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   un.a = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">if</span>(ui.ch == <span class=\"number\">0x12</span>)</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;big\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;little\\n&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-网络字节序\"><a href=\"#4-网络字节序\" class=\"headerlink\" title=\"4.网络字节序\"></a>4.网络字节序</h4><ul>\n<li>网络上传输的数据都是<mark class=\"hl-label blue\">字节流</mark> ，对于一个多字节的数值的传输，先传输那个字节？接受端接收的第一个字节作为高字节还是低字节？</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//UDP/TCP/IP协议规定，把接收到的第一个字节作为高字节看待，也就是网络字节序是大端字节序</span></span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//字节序转换函数</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主机字节序转化为网络字节序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unit32_t</span> <span class=\"title\">htonl</span> <span class=\"params\">(<span class=\"keyword\">unit32_t</span> hostlong)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unit16_t</span> <span class=\"title\">htons</span> <span class=\"params\">(<span class=\"keyword\">unit16_t</span> hostshort)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//网络字节序转化为主机字节序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unit32_t</span> <span class=\"title\">ntohl</span> <span class=\"params\">(<span class=\"keyword\">unit32_t</span> netlong)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unit16_t</span> <span class=\"title\">ntohs</span> <span class=\"params\">(<span class=\"keyword\">unit16_t</span> netshort)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">h--host</span></span><br><span class=\"line\"><span class=\"comment\">n--network</span></span><br><span class=\"line\"><span class=\"comment\">s--short--PORT</span></span><br><span class=\"line\"><span class=\"comment\">l--long--IP</span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> x = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *p = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)&amp;x;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%0x_%0x_%0x_%0x\\n&quot;</span>,p[<span class=\"number\">0</span>],p[<span class=\"number\">1</span>],p[<span class=\"number\">2</span>],p[<span class=\"number\">3</span>]);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> y = htonl(x);</span><br><span class=\"line\">    p = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)&amp;y;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%0x_%0x_%0x_%0x\\n&quot;</span>,p[<span class=\"number\">0</span>],p[<span class=\"number\">1</span>],p[<span class=\"number\">2</span>],p[<span class=\"number\">3</span>]);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output</span></span><br><span class=\"line\"><span class=\"number\">78</span>_56_34_12</span><br><span class=\"line\"><span class=\"number\">12</span>_34_56_78</span><br></pre></td></tr></table></figure>\n"},{"title":"字节对齐","date":"2021-02-11T16:00:00.000Z","keywords":"字节对齐，结构体","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gscdh0sq92j31i60u04p6.jpg","_content":"\n### 什么是字节对齐\n\n​\t计算机存储的基本单位是{% label 字节(byte) blue %},但在读写内存的时候，我们并非一个字节一个字节的读取，而是2，4，8的倍数来读取，所以就对基本数据类型的地址做出了一些限制，它的地址也必须是2，4，8的倍数。那么数据类型就需要按照一些规则在空间上进行排列，这样就产生对齐。\n\n\n\n### 对齐原则\n\n- {% label 规则1:结构体变量的首地址能够被其对齐字节数大小所整除 pink %}\n- {% label 规则2:结构体每个成员相对结构体首地址的偏移都是成员大小的整数倍,如不满足，对前一个成员填充字节以满足 pink %}\n- {% label 规则3:结构体的总大小为结构体对最大成员大小的整数倍,如不满足，最后填充字节以满足 pink %}\n\n\n\n### 测试案例\n\n```c++\n//---32位平台默认对齐4字节，64位平台默认对齐8字节\n//32位平台举例\n\n#include <iostream>\nusing namespace std;\nstruct T1\n{\n\tint m1;\n  char m2;\n  int m3;\n  short m4;\n};\n\nstruct T2\n{\n  char a;\n  char b;\n};\n\nstruct T3\n{\n  char a;\n  char b;\n  int c;\n};\n\nstruct T4\n{\n  char a;\n  char b;\n  char c;\n  char d;\n  char e;\n  int f;\n};\nstruct Person\n{\n  char name[10];\n  int age;\n  char sex;\n  float score;\n};\n\nvoid test01()\n{\n  cout<<sizeof(struct T1)<<endl;\n}\n\nvoid test02()\n{\n  cout<<sizeof(struct T2)<<endl;\n}\n\nvoid test03()\n{\n  cout<<sizeof(struct T3)<<endl;\n}\n\nvoid test04()\n{\n  cout<<sizeof(struct T4)<<endl;\n}\n\nvoid test05()\n{\n  cout<<sizeof(struct Person)<<endl;\n}\n\nint main(void)\n{\n  test01(); //16, m1-->4  m2-->4  m3-->4  m4-->4\n  test02();//2\n  test03();//8\n  test04();//12\n  test05();//24\n  return 0;\n}\n```\n\n\n\n##### T1\n\n| 0~3  | 4    | 5~7  | 8~11 | 12~13 | 14~15 |\n| ---- | ---- | ---- | ---- | ----- | ----- |\n| m1   | m2   | 填充 | m3   | m4    | 填充  |\n\n\n\n- m3 成员变量相对结构体首地址的偏移量不是sizeof(int),也就是不是成员大小的整数倍，故前面成员填充满足，走到起始地址为8\n- 最后的填充依据规则3，结构体整个的地址是最大成员大小的整数倍，后面14～15填充\n\n##### T2\n\n| 0    | 1    |\n| ---- | ---- |\n| a    | b    |\n\n##### T3\n\n| 0    | 1    | 2~3  |\n| ---- | ---- | ---- |\n| a    | b    | 填充 |\n\n| 4~7  |\n| :--: |\n|  c   |\n\n##### T4\n\n| 0    | 1    | 2    | 3    |\n| ---- | ---- | ---- | ---- |\n| a    | b    | c    | d    |\n\n| 4    | 5~7  |\n| ---- | ---- |\n| e    | 填充 |\n\n| 8~11 |\n| :--: |\n|  f   |\n\n##### T5\n\n| 0       | 1       | 2       | 3       |\n| ------- | ------- | ------- | ------- |\n| name[0] | name[1] | name[2] | name[3] |\n\n| 4       | 5       | 6       | 7       |\n| ------- | ------- | ------- | ------- |\n| name[4] | name[5] | name[6] | name[7] |\n\n| 8       | 9       | 10   | 11   |\n| ------- | ------- | ---- | ---- |\n| name[8] | name[9] | 填充 | 填充 |\n\n| 12~15 |\n| :---: |\n|  age  |\n\n| 16   | 17~19 |\n| ---- | ----- |\n| sex  | 填充  |\n\n| 20~23 |\n| :---: |\n| score |\n\n\n\n##### T6\n\n```c\nstruct s1\n{\n  short a;\n  long b;\n};\n\nstruct s2\n{\n  char c;\n  struct s1 d;\n  long long e;\n};\n\nsizeof(s1)--->16\nsizeof(s2)--->32\n  \n/*\ns1\naa******\nbbbbbbbb\n\n\ns2\nc*******\naa******\nbbbbbbbb\neeeeeeee\n\n*/\n```\n\n\n\n### offsetof宏的使用\n\n```c\n//  #define OFFSETOF(type,member)   (unsigned int) (&((type*)0)->member)\n#include <stdio.h>\n#include <stddef.h>\n\ntypedef struct Person\n{\n  char name[10];\n  int age;\n  char sex;\n}PERSON;\n\nint main(void)\n{\n  printf(\"name = %lu\\n\",offsetof(PERSON,name)) ;//0\n  printf(\"age = %lu\\n\",offsetof(PERSON,age));//12\n  printf(\"sex = %lu\\n\",offsetof(PERSON,sex));//16\n  \n  return 0;\n}\n\n```\n\n![](https://tva1.sinaimg.cn/large/008i3skNly1gscebec13dj31do0u0aet.jpg)\n\n### 字节对齐实际应用\n\n#### 合适的设计可以节省空间\n\n```c++\nstruct T2\n{\n\tint m1;\n  char m2;\n  short m4;\n  int m3;\n};\n\nsizeof(struct T2) --->12\n```\n\n\n\n#### 跨平台通信\n\n- 可以指定字节对齐的字节数\n\n  ```c++\n  #pragma pack(1) //1字节对齐\n  struct T1\n  {\n  \tint m1;\n    char m2;\n    int m3;\n    short m4;\n  };\n  #pragma pack() //取消自定义对齐字节数\n  \n  sizeof(struct T1) --->11\n    \n  //------------------------------------------\n  struct T2\n  {\n  \tint m1;\n    char m2;\n    int m3;\n    short m4;\n  }__attribute__((packed)); //取消结构在编译过程中的优化对齐，也可以认为是1字节对齐\n   \n  sizeof(struct T2) ---> 11\n    \n  //------------------------------------------\n    //自己填充\n   struct T3\n   {\n    int m1;\n    char m2;\n    char r1[3];\n    int m3;\n    short m4;\n    char r2[2];  \n   };\n  \n  ```\n\n  \n\n\n\n","source":"_posts/字节对齐.md","raw":"---\ntitle: 字节对齐\ndate: 2021-02-12\ntag: \n  - 字节对齐\n  - 基础\ncategories:\n  - C++\nkeywords: \"字节对齐，结构体\"\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gscdh0sq92j31i60u04p6.jpg\n---\n\n### 什么是字节对齐\n\n​\t计算机存储的基本单位是{% label 字节(byte) blue %},但在读写内存的时候，我们并非一个字节一个字节的读取，而是2，4，8的倍数来读取，所以就对基本数据类型的地址做出了一些限制，它的地址也必须是2，4，8的倍数。那么数据类型就需要按照一些规则在空间上进行排列，这样就产生对齐。\n\n\n\n### 对齐原则\n\n- {% label 规则1:结构体变量的首地址能够被其对齐字节数大小所整除 pink %}\n- {% label 规则2:结构体每个成员相对结构体首地址的偏移都是成员大小的整数倍,如不满足，对前一个成员填充字节以满足 pink %}\n- {% label 规则3:结构体的总大小为结构体对最大成员大小的整数倍,如不满足，最后填充字节以满足 pink %}\n\n\n\n### 测试案例\n\n```c++\n//---32位平台默认对齐4字节，64位平台默认对齐8字节\n//32位平台举例\n\n#include <iostream>\nusing namespace std;\nstruct T1\n{\n\tint m1;\n  char m2;\n  int m3;\n  short m4;\n};\n\nstruct T2\n{\n  char a;\n  char b;\n};\n\nstruct T3\n{\n  char a;\n  char b;\n  int c;\n};\n\nstruct T4\n{\n  char a;\n  char b;\n  char c;\n  char d;\n  char e;\n  int f;\n};\nstruct Person\n{\n  char name[10];\n  int age;\n  char sex;\n  float score;\n};\n\nvoid test01()\n{\n  cout<<sizeof(struct T1)<<endl;\n}\n\nvoid test02()\n{\n  cout<<sizeof(struct T2)<<endl;\n}\n\nvoid test03()\n{\n  cout<<sizeof(struct T3)<<endl;\n}\n\nvoid test04()\n{\n  cout<<sizeof(struct T4)<<endl;\n}\n\nvoid test05()\n{\n  cout<<sizeof(struct Person)<<endl;\n}\n\nint main(void)\n{\n  test01(); //16, m1-->4  m2-->4  m3-->4  m4-->4\n  test02();//2\n  test03();//8\n  test04();//12\n  test05();//24\n  return 0;\n}\n```\n\n\n\n##### T1\n\n| 0~3  | 4    | 5~7  | 8~11 | 12~13 | 14~15 |\n| ---- | ---- | ---- | ---- | ----- | ----- |\n| m1   | m2   | 填充 | m3   | m4    | 填充  |\n\n\n\n- m3 成员变量相对结构体首地址的偏移量不是sizeof(int),也就是不是成员大小的整数倍，故前面成员填充满足，走到起始地址为8\n- 最后的填充依据规则3，结构体整个的地址是最大成员大小的整数倍，后面14～15填充\n\n##### T2\n\n| 0    | 1    |\n| ---- | ---- |\n| a    | b    |\n\n##### T3\n\n| 0    | 1    | 2~3  |\n| ---- | ---- | ---- |\n| a    | b    | 填充 |\n\n| 4~7  |\n| :--: |\n|  c   |\n\n##### T4\n\n| 0    | 1    | 2    | 3    |\n| ---- | ---- | ---- | ---- |\n| a    | b    | c    | d    |\n\n| 4    | 5~7  |\n| ---- | ---- |\n| e    | 填充 |\n\n| 8~11 |\n| :--: |\n|  f   |\n\n##### T5\n\n| 0       | 1       | 2       | 3       |\n| ------- | ------- | ------- | ------- |\n| name[0] | name[1] | name[2] | name[3] |\n\n| 4       | 5       | 6       | 7       |\n| ------- | ------- | ------- | ------- |\n| name[4] | name[5] | name[6] | name[7] |\n\n| 8       | 9       | 10   | 11   |\n| ------- | ------- | ---- | ---- |\n| name[8] | name[9] | 填充 | 填充 |\n\n| 12~15 |\n| :---: |\n|  age  |\n\n| 16   | 17~19 |\n| ---- | ----- |\n| sex  | 填充  |\n\n| 20~23 |\n| :---: |\n| score |\n\n\n\n##### T6\n\n```c\nstruct s1\n{\n  short a;\n  long b;\n};\n\nstruct s2\n{\n  char c;\n  struct s1 d;\n  long long e;\n};\n\nsizeof(s1)--->16\nsizeof(s2)--->32\n  \n/*\ns1\naa******\nbbbbbbbb\n\n\ns2\nc*******\naa******\nbbbbbbbb\neeeeeeee\n\n*/\n```\n\n\n\n### offsetof宏的使用\n\n```c\n//  #define OFFSETOF(type,member)   (unsigned int) (&((type*)0)->member)\n#include <stdio.h>\n#include <stddef.h>\n\ntypedef struct Person\n{\n  char name[10];\n  int age;\n  char sex;\n}PERSON;\n\nint main(void)\n{\n  printf(\"name = %lu\\n\",offsetof(PERSON,name)) ;//0\n  printf(\"age = %lu\\n\",offsetof(PERSON,age));//12\n  printf(\"sex = %lu\\n\",offsetof(PERSON,sex));//16\n  \n  return 0;\n}\n\n```\n\n![](https://tva1.sinaimg.cn/large/008i3skNly1gscebec13dj31do0u0aet.jpg)\n\n### 字节对齐实际应用\n\n#### 合适的设计可以节省空间\n\n```c++\nstruct T2\n{\n\tint m1;\n  char m2;\n  short m4;\n  int m3;\n};\n\nsizeof(struct T2) --->12\n```\n\n\n\n#### 跨平台通信\n\n- 可以指定字节对齐的字节数\n\n  ```c++\n  #pragma pack(1) //1字节对齐\n  struct T1\n  {\n  \tint m1;\n    char m2;\n    int m3;\n    short m4;\n  };\n  #pragma pack() //取消自定义对齐字节数\n  \n  sizeof(struct T1) --->11\n    \n  //------------------------------------------\n  struct T2\n  {\n  \tint m1;\n    char m2;\n    int m3;\n    short m4;\n  }__attribute__((packed)); //取消结构在编译过程中的优化对齐，也可以认为是1字节对齐\n   \n  sizeof(struct T2) ---> 11\n    \n  //------------------------------------------\n    //自己填充\n   struct T3\n   {\n    int m1;\n    char m2;\n    char r1[3];\n    int m3;\n    short m4;\n    char r2[2];  \n   };\n  \n  ```\n\n  \n\n\n\n","slug":"字节对齐","published":1,"updated":"2021-07-10T18:14:59.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xf70015k0572ubd4jbv","content":"<h3 id=\"什么是字节对齐\"><a href=\"#什么是字节对齐\" class=\"headerlink\" title=\"什么是字节对齐\"></a>什么是字节对齐</h3><p>​    计算机存储的基本单位是<mark class=\"hl-label blue\">字节(byte)</mark> ,但在读写内存的时候，我们并非一个字节一个字节的读取，而是2，4，8的倍数来读取，所以就对基本数据类型的地址做出了一些限制，它的地址也必须是2，4，8的倍数。那么数据类型就需要按照一些规则在空间上进行排列，这样就产生对齐。</p>\n<h3 id=\"对齐原则\"><a href=\"#对齐原则\" class=\"headerlink\" title=\"对齐原则\"></a>对齐原则</h3><ul>\n<li><mark class=\"hl-label pink\">规则1:结构体变量的首地址能够被其对齐字节数大小所整除</mark> </li>\n<li><mark class=\"hl-label pink\">规则2:结构体每个成员相对结构体首地址的偏移都是成员大小的整数倍,如不满足，对前一个成员填充字节以满足</mark> </li>\n<li><mark class=\"hl-label pink\">规则3:结构体的总大小为结构体对最大成员大小的整数倍,如不满足，最后填充字节以满足</mark> </li>\n</ul>\n<h3 id=\"测试案例\"><a href=\"#测试案例\" class=\"headerlink\" title=\"测试案例\"></a>测试案例</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//---32位平台默认对齐4字节，64位平台默认对齐8字节</span></span><br><span class=\"line\"><span class=\"comment\">//32位平台举例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T1</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m1;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> m2;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m3;</span><br><span class=\"line\">  <span class=\"keyword\">short</span> m4;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T2</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T3</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> b;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T4</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> b;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> d;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> e;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> f;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> sex;</span><br><span class=\"line\">  <span class=\"keyword\">float</span> score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout&lt;&lt;<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T1)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout&lt;&lt;<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T2)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout&lt;&lt;<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T3)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test04</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout&lt;&lt;<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T4)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test05</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout&lt;&lt;<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct Person)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">test01</span>(); <span class=\"comment\">//16, m1--&gt;4  m2--&gt;4  m3--&gt;4  m4--&gt;4</span></span><br><span class=\"line\">  <span class=\"built_in\">test02</span>();<span class=\"comment\">//2</span></span><br><span class=\"line\">  <span class=\"built_in\">test03</span>();<span class=\"comment\">//8</span></span><br><span class=\"line\">  <span class=\"built_in\">test04</span>();<span class=\"comment\">//12</span></span><br><span class=\"line\">  <span class=\"built_in\">test05</span>();<span class=\"comment\">//24</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"T1\"><a href=\"#T1\" class=\"headerlink\" title=\"T1\"></a>T1</h5><table>\n<thead>\n<tr>\n<th>0~3</th>\n<th>4</th>\n<th>5~7</th>\n<th>8~11</th>\n<th>12~13</th>\n<th>14~15</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>m1</td>\n<td>m2</td>\n<td>填充</td>\n<td>m3</td>\n<td>m4</td>\n<td>填充</td>\n</tr>\n</tbody></table>\n<ul>\n<li>m3 成员变量相对结构体首地址的偏移量不是sizeof(int),也就是不是成员大小的整数倍，故前面成员填充满足，走到起始地址为8</li>\n<li>最后的填充依据规则3，结构体整个的地址是最大成员大小的整数倍，后面14～15填充</li>\n</ul>\n<h5 id=\"T2\"><a href=\"#T2\" class=\"headerlink\" title=\"T2\"></a>T2</h5><table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>b</td>\n</tr>\n</tbody></table>\n<h5 id=\"T3\"><a href=\"#T3\" class=\"headerlink\" title=\"T3\"></a>T3</h5><table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2~3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>b</td>\n<td>填充</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">4~7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">c</td>\n</tr>\n</tbody></table>\n<h5 id=\"T4\"><a href=\"#T4\" class=\"headerlink\" title=\"T4\"></a>T4</h5><table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n<td>d</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>4</th>\n<th>5~7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>e</td>\n<td>填充</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">8~11</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">f</td>\n</tr>\n</tbody></table>\n<h5 id=\"T5\"><a href=\"#T5\" class=\"headerlink\" title=\"T5\"></a>T5</h5><table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name[0]</td>\n<td>name[1]</td>\n<td>name[2]</td>\n<td>name[3]</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name[4]</td>\n<td>name[5]</td>\n<td>name[6]</td>\n<td>name[7]</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name[8]</td>\n<td>name[9]</td>\n<td>填充</td>\n<td>填充</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">12~15</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">age</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>16</th>\n<th>17~19</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sex</td>\n<td>填充</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">20~23</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">score</td>\n</tr>\n</tbody></table>\n<h5 id=\"T6\"><a href=\"#T6\" class=\"headerlink\" title=\"T6\"></a>T6</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">s1</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">short</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">s2</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">s1</span> <span class=\"title\">d</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> e;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(s1)---&gt;<span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(s2)---&gt;<span class=\"number\">32</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">s1</span></span><br><span class=\"line\"><span class=\"comment\">aa******</span></span><br><span class=\"line\"><span class=\"comment\">bbbbbbbb</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">s2</span></span><br><span class=\"line\"><span class=\"comment\">c*******</span></span><br><span class=\"line\"><span class=\"comment\">aa******</span></span><br><span class=\"line\"><span class=\"comment\">bbbbbbbb</span></span><br><span class=\"line\"><span class=\"comment\">eeeeeeee</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"offsetof宏的使用\"><a href=\"#offsetof宏的使用\" class=\"headerlink\" title=\"offsetof宏的使用\"></a>offsetof宏的使用</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  #define OFFSETOF(type,member)   (unsigned int) (&amp;((type*)0)-&gt;member)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> sex;</span><br><span class=\"line\">&#125;PERSON;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;name = %lu\\n&quot;</span>,offsetof(PERSON,name)) ;<span class=\"comment\">//0</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;age = %lu\\n&quot;</span>,offsetof(PERSON,age));<span class=\"comment\">//12</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sex = %lu\\n&quot;</span>,offsetof(PERSON,sex));<span class=\"comment\">//16</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gscebec13dj31do0u0aet.jpg\"></p>\n<h3 id=\"字节对齐实际应用\"><a href=\"#字节对齐实际应用\" class=\"headerlink\" title=\"字节对齐实际应用\"></a>字节对齐实际应用</h3><h4 id=\"合适的设计可以节省空间\"><a href=\"#合适的设计可以节省空间\" class=\"headerlink\" title=\"合适的设计可以节省空间\"></a>合适的设计可以节省空间</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T2</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m1;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> m2;</span><br><span class=\"line\">  <span class=\"keyword\">short</span> m4;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m3;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T2) ---&gt;<span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"跨平台通信\"><a href=\"#跨平台通信\" class=\"headerlink\" title=\"跨平台通信\"></a>跨平台通信</h4><ul>\n<li><p>可以指定字节对齐的字节数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> pack(1) <span class=\"comment\">//1字节对齐</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T1</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m1;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> m2;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m3;</span><br><span class=\"line\">  <span class=\"keyword\">short</span> m4;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> pack() <span class=\"comment\">//取消自定义对齐字节数</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T1) ---&gt;<span class=\"number\">11</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//------------------------------------------</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T2</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m1;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> m2;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m3;</span><br><span class=\"line\">  <span class=\"keyword\">short</span> m4;</span><br><span class=\"line\">&#125;__attribute__((packed)); <span class=\"comment\">//取消结构在编译过程中的优化对齐，也可以认为是1字节对齐</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T2) ---&gt; <span class=\"number\">11</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//------------------------------------------</span></span><br><span class=\"line\">  <span class=\"comment\">//自己填充</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T3</span></span></span><br><span class=\"line\"><span class=\"class\"> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> m1;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> m2;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> r1[<span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m3;</span><br><span class=\"line\">  <span class=\"keyword\">short</span> m4;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> r2[<span class=\"number\">2</span>];  </span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"什么是字节对齐\"><a href=\"#什么是字节对齐\" class=\"headerlink\" title=\"什么是字节对齐\"></a>什么是字节对齐</h3><p>​    计算机存储的基本单位是<mark class=\"hl-label blue\">字节(byte)</mark> ,但在读写内存的时候，我们并非一个字节一个字节的读取，而是2，4，8的倍数来读取，所以就对基本数据类型的地址做出了一些限制，它的地址也必须是2，4，8的倍数。那么数据类型就需要按照一些规则在空间上进行排列，这样就产生对齐。</p>\n<h3 id=\"对齐原则\"><a href=\"#对齐原则\" class=\"headerlink\" title=\"对齐原则\"></a>对齐原则</h3><ul>\n<li><mark class=\"hl-label pink\">规则1:结构体变量的首地址能够被其对齐字节数大小所整除</mark> </li>\n<li><mark class=\"hl-label pink\">规则2:结构体每个成员相对结构体首地址的偏移都是成员大小的整数倍,如不满足，对前一个成员填充字节以满足</mark> </li>\n<li><mark class=\"hl-label pink\">规则3:结构体的总大小为结构体对最大成员大小的整数倍,如不满足，最后填充字节以满足</mark> </li>\n</ul>\n<h3 id=\"测试案例\"><a href=\"#测试案例\" class=\"headerlink\" title=\"测试案例\"></a>测试案例</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//---32位平台默认对齐4字节，64位平台默认对齐8字节</span></span><br><span class=\"line\"><span class=\"comment\">//32位平台举例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T1</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m1;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> m2;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m3;</span><br><span class=\"line\">  <span class=\"keyword\">short</span> m4;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T2</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T3</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> b;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T4</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> b;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> d;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> e;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> f;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> sex;</span><br><span class=\"line\">  <span class=\"keyword\">float</span> score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout&lt;&lt;<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T1)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout&lt;&lt;<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T2)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout&lt;&lt;<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T3)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test04</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout&lt;&lt;<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T4)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test05</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout&lt;&lt;<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct Person)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">test01</span>(); <span class=\"comment\">//16, m1--&gt;4  m2--&gt;4  m3--&gt;4  m4--&gt;4</span></span><br><span class=\"line\">  <span class=\"built_in\">test02</span>();<span class=\"comment\">//2</span></span><br><span class=\"line\">  <span class=\"built_in\">test03</span>();<span class=\"comment\">//8</span></span><br><span class=\"line\">  <span class=\"built_in\">test04</span>();<span class=\"comment\">//12</span></span><br><span class=\"line\">  <span class=\"built_in\">test05</span>();<span class=\"comment\">//24</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"T1\"><a href=\"#T1\" class=\"headerlink\" title=\"T1\"></a>T1</h5><table>\n<thead>\n<tr>\n<th>0~3</th>\n<th>4</th>\n<th>5~7</th>\n<th>8~11</th>\n<th>12~13</th>\n<th>14~15</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>m1</td>\n<td>m2</td>\n<td>填充</td>\n<td>m3</td>\n<td>m4</td>\n<td>填充</td>\n</tr>\n</tbody></table>\n<ul>\n<li>m3 成员变量相对结构体首地址的偏移量不是sizeof(int),也就是不是成员大小的整数倍，故前面成员填充满足，走到起始地址为8</li>\n<li>最后的填充依据规则3，结构体整个的地址是最大成员大小的整数倍，后面14～15填充</li>\n</ul>\n<h5 id=\"T2\"><a href=\"#T2\" class=\"headerlink\" title=\"T2\"></a>T2</h5><table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>b</td>\n</tr>\n</tbody></table>\n<h5 id=\"T3\"><a href=\"#T3\" class=\"headerlink\" title=\"T3\"></a>T3</h5><table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2~3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>b</td>\n<td>填充</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">4~7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">c</td>\n</tr>\n</tbody></table>\n<h5 id=\"T4\"><a href=\"#T4\" class=\"headerlink\" title=\"T4\"></a>T4</h5><table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n<td>d</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>4</th>\n<th>5~7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>e</td>\n<td>填充</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">8~11</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">f</td>\n</tr>\n</tbody></table>\n<h5 id=\"T5\"><a href=\"#T5\" class=\"headerlink\" title=\"T5\"></a>T5</h5><table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name[0]</td>\n<td>name[1]</td>\n<td>name[2]</td>\n<td>name[3]</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name[4]</td>\n<td>name[5]</td>\n<td>name[6]</td>\n<td>name[7]</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name[8]</td>\n<td>name[9]</td>\n<td>填充</td>\n<td>填充</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">12~15</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">age</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>16</th>\n<th>17~19</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sex</td>\n<td>填充</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">20~23</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">score</td>\n</tr>\n</tbody></table>\n<h5 id=\"T6\"><a href=\"#T6\" class=\"headerlink\" title=\"T6\"></a>T6</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">s1</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">short</span> a;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">s2</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">s1</span> <span class=\"title\">d</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> e;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(s1)---&gt;<span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(s2)---&gt;<span class=\"number\">32</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">s1</span></span><br><span class=\"line\"><span class=\"comment\">aa******</span></span><br><span class=\"line\"><span class=\"comment\">bbbbbbbb</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">s2</span></span><br><span class=\"line\"><span class=\"comment\">c*******</span></span><br><span class=\"line\"><span class=\"comment\">aa******</span></span><br><span class=\"line\"><span class=\"comment\">bbbbbbbb</span></span><br><span class=\"line\"><span class=\"comment\">eeeeeeee</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"offsetof宏的使用\"><a href=\"#offsetof宏的使用\" class=\"headerlink\" title=\"offsetof宏的使用\"></a>offsetof宏的使用</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  #define OFFSETOF(type,member)   (unsigned int) (&amp;((type*)0)-&gt;member)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> sex;</span><br><span class=\"line\">&#125;PERSON;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;name = %lu\\n&quot;</span>,offsetof(PERSON,name)) ;<span class=\"comment\">//0</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;age = %lu\\n&quot;</span>,offsetof(PERSON,age));<span class=\"comment\">//12</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sex = %lu\\n&quot;</span>,offsetof(PERSON,sex));<span class=\"comment\">//16</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gscebec13dj31do0u0aet.jpg\"></p>\n<h3 id=\"字节对齐实际应用\"><a href=\"#字节对齐实际应用\" class=\"headerlink\" title=\"字节对齐实际应用\"></a>字节对齐实际应用</h3><h4 id=\"合适的设计可以节省空间\"><a href=\"#合适的设计可以节省空间\" class=\"headerlink\" title=\"合适的设计可以节省空间\"></a>合适的设计可以节省空间</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T2</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m1;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> m2;</span><br><span class=\"line\">  <span class=\"keyword\">short</span> m4;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m3;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T2) ---&gt;<span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"跨平台通信\"><a href=\"#跨平台通信\" class=\"headerlink\" title=\"跨平台通信\"></a>跨平台通信</h4><ul>\n<li><p>可以指定字节对齐的字节数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> pack(1) <span class=\"comment\">//1字节对齐</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T1</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m1;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> m2;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m3;</span><br><span class=\"line\">  <span class=\"keyword\">short</span> m4;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> pack() <span class=\"comment\">//取消自定义对齐字节数</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T1) ---&gt;<span class=\"number\">11</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//------------------------------------------</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T2</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m1;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> m2;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m3;</span><br><span class=\"line\">  <span class=\"keyword\">short</span> m4;</span><br><span class=\"line\">&#125;__attribute__((packed)); <span class=\"comment\">//取消结构在编译过程中的优化对齐，也可以认为是1字节对齐</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct T2) ---&gt; <span class=\"number\">11</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//------------------------------------------</span></span><br><span class=\"line\">  <span class=\"comment\">//自己填充</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">T3</span></span></span><br><span class=\"line\"><span class=\"class\"> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> m1;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> m2;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> r1[<span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m3;</span><br><span class=\"line\">  <span class=\"keyword\">short</span> m4;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> r2[<span class=\"number\">2</span>];  </span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"动态库和静态库","date":"2020-07-21T16:00:00.000Z","keywords":"动态库,静态库","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gsfupmotihj30fe07b3z2.jpg","_content":"\n### 使用库文件的优点\n\n- 项目代码更加简洁，没有过多的源文件需要管理\n- 保护项目代码，以库的方式提供给使用者，使用者无法知道源代码\n\n### 静态库\n\n#### 静态库的制作\n\n- 对源文件编译得到`.o`文件（加参数 -c）\n- `ar`进行打包，生成`.a`静态库文件         \n\n```bash\ngcc  *.c(源文件) -c \nar rcs libxxx.a *.o\n\t- c 创建一个库--创建\n\t- s 创建目标文件索引--编号索引\n\t- r 库中插入模块\n```\n\n#### 静态库的使用\n\n- 需要静态库文件和对应头文件      \n\n```bash\ngcc main.c -o app -L 库的路径（绝对或者相对都OK） -l库的名字（去头lib,去尾.a)\n```\n\n\n\n### 动态库\n\n#### 动态库的制作\n\n- 编译生成`.o`文件，必须加参数`-fpic`\n- `gcc` 生成对应库，加参数`-shared`\n\n```bash\ngcc 源文件(*.c) -c -fpic\ngcc -shared *.o -o libxxx.so\n```\n\n#### 动态库的使用和静态库保持一致\n\n#### 找不见库.so的问题\n\n##### 第一种\n\n- 使用环境变量 LD_LIBRARY_PATH\n- 动态库的绝对路径添加到该环境变量中\n  - LD_LIBRARY_PATH= /usr/lib/xxxx\n  - export LD_LIBRARY_PATH\n    - 直接在shell中设置--临时当前终端生效\n    - 写入配置文件\n      - ～/.bashrc - 用户级别\n      - /etc/prefile - 系统级别          \n\n##### 第二种\n\n- 给动态库设置软连接 /usr/xxx\n- 将软连接放到 /usr/lib  /usr/lib64  /lib   /lib64\n- sudo ln -s /usr/xxx/xxx.so   /usr/lib\n\n##### 第三种\n\n- 刷新\t/etc/ld.so.cache\n  - vi /etc/ld.so.conf\n    - 动态库的绝对路径写入配置文件    \n  - sudo ldconfig -v\n\n### 各自优缺点\n\n|      | 静态库                                                       | 动态库                             |\n| ---- | ------------------------------------------------------------ | ---------------------------------- |\n| 优点 | 静态库打包到程序中，加载快；发布程序无需提供库文件，移植方便 | 多个进程共享库文件；方便升级       |\n| 缺点 | 库文件会被加载多次，占用资源；更新库文件需要重新编译         | 加载较慢；发布程序需要库文件的支持 |\n\n![静态库](https://tva1.sinaimg.cn/large/008i3skNly1gsfvew439gj30dm0bf0u4.jpg)\n\n\n\n![动态库](https://tva1.sinaimg.cn/large/008i3skNly1gsfvf95qxyj30cz0az75i.jpg)\n\n### 参考视频\n\n{% btn 'https://www.bilibili.com/video/BV13U4y1p7kB',b站视频,far fa-hand-point-right%}","source":"_posts/库.md","raw":"---\ntitle: 动态库和静态库\ndate: 2020-07-22\ntag: \n  - 动态库\n  - 静态库\ncategories:\n  - C++\nkeywords: \"动态库,静态库\"\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gsfupmotihj30fe07b3z2.jpg\n---\n\n### 使用库文件的优点\n\n- 项目代码更加简洁，没有过多的源文件需要管理\n- 保护项目代码，以库的方式提供给使用者，使用者无法知道源代码\n\n### 静态库\n\n#### 静态库的制作\n\n- 对源文件编译得到`.o`文件（加参数 -c）\n- `ar`进行打包，生成`.a`静态库文件         \n\n```bash\ngcc  *.c(源文件) -c \nar rcs libxxx.a *.o\n\t- c 创建一个库--创建\n\t- s 创建目标文件索引--编号索引\n\t- r 库中插入模块\n```\n\n#### 静态库的使用\n\n- 需要静态库文件和对应头文件      \n\n```bash\ngcc main.c -o app -L 库的路径（绝对或者相对都OK） -l库的名字（去头lib,去尾.a)\n```\n\n\n\n### 动态库\n\n#### 动态库的制作\n\n- 编译生成`.o`文件，必须加参数`-fpic`\n- `gcc` 生成对应库，加参数`-shared`\n\n```bash\ngcc 源文件(*.c) -c -fpic\ngcc -shared *.o -o libxxx.so\n```\n\n#### 动态库的使用和静态库保持一致\n\n#### 找不见库.so的问题\n\n##### 第一种\n\n- 使用环境变量 LD_LIBRARY_PATH\n- 动态库的绝对路径添加到该环境变量中\n  - LD_LIBRARY_PATH= /usr/lib/xxxx\n  - export LD_LIBRARY_PATH\n    - 直接在shell中设置--临时当前终端生效\n    - 写入配置文件\n      - ～/.bashrc - 用户级别\n      - /etc/prefile - 系统级别          \n\n##### 第二种\n\n- 给动态库设置软连接 /usr/xxx\n- 将软连接放到 /usr/lib  /usr/lib64  /lib   /lib64\n- sudo ln -s /usr/xxx/xxx.so   /usr/lib\n\n##### 第三种\n\n- 刷新\t/etc/ld.so.cache\n  - vi /etc/ld.so.conf\n    - 动态库的绝对路径写入配置文件    \n  - sudo ldconfig -v\n\n### 各自优缺点\n\n|      | 静态库                                                       | 动态库                             |\n| ---- | ------------------------------------------------------------ | ---------------------------------- |\n| 优点 | 静态库打包到程序中，加载快；发布程序无需提供库文件，移植方便 | 多个进程共享库文件；方便升级       |\n| 缺点 | 库文件会被加载多次，占用资源；更新库文件需要重新编译         | 加载较慢；发布程序需要库文件的支持 |\n\n![静态库](https://tva1.sinaimg.cn/large/008i3skNly1gsfvew439gj30dm0bf0u4.jpg)\n\n\n\n![动态库](https://tva1.sinaimg.cn/large/008i3skNly1gsfvf95qxyj30cz0az75i.jpg)\n\n### 参考视频\n\n{% btn 'https://www.bilibili.com/video/BV13U4y1p7kB',b站视频,far fa-hand-point-right%}","slug":"库","published":1,"updated":"2021-07-13T18:17:19.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xf80019k057hx3gbv9v","content":"<h3 id=\"使用库文件的优点\"><a href=\"#使用库文件的优点\" class=\"headerlink\" title=\"使用库文件的优点\"></a>使用库文件的优点</h3><ul>\n<li>项目代码更加简洁，没有过多的源文件需要管理</li>\n<li>保护项目代码，以库的方式提供给使用者，使用者无法知道源代码</li>\n</ul>\n<h3 id=\"静态库\"><a href=\"#静态库\" class=\"headerlink\" title=\"静态库\"></a>静态库</h3><h4 id=\"静态库的制作\"><a href=\"#静态库的制作\" class=\"headerlink\" title=\"静态库的制作\"></a>静态库的制作</h4><ul>\n<li>对源文件编译得到<code>.o</code>文件（加参数 -c）</li>\n<li><code>ar</code>进行打包，生成<code>.a</code>静态库文件         </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc  *.c(源文件) -c </span><br><span class=\"line\">ar rcs libxxx.a *.o</span><br><span class=\"line\">\t- c 创建一个库--创建</span><br><span class=\"line\">\t- s 创建目标文件索引--编号索引</span><br><span class=\"line\">\t- r 库中插入模块</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"静态库的使用\"><a href=\"#静态库的使用\" class=\"headerlink\" title=\"静态库的使用\"></a>静态库的使用</h4><ul>\n<li>需要静态库文件和对应头文件      </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc main.c -o app -L 库的路径（绝对或者相对都OK） -l库的名字（去头lib,去尾.a)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"动态库\"><a href=\"#动态库\" class=\"headerlink\" title=\"动态库\"></a>动态库</h3><h4 id=\"动态库的制作\"><a href=\"#动态库的制作\" class=\"headerlink\" title=\"动态库的制作\"></a>动态库的制作</h4><ul>\n<li>编译生成<code>.o</code>文件，必须加参数<code>-fpic</code></li>\n<li><code>gcc</code> 生成对应库，加参数<code>-shared</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc 源文件(*.c) -c -fpic</span><br><span class=\"line\">gcc -shared *.o -o libxxx.so</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态库的使用和静态库保持一致\"><a href=\"#动态库的使用和静态库保持一致\" class=\"headerlink\" title=\"动态库的使用和静态库保持一致\"></a>动态库的使用和静态库保持一致</h4><h4 id=\"找不见库-so的问题\"><a href=\"#找不见库-so的问题\" class=\"headerlink\" title=\"找不见库.so的问题\"></a>找不见库.so的问题</h4><h5 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h5><ul>\n<li>使用环境变量 LD_LIBRARY_PATH</li>\n<li>动态库的绝对路径添加到该环境变量中<ul>\n<li>LD_LIBRARY_PATH= /usr/lib/xxxx</li>\n<li>export LD_LIBRARY_PATH<ul>\n<li>直接在shell中设置–临时当前终端生效</li>\n<li>写入配置文件<ul>\n<li>～/.bashrc - 用户级别</li>\n<li>/etc/prefile - 系统级别          </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h5><ul>\n<li>给动态库设置软连接 /usr/xxx</li>\n<li>将软连接放到 /usr/lib  /usr/lib64  /lib   /lib64</li>\n<li>sudo ln -s /usr/xxx/xxx.so   /usr/lib</li>\n</ul>\n<h5 id=\"第三种\"><a href=\"#第三种\" class=\"headerlink\" title=\"第三种\"></a>第三种</h5><ul>\n<li>刷新    /etc/ld.so.cache<ul>\n<li>vi /etc/ld.so.conf<ul>\n<li>动态库的绝对路径写入配置文件    </li>\n</ul>\n</li>\n<li>sudo ldconfig -v</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"各自优缺点\"><a href=\"#各自优缺点\" class=\"headerlink\" title=\"各自优缺点\"></a>各自优缺点</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>静态库</th>\n<th>动态库</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>优点</td>\n<td>静态库打包到程序中，加载快；发布程序无需提供库文件，移植方便</td>\n<td>多个进程共享库文件；方便升级</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>库文件会被加载多次，占用资源；更新库文件需要重新编译</td>\n<td>加载较慢；发布程序需要库文件的支持</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfvew439gj30dm0bf0u4.jpg\" alt=\"静态库\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfvf95qxyj30cz0az75i.jpg\" alt=\"动态库\"></p>\n<h3 id=\"参考视频\"><a href=\"#参考视频\" class=\"headerlink\" title=\"参考视频\"></a>参考视频</h3><a class=\"btn-beautify button--animated \" href=\"https://www.bilibili.com/video/BV13U4y1p7kB\" \n  title=\"b站视频\"><i class=\"far fa-hand-point-right\"></i><span>b站视频</span></a>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"使用库文件的优点\"><a href=\"#使用库文件的优点\" class=\"headerlink\" title=\"使用库文件的优点\"></a>使用库文件的优点</h3><ul>\n<li>项目代码更加简洁，没有过多的源文件需要管理</li>\n<li>保护项目代码，以库的方式提供给使用者，使用者无法知道源代码</li>\n</ul>\n<h3 id=\"静态库\"><a href=\"#静态库\" class=\"headerlink\" title=\"静态库\"></a>静态库</h3><h4 id=\"静态库的制作\"><a href=\"#静态库的制作\" class=\"headerlink\" title=\"静态库的制作\"></a>静态库的制作</h4><ul>\n<li>对源文件编译得到<code>.o</code>文件（加参数 -c）</li>\n<li><code>ar</code>进行打包，生成<code>.a</code>静态库文件         </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc  *.c(源文件) -c </span><br><span class=\"line\">ar rcs libxxx.a *.o</span><br><span class=\"line\">\t- c 创建一个库--创建</span><br><span class=\"line\">\t- s 创建目标文件索引--编号索引</span><br><span class=\"line\">\t- r 库中插入模块</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"静态库的使用\"><a href=\"#静态库的使用\" class=\"headerlink\" title=\"静态库的使用\"></a>静态库的使用</h4><ul>\n<li>需要静态库文件和对应头文件      </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc main.c -o app -L 库的路径（绝对或者相对都OK） -l库的名字（去头lib,去尾.a)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"动态库\"><a href=\"#动态库\" class=\"headerlink\" title=\"动态库\"></a>动态库</h3><h4 id=\"动态库的制作\"><a href=\"#动态库的制作\" class=\"headerlink\" title=\"动态库的制作\"></a>动态库的制作</h4><ul>\n<li>编译生成<code>.o</code>文件，必须加参数<code>-fpic</code></li>\n<li><code>gcc</code> 生成对应库，加参数<code>-shared</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc 源文件(*.c) -c -fpic</span><br><span class=\"line\">gcc -shared *.o -o libxxx.so</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态库的使用和静态库保持一致\"><a href=\"#动态库的使用和静态库保持一致\" class=\"headerlink\" title=\"动态库的使用和静态库保持一致\"></a>动态库的使用和静态库保持一致</h4><h4 id=\"找不见库-so的问题\"><a href=\"#找不见库-so的问题\" class=\"headerlink\" title=\"找不见库.so的问题\"></a>找不见库.so的问题</h4><h5 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h5><ul>\n<li>使用环境变量 LD_LIBRARY_PATH</li>\n<li>动态库的绝对路径添加到该环境变量中<ul>\n<li>LD_LIBRARY_PATH= /usr/lib/xxxx</li>\n<li>export LD_LIBRARY_PATH<ul>\n<li>直接在shell中设置–临时当前终端生效</li>\n<li>写入配置文件<ul>\n<li>～/.bashrc - 用户级别</li>\n<li>/etc/prefile - 系统级别          </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h5><ul>\n<li>给动态库设置软连接 /usr/xxx</li>\n<li>将软连接放到 /usr/lib  /usr/lib64  /lib   /lib64</li>\n<li>sudo ln -s /usr/xxx/xxx.so   /usr/lib</li>\n</ul>\n<h5 id=\"第三种\"><a href=\"#第三种\" class=\"headerlink\" title=\"第三种\"></a>第三种</h5><ul>\n<li>刷新    /etc/ld.so.cache<ul>\n<li>vi /etc/ld.so.conf<ul>\n<li>动态库的绝对路径写入配置文件    </li>\n</ul>\n</li>\n<li>sudo ldconfig -v</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"各自优缺点\"><a href=\"#各自优缺点\" class=\"headerlink\" title=\"各自优缺点\"></a>各自优缺点</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>静态库</th>\n<th>动态库</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>优点</td>\n<td>静态库打包到程序中，加载快；发布程序无需提供库文件，移植方便</td>\n<td>多个进程共享库文件；方便升级</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>库文件会被加载多次，占用资源；更新库文件需要重新编译</td>\n<td>加载较慢；发布程序需要库文件的支持</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfvew439gj30dm0bf0u4.jpg\" alt=\"静态库\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfvf95qxyj30cz0az75i.jpg\" alt=\"动态库\"></p>\n<h3 id=\"参考视频\"><a href=\"#参考视频\" class=\"headerlink\" title=\"参考视频\"></a>参考视频</h3><a class=\"btn-beautify button--animated \" href=\"https://www.bilibili.com/video/BV13U4y1p7kB\" \n  title=\"b站视频\"><i class=\"far fa-hand-point-right\"></i><span>b站视频</span></a>"},{"title":"redis的简单使用(一)","date":"2021-03-21T16:00:00.000Z","keywords":"redis,缓存数据库","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gsi1y87n53j30aa06vweq.jpg","highlight_shrink":false,"sticky":3,"_content":"\n### 关系型数据库\n\n- NoSQL 数据库的四大分类\n  - KV键值，典型就是 redis\n  - 文档型数据库MongoDB \n  - 列存储数据库 HBase\n  - 图关系数据库 Neo4J\n\n### redis 是什么？\n\n- 开源的key-value 的存储系统，将大部分数据存储在内存中。\n- redis基于内存操作，读写数据很快，作为内存型缓存服务器，搭配mysql可以做到数据持久化\n- redis基于C语言开发，不需要过多依赖；客户端提供各种语言版本。      \n\n### redis优点\n\n- 完全在内存中保存数据库，使用磁盘为了持久化;速度异常快速\n- 有丰富的数据类型，string，list，set，sorted set,hash\n- 操作都是原子的，操作不会在执行完毕前被打断。从而确保当两个客户同时访问 redis 服务器得到的是更新后的值\n\n### 相关资源\n\n{% btn 'http://redis.cn',中文网站,far fa-hand-point-right %}\n\n### redis 安装\n\n#### 下载对应软件包\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsi2rwxb4ej30di07ot8v.jpg\" alt=\"redis 安装包\" style=\"zoom:50%;\" />\n\n#### 解压后，开始编译\n\n```bash\nmake\nsudo make install\n```\n\n#### 配置文件redis.cnf 在安装包里面\n\n> 配置文件分成几大块：\n>\n> 1) 通用(general)\n>\n> 2) 快照(snapshotting)\n>\n> 3) 复制(replication)\n>\n> 4) 安全(security)\n>\n> 5) 限制(limits)\n>\n> 6) 追加模式(append only mode)\n>\n> 7) LUA脚本(lua scripting)\n>\n> 8) 慢日志(slow log)\n>\n> 9) 事件通知(event notification).       \n\n```ini\ndaemonize no\n守护进程\n默认情况下，redis不是在后台运行的。如果需要在后台运行，把该项的值更改为yes。\n\npidfile /var/run/redis.pid\n当redis在后台运行的时候，redis默认会把pid文件放在/var/run/redis.pid，你可以配置到其他位置。当运行多个redis服务时，需要指定不同的pid文件和端口。\n\nport 6379\n指定redis运行的端口，默认是6379。\n\nbind 127.0.0.1\n指定redis只接收来自于该IP地址的请求看，如果不进行设置，那么将处理所有请求。在生产环境中最好设置该项。\n远程连接的话，需要把这行注释掉\n\n\t\ttimeout 多长时间的等待，就会断连接,0表示永远连着\n\t\t\n\t\tkeepalive 心跳检测\n\nprotected-mode no\n远程访问需要设置为 no\n\nloglevel debug\n指定日志记录级别，其中redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose。\n1．debug表示记录很多信息,用于开发和测试\n2．verbose表示记录有用的信息, 但不像debug会记录那么多\n3．notice表示普通的verbose，常用于生产环境\n4．warning 表示只有非常重要或者严重的信息会记录到日志\n\nlogfile /var/log/redis/redis.log\n配置log文件地址,默认值为stdout。若后台模式会输出到/dev/null。\n\ndatabases 16\n可用数据库数，默认值为16，默认数据库为0，数据库范围在0~15之间切换，彼此隔离。\n\nsave\n保存数据到磁盘，格式为save，指出在多长时间内，有多少次更新操作，就将数据同步到数据文件rdb。相当于条件触发抓取快照，这个可以多个条件配合。 \n\n save 900 1 -- 900秒之内有1个keys发生变化时\n save 300 10 -- 300秒之内有10个keys发生变化时\n save 60 10000 -- 60秒之内有10000个keys发生变化时\n\nrdbcompression yes\n存储至本地数据库时(持久化到rdb文件)是否压缩数据，默认为yes。\n\ndbfilename dump.rdb\n本地持久化数据库文件名，默认值为dump.rdb。\n\ndir ./\n工作目录，数据库镜像备份的文件放置的路径。这里的路径跟文件名要分开配置是因为redis在进行备份时，先会将当前数据库的状态写入到一个临时文件中，等备份完成时，再把该临时文件替换为上面所指定的文件。 而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中，AOF文件也会存放在这个目录下面。 注意这里必须指定一个目录而不是文件。\n\nslaveof\n主从复制，设置该数据库为其他数据库的从数据库。设置当本机为slave服务时，设置master服务的IP地址及端口。 在redis启动时,它会自动从master进行数据同步。\n\nmasterauth\n当master服务设置了密码保护时(用requirepass制定的密码)slave服务连接master的密码。\n\nslave-serve-stale-data yes\n当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：\n如果slave-serve-stale-data设置为 yes(默认设置)，从库会继续相应客户端的请求。\n如果slave-serve-stale-data是指为no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误\"SYNC with master in progress\"。\n\nrepl-ping-slave-period 10\n从库会按照一个时间间隔向主库发送PING，可以通过repl-ping-slave-period设置这个时间间隔,默认是10秒。\n\nrepl-timeout 60\n设置主库批量数据传输时间或者ping回复时间间隔，默认值是60秒，一定要确保repl-timeout大于repl-ping-slave-period。\n\nrequirepass foobared\n设置客户端连接后进行任何其他指定前需要使用的密码。因为redis速度相当快，所以在一台比较好的服务器平台下, 一个外部的用户可以在一秒钟进行150K次的密码尝试，这意味着你需要指定非常强大的密码来防止暴力破解。\n\nrename command CONFIG \"\"\n命令重命名，在一个共享环境下可以重命名相对危险的命令，比如把CONFIG重名为一个不容易猜测的字符：\nrename-command CONFIG  b840fc02d524045429941cc15f59e41cb7be6c52\n\n如果想删除一个命令，直接把它重命名为一个空字符\"\"即可：rename-command CONFIG \"\"。\n\nmaxclients 128\n设置同一时间最大客户端连接数，默认无限制。redis可以同时打开的客户端连接数为redis进程可以打开的最大文件描述符数。 \n\n如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，redis会关闭新的连接并向客户端返回max number of clients reached错误信息。\n\nmaxmemory \n指定redis最大内存限制。redis在启动时会把数据加载到内存中，达到最大内存后，redis会先尝试清除已到期或即将到期的key，redis同时也会移除空的list对象。当此方法处理后,仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。\n\n注意：redis新的vm机制，会把key存放内存，value会存放在swap区。\n\nmaxmemory-policy volatile-lru\n当内存达到最大值的时候redis会选择删除哪些数据呢？有五种方式可供选择：\n1．volatile-lru代表利用LRU算法移除设置过期时间的key(LRU：最近使用LeastRecentlyUsed)\n2．allkeys-lru代表利用LRU算法移除任何key\n3．volatile-random代表移除设置过过期时间的随机key\n4．allkeys_random代表移除一个随机的key\n5． volatile-ttl代表移除即将过期的key(minor TTL)\n6． noeviction代表不移除任何key，只是返回一个写错误\n\n注意：对于上面的策略，如果没有合适的key可以移除，写的时候redis会返回一个错误。\n\nappendonly no\n默认情况下，redis会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁。 如果发生诸如拉闸限电、拔插头等状况，那么将造成比较大范围的数据丢失，所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式。\n\n开启append only模式之后，redis会把所接收到的每一次写操作请求都追加到appendonly. aof文件中。当redis重新启动时，会从该文件恢复出之前的状态，但是这样会造成appendonly. aof文件过大，所以redis还支持BGREWRITEAOF指令对appendonly.aof。\n\nappendfilename appendonly.aof\nAOF文件名称，默认为\"appendonly.aof\"。\n\nappendfsync everysec\nredis支持三种同步AOF文件的策略：\n1．no代表不进行同步,系统去操作\n2．always代表每次有写操作都进行同步\n3．everysec代表对写操作进行累积，每秒同步一次，默认是\"everysec\"，按照速度和安全折中这是最好的\n\nslowlog-log-slower-than 10000\n记录超过特定执行时间的命令。执行时间不包括I/O计算，比如连接客户端，返回结果等。只是命令执行时间，可以通过两个参数设置slow log：一个是告诉Redis执行超过多少时间被记录的参数slowlog-log-slower-than(微妙)，另一个是slow log 的长度。\n\n当一个新命令被记录的时候最早的命令将被从队列中移除，下面的时间以微妙微单位，因此1000000代表一分钟。注意制定一个负数将关闭慢日志，而设置为0将强制每个命令都会记录。\n\nhash-max-zipmap-entries 512 && hash-maxz-ipmap-value 64\n当hash中包含超过指定元素个数并且最大的元素没有超过临界时，hash将以一种特殊的编码方式(大大减少内存使用)来存储，这里可以设置这两个临界值。Redis Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现。这个Hash的成员比较少时redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap。当成员数量增大时会自动转成真正的HashMap，此时encoding为ht。\n\nhash-max-zipmap-entries 512 512\nlist数据类型多少节点以下会采用去指针的紧凑存储格式。\n\nlist-max-ziplist-value 64\n数据类型节点值大小小于多少字节会采用紧凑存储格式。\n\nsetmaxintsetentries 512\nset数据类型内部数据如果全部是数值型,且包含多少节点以下会采用紧凑格式存储。\n\nzsetmaxziplistentries 128\nzsort数据类型多少节点以下会采用去指针的紧凑存储格式。\n\nzsetmaxziplistvalue 64\nzsort数据类型节点值大小小于多少字节会采用紧凑存储格式。\n\nactiverehashing yes\nredis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。 \n\n当你的使用场景中，有非常严格的实时性需要，不能够接受redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。\n\n\t\t\t#设置密码\n\t\t\tconfig set requirepass 密码\n\t\t\t\n\t\t\t#用密码登录\n\t\t\tauth 密码\n```\n\n### redis 可视化工具\n\nMac版 `https://www.macwk.com/soft/redis-desktop-manager` \n\n### redis 启动服务\n\n#### 启动server\n\n`redis-server`\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshkkun5znj31cw0u0gw6.jpg\" alt=\"image-20210715132834049\" style=\"zoom:67%;\" />\n\n#### 也可以指定配置文件启动\n\n`redis-server ./redis.conf`\n\n![image-20210715133359786](https://tva1.sinaimg.cn/large/008i3skNly1gshkqhqqt0j31mm06awhp.jpg)\n\n#### 打开就客户端连接服务器\n\n`redis-cli`\n\n#### 也可以远程连接，前提是配置过redis.conf,并以这个配置文件启动\n\n`redis-cli -h 192.168.33.33 -p 8899`\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshmmlan8uj319g08qt9u.jpg\" alt=\"远程连接redis server ，关闭保护模式\" style=\"zoom:67%;\" />\n\n### redis 数据类型\n\n| redis数据类型 | 含义     |\n| ------------- | -------- |\n| string        | 字符串   |\n| list          | 列表     |\n| hash          | 字典     |\n| set           | 集合     |\n| sorted set    | 有序集合 |\n| pub/sub       | 订阅     |\n| transactions  | 事务     |\n\n{% btn 'http://redis.cn/commands.html',数据类型相关操作指令参考文档,far fa-hand-point-right %}\n\n{% btn 'http://doc.redisfans.com',命令速查,far fa-hand-point-right %}\n\n#### key的操作\n\n>DBSIZE \tkey的个数\n>\n>FIUSHDB   删当前库\n>\n>FLUSHALL  删所有库\n>\n>keys pattern  查找所有符合给定模式pattern （正则表达式）的key\n>\n>keys *  所有的key\n>\n>exists key 存在返回 1 ，不存在返回 0\n>\n>del key 删除对应的key值\n>\n>type key 返回key对应value值的数据类型\n>\n>expire key seconds     seconds 秒后key自动删除\n>\n>TTL key 查看key剩余的时间,-1 表示永不过期\n>\n>persist key 清除生存时间\n>\n>pexpire key milliseconds 设置生存时间为x x x毫秒\n>\n>rename key newkey key的重命名\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshnaa0m88j30vs0k0n0o.jpg\" alt=\"image-20210715150212683\" style=\"zoom:50%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsi2qw1uc4j30s60i075x.jpg\" alt=\"image-20210715235709133\" style=\"zoom:50%;\" />\n\n#### string 字符串\n\n- string是简单的key-value 的类型，value不仅是string，也可以是数字。\n- string是二进制安全的，可以包含任意的数据类型，string 可以看作是byte 数组，上限为1G字节。\n\n```c\nstruct redis_string\n{\n\tlong len;\n\tlong free;\n\tchar buf[];\n};\n```\n\n- len 数组buf的长度\n- free 数组中可用的字节数\n- buf char类型数组，用于存储实际的字符串内容\n\n> set key value 设置key对应的值为string类型的value\n>\n> get key 获取key对应的value值，key不存在返回nil\n>\n> append key value\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshn46bfldj30pu0as75s.jpg\" alt=\"image-20210715145620961\" style=\"zoom:50%;\" />\n\n>setnx key value   key存在什么也不做，key不存在，相当于set\n>\n>msetnx key1 value1 key2 value2 有一个存在就不成功\n>\n>setex key seconds value 设置key对应字符串value，并且设置key在给定的seconds时间之后超时过期\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshngy25itj30us0j8q6e.jpg\" alt=\"image-20210715150837301\" style=\"zoom:50%;\" />\n\n>setrange key offset value  覆盖key对应的string的一部分，从指定的offset处开始，覆盖value的长度。如果offset比当前key对应string还要长，那这个string后面就补0以达到offset。\n>\n>incr key 1\n>\n>incrby  key 3  一次性加3\n>\n>dear key 1   \n>\n>nearby key 3\n>\n>setrange  key 0  10 从头开始，前两个字符设置为10\n>\n>getrange key start end 获取头到尾的字符\n\n<img src=\"/Users/sunguosheng/Library/Application%20Support/typora-user-images/image-20210715153432030.png\" alt=\"image-20210715153432030\" style=\"zoom: 50%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsho8vjd4pj30ym0dmwh1.jpg\" alt=\"image-20210715153527907\" style=\"zoom:50%;\" />\n\n> 批量的存取         \n>\n> mset key1 value1 key2 value2\n>\n> mget key1 key2 key3           \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshodd5w2sj317m08yq4j.jpg\" alt=\"image-20210715153946272\" style=\"zoom:50%;\" />\n\n### list 列表\n\n- 本质双端链表\n- 我们可以轻松地实现最新消息排行等功能(比如新浪微博的TimeLine )。List 的另一个应用就是消息队列，可以利用List的 PUSH操作，将任务存在List中，然后工作线程再用POP操作将任务取出进行执行。\n\n>lpush key value1 value2 value3 (每次从左面插入新的value)\n>\n>lpushx key value1 value2 要求当且仅当key存在并且是一个列表\n>\n>lpop key 从左边移除第一个元素\n>\n>lrange key start stop 返回存储在key ,范围为start 到 stop 的所有元素，起始为0，最后为-1\n>\n>ltrim key start stop 让这个key对应的list只保留start到stop范围的元素  ，先截取再赋值\n>\n>lien key. 查看key 对应的value长度 \n\n![image-20210715185643622](https://tva1.sinaimg.cn/large/008i3skNly1gshu2amclfj31jm0p6ju0.jpg)\n\n>list 可以从右端进行插入\n>\n>rpush key value1 value2\n>\n>rpop key\n>\n>可以利用list来模拟栈和队列\n>\n>队列，尾入，头出\n>\n>rpush\t\tlpop\n>\n>栈\n>\n>lpush  lpop 或者 rpush rpop             \n\n### set 无序集合\n\n- 集合指一堆不重复值的组合\n- redis为集合提供了求交集和并集，差集的操作\n- 比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。因为 Redis 非常人性化的为集合提供了求交集、并集、差集等操作，那么就可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。\n\n> sadd key member1 member2 member3 添加一个或者多个member到集合key中\n>\n> smembers key 返回key集合所有的元素\n>\n> srem key member 删除key集合中指定的元素        \n>\n> SRANDMEMBER key num key中随机num个\n>\n> spop key 随机出\n>\n> smove source dest num\n>\n> \n\n\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshvsft7vlj312y0hugn0.jpg\" alt=\"image-20210715195627033\" style=\"zoom:67%;\" />\n\n>sinter key1 key2 key3   求集合的交集\n>\n>sunionstore dest key1 key2 返回给定的多个集合的并集中的所有成员，将结果存储destination集合\n>\n>sunion key1 key2 求并集\n>\n>sdiff key1 key2 求差集（A-B 和 B-A 是不一样的）    \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw0ncqp9j317m0u0q4z.jpg\" alt=\"image-20210715200420420\" style=\"zoom:67%;\" />\n\n### sorted set 有序集合\n\n- 在set的基础上加了一个权重参数 score，排序的依据就是这个score\n- 比如一个存储全班同学成绩的 Sorted Sets，其集合 value 可以是同学的学号，而 score 就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。另外还可以用 Sorted Sets 来做带权重的队列，比如普通消息的 score 为1，重要消息的score 为2，然后工作线程可以选择按 score 的倒序来获取工作任务，让重要的任务优先执行。\n\n>zadd key score1 member1 score2 member2 score3 member3\n>\n>zrange key start stop withscores 从小到大\n>\n>zrevrange key start stop withscores  从大到小       \n>\n>zrangebyscore key start_score end_score 筛选出start_score 到end_score 的value\n>\n>ZRANGEBYSCORE zset01 (20 (60 \t大于20小于60\n>\n>ZRANGEBYSCORE zset01 (20 (60 limit 2 1  大于20小于60的结果集从第三个开始取一个\n>\n>ZREM zset01 v1 删除zset01中的v1\n>\n>ZCOUNT zset01 60 80 取分数再60-80的值的个数\n>\n>ZRANK zset01 v4 取V4在zset01中的下标\n>\n>ZREVRANK zset01 v4  取V4在zset01中的逆序下标\n>\n>ZSCORE zset01 v4 取v4 对应的分数\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw8ayij0j31au0e2q49.jpg\" alt=\"image-20210715201142224\" style=\"zoom:80%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw8wfnrfj310209odgd.jpg\" alt=\"image-20210715201216665\" style=\"zoom: 50%;\" />\n\n### hash 字典\n\n- 键值key 对应的是 field字段名称  value 字段值的结合(也就是还是一个键值对)\n\n>hset key field value 设置key指定的哈希集中的字段和字段值\n>\n>hmset key field1 value1 field2 value2\n>\n>hget key field key键值里面field 字段对应的字段值\n>\n>hmget key field1 field2\n>\n>hgetall key  获取所有的字段和字段值 ，注意和HVALS key --->只获取所有的字段值，不获取对应的字段\n>\n>hkeys key 返回 key 指定的哈希集中所有字段的名字\n>\n>hdel key field 删除key指定的哈希集中字段为field的字段\n>\n>hlen key 返回key指定的哈希集中字段的数量          \n>\n>hexists key field  判断对应的字段值是否存在\n>\n>HVALS key 取所有的字段值\n>\n>\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshwrfu84wj31el0u042h.jpg\" alt=\"image-20210715203005524\" style=\"zoom:80%;\" />   \n\n### pub/sub 发布/订阅\n\n- Pub/Sub 从字面上理解就是发布(Publish)与订阅(Subscribe)。发件人(在 Redis 中的术语称为发布者)发送邮件，而接收器(订户)接收它们。信息传输的链路称为通道。Redis 一个客户端可以订阅任意数量的通道。\n- 在 Redis 中，你可以设定对某一个key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天、群聊等功能。\n\n>subscribe channel 订阅给指定频道的信息。一旦客户端进入订阅状态，客户端就只可接受订阅相关的命令。\n>\n>publish channel message 将信息 message 发送到指定的频道 channel。     \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshx0letjij313808k3zb.jpg\" alt=\"image-20210715203853735\" style=\"zoom:67%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshx0zg4q5j30zk0gsabd.jpg\" alt=\"image-20210715203915977\" style=\"zoom:67%;\" />\n\n### transactions 事务\n\n- 事务允许一组命令在单一步骤中执行，也就是一组命令的集合，也就是一次性批处理\n- redis 事务具有原子性，所有命令要么都执行，要么都不执行\n- 事务中的所有命令作为单个独立的操作  顺序执行\n- 一个队列中，一次性的，顺序性的，拍他性的执行一组命令\n- redis的事务性是部分的，在一些情况下是不保证完整性的，下面的后两种状态就显示出来了这个特点\n\n>multi 标记事务的开始\n>\n>exec 执行事务中排队等待的指令并将链接状态恢复正常\n>\n>discard 放弃本次的批处理操作\n>\n>watch 监视一个或者多个key(这个类似于乐观锁，当中间有人修改之后，就会报错；需要重新 unwatch ，拿下数据，再去操作)\n>\n>unwatch 取消对所有key的监控         \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshxa004egj315t0u0jtv.jpg\" alt=\"image-20210715204755336\" style=\"zoom:80%;\" />\n\n#### 事务的几种状态\n\n- 全部执行成功，每一条命令都入队，然后执行.       \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt79wxeiomj30he0ie0tu.jpg\" alt=\"image-20210806190413020\" style=\"zoom:33%;\" />\n\n- 放弃事务           \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt79yhuny7j30is0d0dgq.jpg\" alt=\"image-20210806190546419\" style=\"zoom:33%;\" />\n\n\n\n- 有一个错误，全部就丢失，这个类似于 编译时的报错\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt7a0oihjsj319o0agt9u.jpg\" alt=\"image-20210806190752712\" style=\"zoom:33%;\" />\n\n- 那个错误就找错误的那个，其余的能执行成功（这个类似于运行时的错误）\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt7aq93i4mj30z00i00u8.jpg\" alt=\"image-20210806193226867\" style=\"zoom:33%;\" />\n\n#### redis的主从复制\n\n- 主机数据更新后，根据配置和策略自动同步到备机的master/slaver机制，Master主要为写，Slave以读为准\n- 主要干的事情就是 读写复制和容载备份\n- 怎么用\n  - 配从库不配主库 `slaveof 主库IP 主库PORT`，每次和`mastre`需要重新连接\n  - 修改配置文件中的端口，log目录，rdb 文件名，对应端口，用来做区分\n  - `slaveof ip port`后，从机会复制主机所有的内容；只有主机可以写的，从机只能读；当主机宕机后，从机不会变成主机，主机重新启动之后，会继续当主机的身份\n  - `info repcalition` 查看机器`replication`信息，需要关注`role`字段值\n\n#### 一主二仆\n\n- init.        \n\n <img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gntzmm3j311w0fa0xe.jpg\" alt=\"image-20210807194315072\" style=\"zoom:50%;\" />\n\n- 一个Master ，两个Slaves\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8goh2xbjj61280i6aff02.jpg\" alt=\"image-20210807194354594\" style=\"zoom:50%;\" />\n\n- 主机日志需要关注的点\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gpj0np5j31140d676p.jpg\" alt=\"image-20210807194454785\" style=\"zoom:50%;\" />\n\n- 备机日志需要关注的点\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gq08fggj311i0bk40i.jpg\" alt=\"image-20210807194522564\" style=\"zoom:50%;\" />\n\n- 几个需要关注的问题\n  - 切入点问题？slave1，slave2 是从头开始备份，还是从切入点开始复制？\n    - --》从头开始复制\n  - 从机是否可写？\n    - --》主机可写，从机不可写\n  - 主机shutdown后，从机是变成主机还是原地等待主机？\n    - 从机原地等待\n  - 主机又回来后，主机新增的记录，从机是否可以顺利的复制？\n    - 从机可以自动与主机相连，也就可以自动同步主机新增的数据 。\n  - 如果slave与Master断开之后，后面还能跟上master的脚步吗？\n    - slave与master断开之后，不会自动重新连接，需要配置进 `redis.conf ####REPLICATION####`\n\n#### 薪火相传\n\n- 去中心化的模式（减轻了master的负担），一个传递一个\n- 上一个的slave可以是下一个的master；中途方向变更后，会重新复制最新的数据\n- `slaveof ip port`            \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8nk2kqy2j31gm0kyjvy.jpg\" alt=\"image-20210807234151934\" style=\"zoom:67%;\" />\n\n\n\n#### 反客为主\n\n- `SLAVEOF no one`使当前数据库停止与其他数据库的同步，转成主数据库\n\n#### 复制的原理\n\n- slave连接到master后，会发出一个`sync`的命令\n- master接收到命令会启动一个存盘进程，后台收集所有用于修改的命令，收集完毕后，会把整个数据传送给slave\n- 全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中\n- 增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步\n- 只要是重新连接master，一次完全同步（全量复制)将被自动执行\n\n\n\n#### 哨兵模式\n\n- 一组sentinel能同时监控多个master\n- 反客为主的自动版，能够监控主机是否故障，故障之后按照投票数将从库变为主库\n- 设置\n  - 调整结构，一个主库带着两个从库\n  - 新建`sentinel.conf`文件，名字绝不能错\n  - 配置哨兵\n    - `sentinel monitor 被监控的数据库名字（自己起）监控的库ip 监控的库port  1（要大于的票数）`\n    - 新恢复的master就变成了slave，也就是master已经易主了\n  - 启动哨兵 `redis-sentinel /sentinel.conf`\n\n#### 复制的缺点\n\n- master到slave会有一些延迟，在业务繁忙的时候就会有更多的延迟\n\n  \n\n### redis 持久化\n\n#### 备份数据\n\n- `save`命令即可创建当前redis 的数据的备份，成功之后，会在服务器启动的目录生成对应的dump.rdb文件，文件名和文件路径都可以进行修改，在配置文件中可以设置对应的属性值，可以用 `CONFIG GET dir`命令张查看redis的启动目录\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshydgo13pj31110u0go0.jpg\" alt=\"image-20210715212551022\" style=\"zoom:67%;\" />\n\n- 会在对应目录 生成dump.rdb\n\n#### 数据恢复\n\n- redis 启动的时候会自动加载备份文件\n\n#### RDB(redia database)持久化方式 （默认）\n\n- 通过快照完成，dump.rdb 文件里面放的是真实的数据，也就是将内存中所有的数据进行快照到硬盘上面\n- 快照的频率在 redis.conf 配置文件里面\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshyjbl1dkj31e90u0gpv.jpg\" alt=\"image-20210715213128304\" style=\"zoom:80%;\" />\n\n- 多个频率设定的条件，只要有一个满足就会备份\n- 如果不想备份，注释掉 save的参数\n- 备份的文件名子和路径可以通过 dir 和 dbfilename 参数设定\n- FLUSHALL 都会触发RDB的备份,但是产生的dump.rdb 文件是空的\n\n>redis实现快照的过程：\n>\n>redis使用fork函数复制一份当前进程(父进程)的副本(子进程)，父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入硬盘中的临时文件，当子进程写入完所有数据后会用该临时文件替换旧的RDB文件，至此一次快照操作完成。在执行fork的时候操作系统(类Unix操作系统)会使用写时复制(copy-on-write)策略，即fork函数发生的一刻父子进程共享同一内存数据，当父进程要更改其中某片数据时(如执行一个写命令)，操作系统会将该片数据复制一份以保证子进程的数据不受影响，所以新的RDB文件存储的是执行fork一刻的内存数据。\n>\n>redis在进行快照的过程中不会修改RDB文件，只有快照结束后才会将旧的文件替换成新的，也就是说任何时候RDB文件都是完整的。这使得我们可以通过定时备份RDB文件来实现redis数据库备份。RDB文件是经过压缩(可以配置rdbcompression参数以禁用压缩节省CPU占用)的二进制格式，所以占用的空间会小于内存中的数据大小，更加利于传输。\n>\n>除了自动快照，还可以手动发送SAVE或BGSAVE命令让redis执行快照，两个命令的区别在于，前者是由主进程进行快照操作, 会阻塞住其他请求，后者会通过fork子进程进行快照操作。\n>\n>redis启动后会读取RDB快照文件，将数据从硬盘载入到内存。根据数据量大小与结构和服务器性能不同，这个时间也不同。通常将一个记录一千万个字符串类型键、大小为1GB的快照文件载入到内存中需要花费20~30秒钟。\n>\n>通过RDB方式实现持久化，一旦redis异常退出，就会丢失最后一次快照以后更改的所有数据。这就需要开发者根据具体的应用场合，通过组合设置自动快照条件的方式来将可能发生的数据损失控制在能够接受的范围。如果数据很重要以至于无法承受任何损失，则可以考虑使用AOF方式进行持久化.              \n\n#### AOF(Append only file) 数据持久化\n\n- 默认没有开启AOF方式\n- `appendonly yes` 开启AOF 方式备份 \n- AOF方式会把执行的每一条命令写指令存进磁盘；恢复的时候，会执行命令，恢复数据。\n- 恢复的时候却需要先执行命令，才会恢复数据，相比RDB比较费时间\n\n- AOF 文件名设定\n\n![image-20210715214354527](https://tva1.sinaimg.cn/large/008i3skNly1gshyw95f1mj31a408ugmh.jpg)\n\n- 刷新硬盘缓存频率\n\n![image-20210715214416705](https://tva1.sinaimg.cn/large/008i3skNly1gshywmog4oj30wy08uq3j.jpg)\n\n- 自动重写的条件\n\n  - 当AOF文件大小是上次rewrite大小的一倍且文件大于64M时就会重写\n\n  - rewrite 重写机制，就优化命令，减下磁盘占用\n\n    \n\n![image-20210715214507252](https://tva1.sinaimg.cn/large/008i3skNly1gshyxi13icj616206i74n02.jpg)\n\n\n\n#### AOF 和 RDB共存的问题\n\n- AOF和RDB会共存\n- 先去加载的是 AOF，当AOF中有错误的时候，`redis-server`会启动失败，需要修复AOF文件，使用redis 带的修复工具进行修复 `redis-check-aof --fix xxx.aof`\n\n#### AOF 和 RDB 对比\n\n- AOF\n  - 优点：备份数据较完成，最多丢失2秒的数据\n  - 缺点：磁盘占用较大和恢复较慢\n- RDB\n  - 优点：恢复数据较快\n  - 缺点：备份频率不容易控制，会丢失最后一次的RDB之后的数据\n\n\n\n### redis 客户端编程\n\n{% btn 'https://github.com/redis/hiredis',下载地址,far fa-hand-point-rigth %}\n\n```bash\nmake \nsudo make install\n```\n\n#### API 说明\n\n```c\nredisContext *redisConnect(const char *ip,int port)\n功能：连接redis数据库\n参数：IP 和 port\n返回值： 成功：redisContext 指针 ；失败 NULL\n---------------------------\nvoid *redisCommand(redisContext *c,const char * formate,...)\n功能：执行命令\n参数：redisConnect的返回值\n  \t命令......\n返回值： 成功：void *,会转换成redisReply类型 ；失败 NULL\n  \ntypedef struct redisReply {\n\tint type; /* REDIS_REPLY_* */\n\tlong long integer; /* The integer when type is REDIS_REPLY_INTEGER */\n\tsize_t len; /* Length of string */\n\tchar *str; /* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING */\n\tsize_t elements; /* number of elements, for REDIS_REPLY_ARRAY */\n\tstruct redisReply **element; /* elements vector for REDIS_REPLY_ARRAY */\n} redisReply;\n---------------------------\nvoid freeReplyObject(void *reply);\n功能：释放redisCommand执行后返回的redisReply所占用的内存\n参数：redisCommand执行后返回的redisReply\n返回值：无\n---------------------------\nvoid redisFree(redisContext *c);\n功能：释放redisConnect()所产生的连接\n参数：redisConnect()所产生的连接\n返回值：无\n```\n\n- redisReply ->type 中字段的标识 \n\n| 状态标识            | 含义                                                         |\n| ------------------- | ------------------------------------------------------------ |\n| REDIS_REPLY_STATUS  | 表示状态，内容通过str字段查看，字符串长度是len字段           |\n| REDIS_REPLY_ERROR   | 表示出错，查看出错信息，如上的str，len字段                   |\n| REDIS_REPLY_INTEGER | 返回整数，从integer字段获取值                                |\n| REDIS_REPLY_NIL     | 没有数据返回                                                 |\n| REDIS_REPLY_STRING  | 返回字符串，查看str，len字段                                 |\n| REDIS_REPLY_ARRAY   | 返回一个数组，查看elements的值(数组个数)，通过element[index] 的方式访问数组元素，每个数组元素是一个redisReply对象的指针。 |\n\n- redisReply->errata 字段查看\n\n| 错误状态标识       | 含义                               |\n| ------------------ | ---------------------------------- |\n| REDIS_OK           | 正常                               |\n| REDIS_ERR_IO       | IO读/写出现异常，通过errno查看原因 |\n| REDIS_ERR_EOF      | 服务器关闭了链接，读结束           |\n| REDIS_ERR_PROTOCOL | 分析redis协议内容出错              |\n| EDIS_ERR_OTHER     | 其他未知的错误                     |\n\n\n\n#### 测试用例\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <stdarg.h>\n#include <string.h>\n#include <assert.h>\n#include </usr/local/include/hiredis/hiredis.h>\n\n#define IP \"10.211.55.11\"\n#define PORT 8899\n\nvoid doWork()\n{\n    //port 8899 ip 10.211.55.11\n    redisContext * c = redisConnect(IP,PORT);\n    if(c->err)\n    {\n        redisFree(c);\n        perror(\"connect redis server fail!\");\n        return;\n    }\n\n    puts(\"connect redis server ok!\");\n//----------------\n    const char * command1 = \"set myname sungs\";\n    redisReply * r = (redisReply*)redisCommand(c,command1);\n    if(r == NULL)\n    {\n        redisFree(c);\n        perror(\"command1 error!\");\n        return;\n    }\n\n    if(!(r->type == REDIS_REPLY_STATUS && strcasecmp(r->str,\"ok\") == 0))\n    {\n        printf(\"Failed to execute command[%s]\\n\",command1);\n\t\tfreeReplyObject(r);\n\t\tredisFree(c);\n\t\treturn;\n    }\n\n    freeReplyObject(r);\n\tprintf(\"Succeed to execute command[%s]\\n\", command1);\n//-----------------\n    const char *command2 = \"strlen myname\";\n\n    r = (redisReply *)redisCommand(c,command2);\n    if(r == NULL)\n    {\n        redisFree(c);\n        perror(\"command2 error!\");\n        return ;\n    }\n\n    if(r->type != REDIS_REPLY_INTEGER)\n    {\n        freeReplyObject(r);\n        redisFree(c);\n        perror(\"REDIS_REPLY_INTEGE error\");\n        return;\n    }\n\n    int length = r->integer;\n    freeReplyObject(r);\n    printf(\"Succeed to execute command[%s]--->[%d]\\n\", command2,length);\n\n    const char* command3 = \"get myname\";\n\tr = (redisReply*)redisCommand(c, command3);\n\tif ( r->type != REDIS_REPLY_STRING)\n\t{\n\t\tprintf(\"Failed to execute command[%s]\\n\",command3);\n\t\tfreeReplyObject(r);\n\t\tredisFree(c);\n\t\treturn;\n\t} \n\n\tprintf(\"The value of 'myname' is %s\\n\", r->str);\n\tfreeReplyObject(r);\n\tprintf(\"Succeed to execute command[%s]\\n\", command3);\n\n\tconst char* command4 = \"get key2\";\n\tr = (redisReply*)redisCommand(c, command4);\n\tif ( r->type == REDIS_REPLY_NIL)\n\t{\n\t\tprintf(\"Failed to execute command[%s]\\n\",command4);\n\t\tfreeReplyObject(r);\n\t\tredisFree(c);\n\t\treturn;\n\t} \n\t\n\tfreeReplyObject(r);\n\tprintf(\"Succeed to execute command[%s]\\n\", command4);\n\tredisFree(c);\n\n}\n\n\n\nint main(void)\n{\n\tdoWork();\n\treturn 0;\n}\n```\n\n![image-20210715231818738](https://tva1.sinaimg.cn/large/008i3skNly1gsi1mh7socj31bo0butak.jpg)\n\n### 接口封装\n\n```c\n/**\n * @file   redis_api.h\n * @brief  redis 封装接口\n */\n\n#ifndef _REDIS_OP_H_\n#define _REDIS_OP_H_\n\n#include <hiredis.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <string.h>\n#include \"make_log.h\"\n\n\n#define REDIS_LOG_MODULE          \"database\"\n#define REDIS_LOG_PROC            \"redis\"\n\n#define REDIS_COMMAND_SIZE        300            /* redis Command 指令最大长度 */\n#define FIELD_ID_SIZE            100            /* redis hash表field域字段长度 */\n#define VALUES_ID_SIZE           1024            /* redis        value域字段长度 */\ntypedef char (*RCOMMANDS)[REDIS_COMMAND_SIZE];/* redis 存放批量 命令字符串数组类型 */\ntypedef char (*RFIELDS)[FIELD_ID_SIZE];        /* redis hash表存放批量field字符串数组类型 */\ntypedef char (*RVALUES)[VALUES_ID_SIZE];    /* redis 表存放批量value字符串数组类型 */\n\n\n/* -------------------------------------------*/\n/**\n * @brief  redis tcp模式链接\n *\n * @param ip_str\tredis服务器ip\n * @param port_str\tredis服务器port\n *\n * @returns   \n *\t\t\t成功返回链接句柄 \n *\t\t\t失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_nopwd(char *ip_str, char* port_str);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  redis tcp模式链接\n *\n * @param ip_str    redis服务器ip\n * @param port_str  redis服务器port\n * @param pwd       redis服务器密码\n *\n * @returns   \n *            成功返回链接句柄 \n *            失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb(char *ip_str, char* port_str, char *pwd);\n\n/* -------------------------------------------*/\n/**\n * @brief  redis unix域模式链接\n *\n * @param ip_str    unix域sock文件\n * @param  pwd      redis服务器密码\n *\n * @returns   \n *            成功返回链接句柄 \n *            失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_unix(char *sock_path, char *pwd);\n\n/* -------------------------------------------*/\n/**\n * @brief  tcp 链接redis超时等待模式，timeval链接超时\n *            返回\n *\n * @param ip_str        redis 服务器ip\n * @param port_str        redis 服务器端口\n * @param timeval        最大超时等待时间\n *\n * @returns   \n *        成功返回链接句柄\n *        失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_timeout(char* ip_str, char *port_str, struct timeval *timeout);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  关闭指定的链接句柄\n *\n * @param conn    已建立好的链接\n */\n/* -------------------------------------------*/\nvoid rop_disconnect(redisContext* conn);\n\n/* -------------------------------------------*/\n/**\n * @brief  选择redis中 其中一个数据库\n *\n * @param conn        已链接的数据库链接\n * @param db_no        redis数据库编号\n *\n * @returns   \n *            -1 失败\n *            0  成功\n */\n/* -------------------------------------------*/\nint rop_selectdatabase(redisContext *conn, unsigned int db_no);\n\n/* -------------------------------------------*/\n/**\n * @brief            清空当前数据库所有信息(慎用)\n *\n * @param conn        已链接的数据库链接\n *\n * @returns   \n *            -1 失败\n *            0  成功\n */\n/* -------------------------------------------*/\nint rop_flush_database(redisContext *conn);\n\n/* -------------------------------------------*/\n/**\n * @brief  判断key值是否存在\n *\n * @param conn        已经建立的链接\n * @param key        需要寻找的key值\n *\n * @returns   \n *                -1 失败\n *                1 存在\n *                0 不存在\n */\n/* -------------------------------------------*/\nint rop_is_key_exist(redisContext *conn, char* key);\n\n/* -------------------------------------------*/\n/**\n * @brief            删除一个key\n *\n * @param conn        已经建立的链接\n * @param key        \n *\n * @returns   \n *                -1 失败\n *                0 成功\n */\n/* -------------------------------------------*/\nint rop_del_key(redisContext *conn, char *key);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  打印库中所有匹配pattern的key\n *\n * @param conn        已建立好的链接\n * @param pattern    匹配模式，pattern支持glob-style的通配符格式，\n *                    如 *表示任意一个或多个字符，\n *                       ?表示任意字符，\n *                    [abc]表示方括号中任意一个字母。\n */\n/* -------------------------------------------*/\nvoid rop_show_keys(redisContext *conn, char* pattern);\n\n/* -------------------------------------------*/\n/**\n * @brief  设置一个key的删除时间 ，系统到达一定时间\n *            将会自动删除该KEY\n *\n * @param conn                已经建立好的链接\n * @param delete_time        到期事件 time_t 日历时间\n *\n * @returns   \n *        0    SUCC\n *        -1  FAIL\n */\n/* -------------------------------------------*/\nint rop_set_key_lifecycle(redisContext *conn, char *key, time_t delete_time);\n\n/* -------------------------------------------*/\n/**\n * @brief            创建或者覆盖一个HASH表\n *\n * @param conn                已建立好的链接\n * @param key                hash 表名\n * @param element_num        hash 表区域个数\n * @param fields            hash 表区域名称数组char(*)[FIELD_ID_SIZE]\n * @param values            hash 表区域值数组  char(*)[VALUES_ID_SIZE]\n *\n * @returns   \n *            0   成功    \n *            -1  失败\n */\n/* -------------------------------------------*/\nint rop_create_or_replace_hash_table(redisContext* conn,\n                                     char* key, \n                                     unsigned int element_num, \n                                     RFIELDS fields, \n                                     RVALUES values);\n\n/* -------------------------------------------*/\n/**\n * @brief  给指定的hash表 指定的field对应的value自增num\n *\n * @param conn\t\t\t已建立好的链接\n * @param key\t\t\thash表名\n * @param field\t\t\thash表下的区域名\n *\n * @returns\n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tfail\n */\n/* -------------------------------------------*/\nint rop_hincrement_one_field(redisContext *conn, char *key, char *field, unsigned int num);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行链表插入命令 插入链表头部\n *\n * @param conn        已建立好的链接\n * @param key        链表名\n * @param values    封装好的域名\n * @param values    封装好的值数组\n * @param val_num    值个数\n *\n * @returns   \n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_hash_set_append(redisContext *conn, char *key, RFIELDS fields, RVALUES values, int val_num);\n\n/* -------------------------------------------*/\n/**\n * @brief  想一个hash表中添加一条 key-value 数据\n *\n * @param conn  redis连接\n * @param key   哈希表名\n * @param field\n * @param value\n *\n * @returns\n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_hash_set(redisContext *conn, char *key, char *field, char *value);\n\n/* -------------------------------------------*/\n/**\n * @brief  从一个hash表中取出一条 key-value 数据\n *\n * @param conn  redis连接\n * @param key   哈希表名\n * @param field 字段名称\n * @param value 得到的数据， 需要先开辟内存\n *\n * @returns\n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_hash_get(redisContext *conn, char *key, char *field, char *value);\n\n\n\n/* -------------------------------------------*/\n/**\n * @brief        将指定的zset表，对应的成员，值自增1\n *                （key 或 成员不存在 则创建）\n *\n * @param conn        已建立的链接\n * @param key        zset表名\n * @param member    zset成员名\n *\n * @returns   \n *            0            succ\n *            -1            fail\n */\n/* -------------------------------------------*/\nint rop_zset_increment(redisContext *conn, char* key, char* member);\n\n\n//得到zset一个member的score\nint rop_zset_get_score(redisContext *conn, char *key, char *member);\n\n/* -------------------------------------------*/\n/**\n * @brief     批量将指定的zset表，对应的成员，值自增1\n *                （key 或 成员不存在 则创建）\n *\n * @param conn        已建立好的链接\n * @param key        有序集合名称\n * @param values    封装好的成员数组\n * @param val_num    数据个数\n *\n * @returns   \n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_zset_increment_append(redisContext *conn, char *key, RVALUES values, int val_num);\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行链表插入命令 插入链表头部\n *\n * @param conn        已建立好的链接\n * @param key        链表名\n * @param values    封装好的值数组\n * @param val_num    值个数\n *\n * @returns   \n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_list_push_append(redisContext *conn, char *key, RVALUES values, int val_num);\n\n/* -------------------------------------------*/\n/**\n * @brief  单条数据插入链表\n *\n * @param conn        已建立好的链接\n * @param key        链表名\n * @param value        数据\n *\n * @returns   \n */\n/* -------------------------------------------*/\nint rop_list_push(redisContext *conn, char *key, char *value);\n\n/* -------------------------------------------*/\n/**\n * @brief  得到链表中元素的个数\n *\n * @param conn    链接句柄\n * @param key    链表名\n *\n * @returns   \n *            >=0 个数\n *            -1 fail\n */\n/* -------------------------------------------*/\nint rop_get_list_cnt(redisContext *conn, char *key);\n\n/* -------------------------------------------*/\n/**\n * @brief  按照一定范围截断链表中的数据\n *\n * @param conn        已经建立的链接\n * @param key        链表名\n * @param begin        阶段启示位置 从 0 开始\n * @param end        阶段结束位置 从 -1 开始\n *\n *                    这里的范围定义举例 \n *                    如果得到全部范围(0, -1)\n *                    除了最后一个元素范围(0, -2)\n *                    前20各数据范围(0, 19)\n *\n * @returns   \n *            0  SUCC\n *            -1 FAIL\n */\n/* -------------------------------------------*/\nint rop_trim_list(redisContext *conn, char *key, int begin, int end);\n\n/* -------------------------------------------*/\n/**\n * @brief          得到链表中的数据\n *\n * @param conn\t\t已经建立的链接\n * @param key\t\t链表名\n *\n * @returns   \n *\t\t\t0  SUCC\n *\t\t\t-1 FAIL\n */\n/* -------------------------------------------*/\nint rop_range_list(redisContext *conn, char *key, int from_pos, int count, RVALUES values, int *get_num);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行已经封装好的redis 命令\n *\n * @param conn        已建立好的链接\n * @param cmds        封装好的命令数组\n * @param cmd_num    命令个数\n *\n * @returns   \n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_redis_append(redisContext *conn, RCOMMANDS cmds, int cmd_num);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  执行单向命令 无返回值 命令自行输入\n *\n * @param conn        已建立的链接\n * @param cmd        封装好的命令\n *\n * @returns   \n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_redis_command(redisContext *conn, char *cmd);\n\n/* -------------------------------------------*/\n/**\n * @brief  测试一个reply的结果类型\n *            得到对应的类型用对应的方法获取数据\n *\n * @param reply        返回的命令结果\n */\n/* -------------------------------------------*/\nvoid rop_test_reply_type(redisReply *reply);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  设置key对应的值为string类型的value\n *            \n * @param conn          已经建立好的链接\n * @param key        \tkey值\n * @param value         value值\n *\n * @returns   \n *        0    SUCC\n *        -1  FAIL\n */\n/* -------------------------------------------*/\nint rop_set_string(redisContext *conn, char *key, char *value);\n\n/* -------------------------------------------*/\n/**\n * @brief  获取key对应的value值\n *            \n * @param conn          已经建立好的链接\n * @param key        \tkey值\n * @param value         value值\n *\n * @returns   \n *        0    SUCC\n *        -1  FAIL\n */\n/* -------------------------------------------*/\nint rop_get_string(redisContext *conn, char *key, char *value);\n\n#endif\n\n```\n\n```c\n/**\n * @file redis_op.c\n * @brief  redis 操作基本接口和key的操作实现\n */\n\n#include \"redis_op.h\"\n\n\n/* -------------------------------------------*/\n/**\n * @brief  选择redis一个数据库\n *\n * @param conn\t\t已链接的数据库链接\n * @param db_no\t\tredis数据库编号\n *\n * @returns   \n *\t\t\t-1 失败\n *\t\t\t0  成功\n */\n/* -------------------------------------------*/\nint rop_selectdatabase(redisContext *conn, unsigned int db_no)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\n\n\t/* 选择一个数据库 */\n\treply = redisCommand(conn, \"select %d\", db_no);\n\tif (reply == NULL) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS]Select database %d error!\\n\", db_no);\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Select database %d error!%s\\n\", db_no, conn->errstr);\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\n\tprintf(\"[+][GMS_REDIS]Select database %d SUCCESS!\\n\", db_no);\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]Select database %d SUCCESS!\\n\", db_no);\n\nEND:\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief\t\t\t清空当前数据库所有信息(慎用)\n *\n * @param conn\t\t已链接的数据库链接\n *\n * @returns   \n *\t\t\t-1 失败\n *\t\t\t0  成功\n */\n/* -------------------------------------------*/\nint rop_flush_database(redisContext *conn)\n{\n\tint retn = 0;\t\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"FLUSHDB\");\n\tif (reply == NULL) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS]Clear all data error\\n\");\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Clear all data error\\n\");\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\n\tprintf(\"[+][GMS_REDIS]Clear all data!!\\n\");\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Clear all data!!\\n\");\n\nEND:\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  判断key值是否存在\n *\n * @param conn\t\t已经建立的链接\n * @param key\t\t需要寻找的key值\n *\n * @returns   \n *\t\t\t\t-1 失败\n *\t\t\t\t1 存在\n *\t\t\t\t0 不存在\n */\n/* -------------------------------------------*/\nint rop_is_key_exist(redisContext *conn, char* key)\n{\n\tint retn = 0;\t\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"EXISTS %s\", key);\n\t//rop_test_reply_type(reply);\n\tif (reply->type != REDIS_REPLY_INTEGER) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS]is key exist get wrong type!\\n\");\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]is key exist get wrong type! %s\\n\", conn->errstr);\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\n\tif (reply->integer == 1) {\n\t\tretn = 1;\t\n\t}\n\telse {\n\t\tretn = 0;\n\t}\n\nEND:\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief\t\t\t删除一个key\n *\n * @param conn\t\t已经建立的链接\n * @param key\t\t\n *\n * @returns   \n *\t\t\t\t-1 失败\n *\t\t\t\t0 成功\n */\n/* -------------------------------------------*/\nint rop_del_key(redisContext *conn, char *key)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"DEL %s\", key);\n\tif (reply->type != REDIS_REPLY_INTEGER) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS] DEL key %s ERROR\\n\", key);\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS] DEL key %s ERROR %s\\n\", key, conn->errstr);\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\n\tif (reply->integer > 0) {\n\t\tretn = 0;\t\n\t}\n\telse {\n\t\tretn = -1;\n\t}\n\nEND:\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  设置一个key的删除时间 ，系统到达一定时间\n *\t\t\t将会自动删除该KEY\n *\n * @param conn\t\t\t\t已经建立好的链接\n * @param delete_time\t\t到期事件 time_t 日历时间\n *\n * @returns   \n *\t\t0\tSUCC\n *\t\t-1  FAIL\n */\n/* -------------------------------------------*/\nint rop_set_key_lifecycle(redisContext *conn, char *key, time_t delete_time)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\t\t\n\t\n\treply = redisCommand(conn, \"EXPIREAT %s %d\", key, delete_time);\n\tif (reply->type != REDIS_REPLY_INTEGER) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS]Set key:%s delete time ERROR!\\n\", key);\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Set key:%s delete time ERROR! %s\\n\", key, conn->errstr);\n\t\tretn = -1;\n\t}\n\tif (reply->integer == 1) {\n\t\t/* 成功 */\n\t\tretn = 0;\n\t}\n\telse {\n\t\t/* 错误 */\n\t\tretn = -1;\n\t}\n\n\n\tfreeReplyObject(reply);\t\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  打印库中所有匹配pattern的key\n *\n * @param conn\t\t已建立好的链接\n * @param pattern\t匹配模式，pattern支持glob-style的通配符格式，\n *\t\t\t\t\t如 *表示任意一个或多个字符，\n *\t\t\t\t\t   ?表示任意字符，\n *\t\t\t\t    [abc]表示方括号中任意一个字母。\n */\n/* -------------------------------------------*/\nvoid rop_show_keys(redisContext *conn, char* pattern)\n{\n\tint i = 0;\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"keys %s\", pattern);\n\tif (reply->type != REDIS_REPLY_ARRAY) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS]show all keys and data wrong type!\\n\");\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]show all keys and data wrong type! %s\\n\", conn->errstr);\n\t\tgoto END;\n\t}\n\n\tfor (i = 0; i < reply->elements; ++i) {\n\t\tprintf(\"======[%s]======\\n\", reply->element[i]->str);\n\t}\n\n\nEND:\n\tfreeReplyObject(reply);\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行已经封装好的redis 命令\n *\n * @param conn\t\t已建立好的链接\n * @param cmds\t\t封装好的命令数组\n * @param cmd_num\t命令个数\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tFAIL\n */\n/* -------------------------------------------*/\nint rop_redis_append(redisContext *conn, RCOMMANDS cmds, int cmd_num)\n{\n\tint retn = 0;\n\tint i = 0;\n\tredisReply *reply = NULL;\n\n\n\t/* 批量插入命令到缓冲命令管道 */\n\tfor (i = 0; i < cmd_num; ++i) {\n\t\tretn = redisAppendCommand(conn, cmds[i]);\n\t\tif (retn != REDIS_OK) {\n\t\t\tfprintf(stderr, \"[-][GMS_REDIS]Append Command: %s ERROR!\\n\", cmds[i]);\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Append Command: %s ERROR! %s\\n\", cmds[i], conn->errstr);\n\t\t\tretn = -1;\n\t\t\tgoto END;\n\t\t}\n\t\tretn = 0;\n\t}\n\n\t/* 提交命令 */\n\tfor (i = 0; i < cmd_num; ++i) {\n\t\tretn = redisGetReply(conn, (void**)&reply);\n\t\tif (retn != REDIS_OK) {\n\t\t\tretn = -1;\n\t\t\tfprintf(stderr, \"[-][GMS_REDIS]Commit Command:%s ERROR!\\n\", cmds[i]);\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Commit Command:%s ERROR! %s\\n\", cmds[i], conn->errstr);\n\t\t\tfreeReplyObject(reply);\n\t\t\tbreak;\n\t\t}\n\t\tfreeReplyObject(reply);\n\t\tretn = 0;\n\t}\n\t\nEND:\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  执行单向命令 无返回值 命令自行输入\n *\n * @param conn\t\t已建立的链接\n * @param cmd\t\t封装好的命令\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tFAIL\n */\n/* -------------------------------------------*/\nint rop_redis_command(redisContext *conn, char *cmd)\n{\n\tint retn = 0;\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, cmd);\n\tif (reply == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Command : %s ERROR!%s\\n\", cmd, conn->errstr);\n\t\tretn = -1;\n\t}\n\n\tfreeReplyObject(reply);\n\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  测试一个reply的结果类型\n *\t\t\t得到对应的类型用对应的方法获取数据\n *\n * @param reply\t\t返回的命令结果\n */\n/* -------------------------------------------*/\nvoid rop_test_reply_type(redisReply *reply)\n{\n\tswitch (reply->type) {\n\t\tcase REDIS_REPLY_STATUS:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_STATUS=[string] use reply->str to get data, reply->len get data len\\n\");\n\t\t\tbreak;\n\t\tcase REDIS_REPLY_ERROR:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_ERROR=[string] use reply->str to get data, reply->len get date len\\n\");\n\t\t\tbreak;\n\t\tcase REDIS_REPLY_INTEGER:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_INTEGER=[long long] use reply->integer to get data\\n\");\n\t\t\tbreak;\n\t\tcase REDIS_REPLY_NIL:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_NIL=[] data not exist\\n\");\n\t\t\tbreak;\n\t\tcase REDIS_REPLY_ARRAY:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_ARRAY=[array] use reply->elements to get number of data, reply->element[index] to get (struct redisReply*) Object\\n\");\n\t\t\tbreak;\n\t\tcase REDIS_REPLY_STRING:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_string=[string] use reply->str to get data, reply->len get data len\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Can't parse this type\\n\");\n\t\t\tbreak;\n\t}\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  redis tcp模式链接\n *\n * @param ip_str\tredis服务器ip\n * @param port_str\tredis服务器port\n *\n * @returns   \n *\t\t\t成功返回链接句柄 \n *\t\t\t失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_nopwd(char *ip_str, char* port_str)\n{\n\tredisContext *conn = NULL;\n\tuint16_t port = atoi(port_str);\n\n\tconn = redisConnect(ip_str, port);\n\n\tif (conn  == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:Can't allocate redis context!\\n\", ip_str, port);\t\t\n\t\tgoto END;\n\t}\n\n\tif (conn->err) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:%s\\n\", ip_str, port, conn->errstr);\t\n\t\tredisFree(conn);\n\t\tconn = NULL;\n\t\tgoto END;\n\t}\n\t\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n\", ip_str, port);\n\nEND:\n\treturn conn;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  redis tcp模式链接\n *\n * @param ip_str\tredis服务器ip\n * @param port_str\tredis服务器port\n *\n * @returns   \n *\t\t\t成功返回链接句柄 \n *\t\t\t失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb(char *ip_str, char* port_str, char *pwd)\n{\n\tredisContext *conn = NULL;\n\tuint16_t port = atoi(port_str);\n    char auth_cmd[REDIS_COMMAND_SIZE];\n\n\tconn = redisConnect(ip_str, port);\n\n\tif (conn  == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:Can't allocate redis context!\\n\", ip_str, port);\t\t\n\t\tgoto END;\n\t}\n\n\tif (conn->err) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:%s\\n\", ip_str, port, conn->errstr);\t\n\t\tredisFree(conn);\n\t\tconn = NULL;\n\t\tgoto END;\n\t}\n\n    redisReply *reply = NULL;\n    sprintf(auth_cmd, \"auth %s\", pwd);\n\n    reply = redisCommand(conn, auth_cmd);\n\tif (reply == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Command : auth %s ERROR!\\n\", pwd);\n        conn = NULL;\n        goto END;\n\t}\n    freeReplyObject(reply);\n\n\t\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n\", ip_str, port);\n\nEND:\n\treturn conn;\n}\n\n/* -------------------------------------------*\n**\n * @brief  redis unix域模式链接\n *\n * @param ip_str\tunix域sock文件\n *\n * @returns   \n *\t\t\t成功返回链接句柄 \n *\t\t\t失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_unix(char *sock_path, char *pwd)\n{\n\tredisContext *conn = NULL;\n    char auth_cmd[REDIS_COMMAND_SIZE];\n\n\tconn = redisConnectUnix(sock_path);\n\tif (conn  == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect domain-unix:%s Error:Can't allocate redis context!\\n\", sock_path);\t\t\n\t\tgoto END;\n\t}\n\n\tif (conn->err) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect domain-unix:%s Error:%s\\n\", sock_path, conn->errstr);\t\n\t\tredisFree(conn);\n\t\tconn = NULL;\n\t\tgoto END;\n\t}\n\n    redisReply *reply = NULL;\n    sprintf(auth_cmd, \"auth %s\", pwd);\n    reply = redisCommand(conn, auth_cmd);\n\tif (reply == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Command : auth %s ERROR!\\n\", pwd);\n        conn = NULL;\n        goto END;\n\t}\n    freeReplyObject(reply);\n\t\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Connect domain-unix:%s SUCCESS!\\n\", sock_path);\n\nEND:\n\treturn conn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  tcp 链接redis超时等待模式，timeval链接超时\n *\t\t\t返回\n *\n * @param ip_str\t\tredis 服务器ip\n * @param port_str\t\tredis 服务器端口\n * @param timeval\t\t最大超时等待时间\n *\n * @returns   \n *\t\t成功返回链接句柄\n *\t\t失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_timeout(char* ip_str, char *port_str, struct timeval *timeout)\n{\n\tredisContext *conn = NULL;\n\tuint16_t port = atoi(port_str);\n\n\n\tconn = redisConnectWithTimeout(ip_str, port, *timeout);\n\n\tif (conn  == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:Can't allocate redis context!\\n\", ip_str, port);\n\t\tgoto END;\n\t}\n\n\tif (conn->err) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:%s\\n\", ip_str, port, conn->errstr);\t\n\t\tredisFree(conn);\n\t\tconn = NULL;\n\t\tgoto END;\n\t}\n\t\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n\", ip_str, port);\n\nEND:\n\treturn conn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  关闭指定的链接句柄\n *\n * @param conn\t已建立好的链接\n */\n/* -------------------------------------------*/\nvoid rop_disconnect(redisContext* conn)\n{\n\tif (conn == NULL) {\n\t\treturn ;\n\t}\n\tredisFree(conn);\n\t\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Disconnect SUCCESS!\\n\");\n}\n\n/* 封装一个 hmset 命令 */\nstatic char* make_hmset_command(char* key, unsigned int element_num, RFIELDS fields, RVALUES values)\n{\n\tchar *cmd = NULL;\t\n\tunsigned int buf_size = 0;\n\tunsigned int use_size = 0;\n\tunsigned int i = 0;\n\n\tcmd = (char*)malloc(1024*1024);\n\tif (cmd == NULL) {\n\t\tgoto END;\n\t}\n\tmemset(cmd, 0, 1024*1024);\n\tbuf_size += 1024*1024;\n\n\tstrncat(cmd, \"hmset\", 6);\n\tuse_size += 5;\n\tstrncat(cmd, \" \", 1);\n\tuse_size += 1;\n\n\tstrncat(cmd, key, 200);\n\tuse_size += 200;\n\n\tfor (i = 0; i < element_num; ++i) {\n\n\t\tstrncat(cmd, \" \", 1);\n\t\tuse_size += 1;\n\t\tif (use_size >= buf_size) {\n\t\t\tcmd = realloc(cmd, use_size + 1024*1024);\n\t\t\tif (cmd == NULL) {\n\t\t\t\tgoto END;\n\t\t\t}\n\t\t\tbuf_size += 1024*1024;\n\t\t}\n\n\t\tstrncat(cmd, fields[i], FIELD_ID_SIZE);\n\t\tuse_size += strlen(fields[i]);\n\t\tif (use_size >= buf_size) {\n\t\t\tcmd = realloc(cmd, use_size + 1024*1024);\n\t\t\tif (cmd == NULL) {\n\t\t\t\tgoto END;\n\t\t\t}\n\t\t\tbuf_size += 1024*1024;\n\t\t}\n\n\n\t\tstrncat(cmd, \" \", 1);\n\t\tuse_size += 1;\n\t\tif (use_size >= buf_size) {\n\t\t\tcmd = realloc(cmd, use_size + 1024*1024);\n\t\t\tif (cmd == NULL) {\n\t\t\t\tgoto END;\n\t\t\t}\n\t\t\tbuf_size += 1024*1024;\n\t\t}\n\n\t\tstrncat(cmd, values[i], VALUES_ID_SIZE);\n\t\tuse_size += strlen(values[i]);\n\t\tif (use_size >= buf_size) {\n\t\t\tcmd = realloc(cmd, use_size + 1024*1024);\n\t\t\tif (cmd == NULL) {\n\t\t\t\tgoto END;\n\t\t\t}\n\t\t\tbuf_size += 1024*1024;\n\t\t}\n\n\t}\n\nEND:\n\treturn cmd;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行链表插入命令 插入链表头部\n *\n * @param conn\t\t已建立好的链接\n * @param key\t\t链表名\n * @param values\t封装好的值数组\n * @param val_num\t值个数\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tFAIL\n */\n/* -------------------------------------------*/\nint rop_hash_set_append(redisContext *conn, char *key, RFIELDS fields, RVALUES values, int val_num)\n{\n    int retn = 0;\n    int i = 0;\n    redisReply *reply = NULL;\n\n\t/* 批量插入命令到缓冲命令管道 */\n    for (i = 0; i < val_num; ++i) {\n        retn = redisAppendCommand(conn, \"hset %s %s %s\", key, fields[i], values[i]);\n        if (retn != REDIS_OK) {\n            LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]HSET %s %s %s ERROR![%s]\\n\", key, fields[i], values[i], conn->errstr);\n            retn = -1;\n            goto END;\n        }\n        retn = 0;\n    }\n\n\t/* 提交命令 */\n\tfor (i = 0; i < val_num; ++i) {\n\t\tretn = redisGetReply(conn, (void**)&reply);\n\t\tif (retn != REDIS_OK) {\n\t\t\tretn = -1;\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Commit HSET %s %s %s ERROR![%s]\\n\", key, fields[i], values[i], conn->errstr);\n\t\t\tfreeReplyObject(reply);\n\t\t\tbreak;\n\t\t}\n\t\tfreeReplyObject(reply);\n\t\tretn = 0;\n\t}\n\t\nEND:\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  想一个hash表中添加一条 key-value 数据\n *\n * @param conn  redis连接\n * @param key   哈希表名\n * @param field\n * @param value\n *\n * @returns\n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_hash_set(redisContext *conn, char *key, char *field, char *value)\n{\n    int retn = 0;\n    redisReply *reply = NULL;\n\n    reply =  redisCommand(conn, \"hset %s %s %s\", key, field, value);\n    if (reply == NULL || reply->type != REDIS_REPLY_INTEGER) {\n        LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]hset %s %s %s error %s\\n\", key, field, value,conn->errstr);\n        retn =  -1;\n        goto END;\n    }\n\n\nEND:\n    freeReplyObject(reply);\n\n    return retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  从一个hash表中取出一条 key-value 数据\n *\n * @param conn  redis连接\n * @param key   哈希表名\n * @param field 字段名称\n * @param value 得到的数据， 需要先开辟内存\n *\n * @returns\n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_hash_get(redisContext *conn, char *key, char *field, char *value)\n{\n    int retn = 0;\n    int len = 0;\n\n    redisReply *reply = NULL;\n\n    reply =  redisCommand(conn, \"hget %s %s\", key, field);\n    if (reply == NULL || reply->type != REDIS_REPLY_STRING) {\n        LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]hget %s %s  error %s\\n\", key, field, conn->errstr);\n        retn =  -1;\n        goto END;\n    }\n\n\n    len = reply->len > VALUES_ID_SIZE? VALUES_ID_SIZE:reply->len ;\n\n    strncpy(value, reply->str, len);\n\n    value[len] = '\\0';\n\n\nEND:\n    freeReplyObject(reply);\n\n\n    return retn;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief\t\t\t创建或者覆盖一个HASH表\n *\n * @param conn\t\t\t\t已建立好的链接\n * @param key\t\t\t\thash 表名\n * @param element_num\t\thash 表区域个数\n * @param fields\t\t\thash 表区域名称数组char(*)[FIELD_ID_SIZE]\n * @param values\t\t\thash 表区域值数组  char(*)[VALUES_ID_SIZE]\n *\n * @returns   \n *\t\t\t0   成功\t\n *\t\t\t-1  失败\n */\n/* -------------------------------------------*/\nint rop_create_or_replace_hash_table(redisContext* conn,\n\t\t\t\t\t\t\t\t\t char* key, \n\t\t\t\t\t\t\t\t\t unsigned int element_num, \n\t\t\t\t\t\t\t\t\t RFIELDS fields, \n\t\t\t\t\t\t\t\t\t RVALUES values)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\t\t\t\n\n\tchar *cmd = make_hmset_command(key, element_num, fields, values);\t\t\n\tif (cmd == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]create hash table %s error\\n\", key);\n\t\tretn = -1;\n\t\tgoto END_WITHOUT_FREE;\n\t}\n\n\treply = redisCommand(conn, cmd);\n//\trop_test_reply_type(reply);\n\tif (strcmp(reply->str, \"OK\") != 0) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Create hash table %s Error:%s,%s\\n\", key, reply->str, conn->errstr);\n\t\t\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\n\nEND:\n\tfree(cmd);\n\tfreeReplyObject(reply);\n\nEND_WITHOUT_FREE:\n\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  给指定的hash表 指定的field对应的value自增num\n *\n * @param conn\t\t\t已建立好的链接\n * @param key\t\t\thash表名\n * @param field\t\t\thash表下的区域名\t\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tfail\n */\n/* -------------------------------------------*/\nint rop_hincrement_one_field(redisContext *conn, char *key, char *field, unsigned int num)\n{\n\tint retn = 0;\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"HINCRBY %s %s %d\", key, field, num);\n\tif (reply == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]increment %s %s error %s\\n\", key, field, conn->errstr);\t\n\t\tretn =  -1;\n\t\tgoto END;\n\t}\n\nEND:\n\tfreeReplyObject(reply);\n\n\treturn retn;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行链表插入命令 插入链表头部\n *\n * @param conn\t\t已建立好的链接\n * @param key\t\t链表名\n * @param values\t封装好的值数组\n * @param val_num\t值个数\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tFAIL\n */\n/* -------------------------------------------*/\nint rop_list_push_append(redisContext *conn, char *key, RVALUES values, int val_num)\n{\n\tint retn = 0;\n\tint i = 0;\n\tredisReply *reply = NULL;\n\n\n\t/* 批量插入命令到缓冲命令管道 */\n\tfor (i = 0; i < val_num; ++i) {\n\t\tretn = redisAppendCommand(conn, \"lpush %s %s\", key, values[i]);\n\t\tif (retn != REDIS_OK) {\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]PLUSH %s %s ERROR! %s\\n\", key, values[i], conn->errstr);\n\t\t\tretn = -1;\n\t\t\tgoto END;\n\t\t}\n\t\tretn = 0;\n\t}\n\n\t/* 提交命令 */\n\tfor (i = 0; i < val_num; ++i) {\n\t\tretn = redisGetReply(conn, (void**)&reply);\n\t\tif (retn != REDIS_OK) {\n\t\t\tretn = -1;\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Commit LPUSH %s %s ERROR! %s\\n\", key, values[i], conn->errstr);\n\t\t\tfreeReplyObject(reply);\n\t\t\tbreak;\n\t\t}\n\t\tfreeReplyObject(reply);\n\t\tretn = 0;\n\t}\n\t\nEND:\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  单条数据插入链表\n *\n * @param conn\t\t已建立好的链接\n * @param key\t\t链表名\n * @param value\t\t数据\n *\n * @returns   \n */\n/* -------------------------------------------*/\nint rop_list_push(redisContext *conn, char *key, char *value)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"LPUSH %s %s\", key, value);\n\t//rop_test_reply_type(reply);\t\n\tif (reply->type != REDIS_REPLY_INTEGER) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]LPUSH %s %s error!%s\\n\", key, value, conn->errstr);\n\t\tretn = -1;\n\t}\n\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  得到链表中元素的个数\n *\n * @param conn\t链接句柄\n * @param key\t链表名\n *\n * @returns   \n *\t\t\t>=0 个数\n *\t\t\t-1 fail\n */\n/* -------------------------------------------*/\nint rop_get_list_cnt(redisContext *conn, char *key)\n{\n\tint cnt = 0;\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"LLEN %s\", key);\n\tif (reply->type != REDIS_REPLY_INTEGER) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]LLEN %s error %s\\n\", key, conn->errstr);\n\t\tcnt = -1;\n\t\tgoto END;\n\t}\n\n\tcnt = reply->integer;\n\nEND:\n\tfreeReplyObject(reply);\n\treturn cnt;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  按照一定范围截断链表中的数据\n *\n * @param conn\t\t已经建立的链接\n * @param key\t\t链表名\n * @param begin\t\t阶段启示位置 从 0 开始\n * @param end\t\t阶段结束位置 从 -1 开始\n *\n *\t\t\t\t\t这里的范围定义举例 \n *\t\t\t\t\t如果得到全部范围(0, -1)\n *\t\t\t\t\t除了最后一个元素范围(0, -2)\n *\t\t\t\t\t前20各数据范围(0, 19)\n *\n * @returns   \n *\t\t\t0  SUCC\n *\t\t\t-1 FAIL\n */\n/* -------------------------------------------*/\nint rop_trim_list(redisContext *conn, char *key, int begin, int end)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"LTRIM %s %d %d\", key, begin, end);\n\tif (reply->type != REDIS_REPLY_STATUS) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]LTRIM %s %d %d error!%s\\n\", key, begin, end, conn->errstr);\n\t\tretn = -1;\n\t}\n\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  rop_range_list 得到链表中的数据\n *\n *          返回数据为 区间为\n *              [from_pos, end_pos)\n *\n * @param conn\n * @param key       表名\n * @param from_pos  查找表的起始数据下标\n * @param end_pos   查找表的结尾数据下标\n * @param values    得到表中的value数据\n * @param get_num   得到结果value的个数\n *\n * @returns   \n *      0 succ, -1 fail\n */\n/* -------------------------------------------*/\nint rop_range_list(redisContext *conn, char *key, int from_pos, int end_pos, RVALUES values, int *get_num)\n{\n    int retn = 0;\n    int i = 0;\n    redisReply *reply = NULL;\n    int max_count = 0;\n\n    int count = end_pos - from_pos + 1;\n\n    reply = redisCommand(conn, \"LRANGE %s %d %d\", key, from_pos, end_pos);\n    if (reply->type != REDIS_REPLY_ARRAY || reply->elements == 0) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]LRANGE %s  error!%s\\n\", key, conn->errstr);\n\t\tretn = -1;\n        goto END;\n\t}\n\n\n    max_count = (reply->elements > count) ? count: reply->elements;\n    *get_num = max_count;\n\n\n    for (i = 0; i < max_count; ++i) {\n        strncpy(values[i], reply->element[i]->str, VALUES_ID_SIZE-1);\n    }\n\nEND:\n    if(reply != NULL)\n    {\n        freeReplyObject(reply);\n    }\n\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief\t\t将指定的zset表，对应的成员，值自增1\n *\t\t\t\t（key 或 成员不存在 则创建）\n *\n * @param conn\t\t已建立的链接\n * @param key\t\tzset表名\n * @param member\tzset成员名\n *\n * @returns   \n *\t\t\t0\t\t\tsucc\n *\t\t\t-1\t\t\tfail\n */\n/* -------------------------------------------*/\nint rop_zset_increment(redisContext *conn, char* key, char* member)\n{\n\tint retn = 0;\t\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"ZINCRBY %s 1 %s\", key, member);\n\t//rop_test_reply_type(reply);\n\tif (strcmp(reply->str, \"OK\") != 0) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Add or increment table: %s,member: %s Error:%s,%s\\n\", key, member,reply->str, conn->errstr);\n\t\t\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\nEND:\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief\t 批量将指定的zset表，对应的成员，值自增1\n *\t\t\t\t（key 或 成员不存在 则创建）\n *\n * @param conn\t\t已建立好的链接\n * @param key\t\t有序集合名称\n * @param values\t封装好的成员数组\n * @param val_num\t数据个数\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tFAIL\n */\n/* -------------------------------------------*/\nint rop_zset_increment_append(redisContext *conn, char *key, RVALUES values, int val_num)\n{\n\tint retn = 0;\n\tint i = 0;\n\tredisReply *reply = NULL;\n\n\t/* 批量命令到缓冲管道 */\n\tfor (i = 0; i < val_num; ++i) {\n\t\tretn = redisAppendCommand(conn, \"ZINCRBY %s 1 %s\", key, values[i]);\n\t\tif (retn != REDIS_OK) {\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]ZINCRBY %s 1 %s ERROR! %s\\n\", key, values[i], conn->errstr);\n\t\t\tretn = -1;\n\t\t\tgoto END;\n\t\t}\n\t\tretn = 0;\n\t}\n\n\t/* 提交命令 */\n\tfor (i = 0; i < val_num; ++i) {\n\t\tretn = redisGetReply(conn, (void**)&reply);\n\t\tif (retn != REDIS_OK) {\n\t\t\tretn = -1;\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Commit ZINCRBY %s 1 %s ERROR!%s\\n\", key, values[i], conn->errstr);\n\t\t\tfreeReplyObject(reply);\n\t\t\tbreak;\n\t\t}\n\t\tfreeReplyObject(reply);\n\t\tretn = 0;\n\t}\n\nEND: \n\treturn retn;\n}\n\nint rop_zset_get_score(redisContext *conn, char *key, char *member)\n{\n\tint score = 0;\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"ZSCORE %s %s\", key, member);\n    rop_test_reply_type(reply);\n    \n\tif (reply->type != REDIS_REPLY_STRING) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]ZSCORE %s %s error %s\\n\", key, member,conn->errstr);\n        score = -1;\n\t\tgoto END;\n\t}\n\n    score = atoi(reply->str);\n\n\nEND:\n\tfreeReplyObject(reply);\n\n\treturn score;\n}\n```\n\n```c\n#ifndef  _MAKE_LOG_H_\n#define  _MAKE_LOG_H\n#include \"pthread.h\"\n\nint out_put_file(char *path, char *buf);\nint make_path(char *path, char *module_name, char *proc_name);\nint dumpmsg_to_file(char *module_name, char *proc_name, const char *filename,\n                        int line, const char *funcname, char *fmt, ...);\n#ifndef _LOG\n#define LOG(module_name, proc_name, x...) \\\n        do{ \\\n\t\tdumpmsg_to_file(module_name, proc_name, __FILE__, __LINE__, __FUNCTION__, ##x);\\\n\t}while(0)\n#else\n#define LOG(module_name, proc_name, x...)\n#endif\n\nextern pthread_mutex_t ca_log_lock;\n\n#endif\n\n\n\n```\n\n```c\n#include<stdio.h>\n#include<stdarg.h>\n#include<string.h>\n#include<fcntl.h>\n#include<unistd.h>\n#include<time.h>\n#include<sys/stat.h>\n\n#include\"make_log.h\"\n#include<pthread.h>\n\n#if 1\n\n//pthread_mutex_t lock;\n//pthread_mutex_init(lock);\n/*void *comm_log(void *p)\n{\n    pthread_mutex_lock(&lock);\n    pthread_mutex_unlock(&lock);\n}\nstruct file_path{\n    char *module_name;\n    char *proc_name;\n    const char *filename;\n    int line;\n    const char *funcname;\n    char *fmt;\n\n};\nint lock_file(char *module, char *proc, const char *file,\n                        int lines, const char *func, char *mt, ...)\n{\n    va_list ap;\n    struct file_path path;\n    path.module_name = module;\n    path.proc_name = proc;\n    path.filename = file;\n    path.line = lines;\n    path.funcname = func;\n    //path.fmt  = mt;\n    va_start(ap,mt);\n    vsprintf(path.fmt,mt,ap);\n    va_end(ap);\n    pthread_mutex_init(&lock,0); \n    pthread_t comm;\n        pthread_create(&comm,0,dumpmsg_to_file,&path);\n    pthread_join(comm,0);\n    pthread_mutex_destroy(&lock);\n}*/\n\npthread_mutex_t ca_log_lock=PTHREAD_MUTEX_INITIALIZER;\n\n//创建目录并写入内容\nint dumpmsg_to_file(char *module_name, char *proc_name, const char *filename,\n                        int line, const char *funcname, char *fmt, ...)\n{\n        char mesg[4096]={0};\n        char buf[4096]={0};\n\t    char filepath[1024] = {0};\n        time_t t=0;\n        struct tm * now=NULL;                                                                                     \n        va_list ap;                                                                                               \n        //struct file_path *path;\n        //path = (struct file_path*)paths;\n        time(&t);                                                                                                 \n        now = localtime(&t);                                       \n        va_start(ap, fmt);                                                                               \n        vsprintf(mesg, fmt, ap);                                                                       \n        va_end(ap);                        \n#if 1\n        snprintf(buf, 4096, \"[%04d-%02d-%02d %02d:%02d:%02d]--[%s:%d]--%s\\n\",\n                                now -> tm_year + 1900, now -> tm_mon + 1,                                         \n                                now -> tm_mday, now -> tm_hour, now -> tm_min, now -> tm_sec,                     \n\t\t\t\t\t\t\t\tfilename, line, mesg);                                     \n#endif\n\n#if 0\n        snprintf(buf, 4096, \"===%04d%02d%02d-%02d%02d%02d,%s[%d]=== %s\\n\",\n                                now -> tm_year + 1900, now -> tm_mon + 1,                                         \n                                now -> tm_mday, now -> tm_hour, now -> tm_min, now -> tm_sec,\n                                funcname, line, mesg);   \n#endif\t\t\t\t\t\t\t\t\n        make_path(filepath, module_name, proc_name);\n        \n        pthread_mutex_lock(&ca_log_lock);\n\t    out_put_file(filepath, buf);     \n        pthread_mutex_unlock(&ca_log_lock);\n\n        return 0;     \n}\n#endif\n//写入内容\nint out_put_file(char *path, char *buf)\n{\n\tint fd;                                                                                                   \n    fd = open(path, O_RDWR | O_CREAT | O_APPEND, 0777);\n\n    if(write(fd, buf, strlen(buf)) != (int)strlen(buf)) {                                      \n            fprintf(stderr, \"write error!\\n\");                           \n            close(fd);                                                                                        \n    } else {                                                                                                  \n            //write(fd, \"\\n\", 1);\n            close(fd);                                                                                        \n    }               \n\n\treturn 0;\n}\n//创建目录\nint make_path(char *path, char *module_name, char *proc_name)\n{\n\ttime_t t;\n\tstruct tm *now = NULL;\n\tchar top_dir[1024] = {\".\"};\n\tchar second_dir[1024] = {\"./logs\"};\n\tchar third_dir[1024] = {0};\n\tchar y_dir[1024] = {0};\n\tchar m_dir[1024] = {0};\n\tchar d_dir[1024] = {0}; \n\ttime(&t);\n        now = localtime(&t);\n\tsnprintf(path, 1024, \"./logs/%s/%04d/%02d/%s-%02d.log\", module_name, now -> tm_year + 1900, now -> tm_mon + 1, proc_name, now -> tm_mday);\n\t\n\tsprintf(third_dir, \"%s/%s\", second_dir, module_name);\n\tsprintf(y_dir, \"%s/%04d/\", third_dir, now -> tm_year + 1900);\n\tsprintf(m_dir, \"%s/%02d/\", y_dir, now -> tm_mon + 1);\n\tsprintf(d_dir,\"%s/%02d/\", m_dir, now -> tm_mday);\n\t\n\tif(access(top_dir, 0) == -1) {\n\t\tif(mkdir(top_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"create %s failed!\\n\", top_dir);\t\n\t\t} else if(mkdir(second_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"%s:create %s failed!\\n\", top_dir, second_dir);\n\t\t} else if(mkdir(third_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"%s:create %s failed!\\n\", top_dir, third_dir);\n\t\t} else if(mkdir(y_dir, 0777) == -1) {\n                        fprintf(stderr, \"%s:create %s failed!\\n\", top_dir, y_dir);                                                     \n                } else if(mkdir(m_dir, 0777) == -1) {                                                             \n                        fprintf(stderr, \"%s:create %s failed!\\n\", top_dir, m_dir);                                                     \n                }          \t\n\t} else if(access(second_dir, 0) == -1) {\n\t\tif(mkdir(second_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"create %s failed!\\n\", second_dir);\n\t\t} else if(mkdir(third_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"%s:create %s failed!\\n\", second_dir, third_dir);\n                } else if(mkdir(y_dir, 0777) == -1) {\n                        fprintf(stderr, \"%s:create %s failed!\\n\", second_dir, y_dir);\n                } else if(mkdir(m_dir, 0777) == -1) {\n                        fprintf(stderr, \"%s:create %s failed!\\n\", second_dir, m_dir);\n                }\n\t} else if(access(third_dir, 0) == -1) {\n\t\tif(mkdir(third_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"create %s failed!\\n\", third_dir);\n\t\t} else if(mkdir(y_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"%s:create %s failed!\\n\", third_dir, y_dir);\n\t\t} else if(mkdir(m_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"%s:create %s failed!\\n\", third_dir, m_dir);\n\t\t} \n\t} else if (access(y_dir, 0) == -1) {\n\t\tif(mkdir(y_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"create %s failed!\\n\", y_dir);\n\t\t} else if(mkdir(m_dir, 0777) == -1) {\n                        fprintf(stderr, \"%s:create %s failed!\\n\", y_dir, m_dir);\n                } \n\n\t} else if (access(m_dir, 0) == -1) {\n                if(mkdir(m_dir, 0777)) {\n\t\t\tfprintf(stderr, \"create %s failed!\\n\", m_dir);\n\t\t} \n        }\n\t//printf(\"path:%s\\n\", path);\n\treturn 0;\n}\n\n#if 0\nint main(void)\n{\n\tchar path[1024] = {0};\n\tchar proc_name[] = {\"sys_guard\"};\n\tchar buf[] = {\"12345\\n\"};\n\tmake_path(path, proc_name);\n\tout_put_file(path, buf);\n\treturn 0;\n} \n#endif\n\n```\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#include \"redis_op.h\"\n\nint main(int argc, char *argv[])\n{\n    int ret = 0;\n    //连接数据库\n    redisContext *conn = NULL;\n\n    conn = rop_connectdb_nopwd(\"127.0.0.1\", \"6379\");\n\n    //set foo  hello\n    ret = rop_set_string(conn, \"foo\", \"hello\");\n    if (ret == 0) \n\t{\n        printf(\"set succ!\\n\");\n    }\n    else \n\t{\n        printf(\"set fail\\n\");\n    }\n\t\n\tchar value[256] = {0};\n\tret = rop_get_string(conn, \"foo\", value);\n    if (ret == 0) \n\t{\n        printf(\"get succ: %s - %s\\n\", \"foo\", value);\n    }\n    else \n\t{\n        printf(\"get fail\\n\");\n    }\n\n\n    //释放数据库\n    rop_disconnect(conn);\n\n\n\treturn 0;\n}\n\n```\n\n","source":"_posts/redis的简单使用.md","raw":"---\ntitle: redis的简单使用(一)\ndate: 2021-03-22\ntag:\n  - 非关系型数据库\n  - redis\n  - hiredis\ncategories:\n  - Tools\nkeywords: \"redis,缓存数据库\"\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gsi1y87n53j30aa06vweq.jpg\nhighlight_shrink: false\nsticky: 3\n---\n\n### 关系型数据库\n\n- NoSQL 数据库的四大分类\n  - KV键值，典型就是 redis\n  - 文档型数据库MongoDB \n  - 列存储数据库 HBase\n  - 图关系数据库 Neo4J\n\n### redis 是什么？\n\n- 开源的key-value 的存储系统，将大部分数据存储在内存中。\n- redis基于内存操作，读写数据很快，作为内存型缓存服务器，搭配mysql可以做到数据持久化\n- redis基于C语言开发，不需要过多依赖；客户端提供各种语言版本。      \n\n### redis优点\n\n- 完全在内存中保存数据库，使用磁盘为了持久化;速度异常快速\n- 有丰富的数据类型，string，list，set，sorted set,hash\n- 操作都是原子的，操作不会在执行完毕前被打断。从而确保当两个客户同时访问 redis 服务器得到的是更新后的值\n\n### 相关资源\n\n{% btn 'http://redis.cn',中文网站,far fa-hand-point-right %}\n\n### redis 安装\n\n#### 下载对应软件包\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsi2rwxb4ej30di07ot8v.jpg\" alt=\"redis 安装包\" style=\"zoom:50%;\" />\n\n#### 解压后，开始编译\n\n```bash\nmake\nsudo make install\n```\n\n#### 配置文件redis.cnf 在安装包里面\n\n> 配置文件分成几大块：\n>\n> 1) 通用(general)\n>\n> 2) 快照(snapshotting)\n>\n> 3) 复制(replication)\n>\n> 4) 安全(security)\n>\n> 5) 限制(limits)\n>\n> 6) 追加模式(append only mode)\n>\n> 7) LUA脚本(lua scripting)\n>\n> 8) 慢日志(slow log)\n>\n> 9) 事件通知(event notification).       \n\n```ini\ndaemonize no\n守护进程\n默认情况下，redis不是在后台运行的。如果需要在后台运行，把该项的值更改为yes。\n\npidfile /var/run/redis.pid\n当redis在后台运行的时候，redis默认会把pid文件放在/var/run/redis.pid，你可以配置到其他位置。当运行多个redis服务时，需要指定不同的pid文件和端口。\n\nport 6379\n指定redis运行的端口，默认是6379。\n\nbind 127.0.0.1\n指定redis只接收来自于该IP地址的请求看，如果不进行设置，那么将处理所有请求。在生产环境中最好设置该项。\n远程连接的话，需要把这行注释掉\n\n\t\ttimeout 多长时间的等待，就会断连接,0表示永远连着\n\t\t\n\t\tkeepalive 心跳检测\n\nprotected-mode no\n远程访问需要设置为 no\n\nloglevel debug\n指定日志记录级别，其中redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose。\n1．debug表示记录很多信息,用于开发和测试\n2．verbose表示记录有用的信息, 但不像debug会记录那么多\n3．notice表示普通的verbose，常用于生产环境\n4．warning 表示只有非常重要或者严重的信息会记录到日志\n\nlogfile /var/log/redis/redis.log\n配置log文件地址,默认值为stdout。若后台模式会输出到/dev/null。\n\ndatabases 16\n可用数据库数，默认值为16，默认数据库为0，数据库范围在0~15之间切换，彼此隔离。\n\nsave\n保存数据到磁盘，格式为save，指出在多长时间内，有多少次更新操作，就将数据同步到数据文件rdb。相当于条件触发抓取快照，这个可以多个条件配合。 \n\n save 900 1 -- 900秒之内有1个keys发生变化时\n save 300 10 -- 300秒之内有10个keys发生变化时\n save 60 10000 -- 60秒之内有10000个keys发生变化时\n\nrdbcompression yes\n存储至本地数据库时(持久化到rdb文件)是否压缩数据，默认为yes。\n\ndbfilename dump.rdb\n本地持久化数据库文件名，默认值为dump.rdb。\n\ndir ./\n工作目录，数据库镜像备份的文件放置的路径。这里的路径跟文件名要分开配置是因为redis在进行备份时，先会将当前数据库的状态写入到一个临时文件中，等备份完成时，再把该临时文件替换为上面所指定的文件。 而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中，AOF文件也会存放在这个目录下面。 注意这里必须指定一个目录而不是文件。\n\nslaveof\n主从复制，设置该数据库为其他数据库的从数据库。设置当本机为slave服务时，设置master服务的IP地址及端口。 在redis启动时,它会自动从master进行数据同步。\n\nmasterauth\n当master服务设置了密码保护时(用requirepass制定的密码)slave服务连接master的密码。\n\nslave-serve-stale-data yes\n当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：\n如果slave-serve-stale-data设置为 yes(默认设置)，从库会继续相应客户端的请求。\n如果slave-serve-stale-data是指为no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误\"SYNC with master in progress\"。\n\nrepl-ping-slave-period 10\n从库会按照一个时间间隔向主库发送PING，可以通过repl-ping-slave-period设置这个时间间隔,默认是10秒。\n\nrepl-timeout 60\n设置主库批量数据传输时间或者ping回复时间间隔，默认值是60秒，一定要确保repl-timeout大于repl-ping-slave-period。\n\nrequirepass foobared\n设置客户端连接后进行任何其他指定前需要使用的密码。因为redis速度相当快，所以在一台比较好的服务器平台下, 一个外部的用户可以在一秒钟进行150K次的密码尝试，这意味着你需要指定非常强大的密码来防止暴力破解。\n\nrename command CONFIG \"\"\n命令重命名，在一个共享环境下可以重命名相对危险的命令，比如把CONFIG重名为一个不容易猜测的字符：\nrename-command CONFIG  b840fc02d524045429941cc15f59e41cb7be6c52\n\n如果想删除一个命令，直接把它重命名为一个空字符\"\"即可：rename-command CONFIG \"\"。\n\nmaxclients 128\n设置同一时间最大客户端连接数，默认无限制。redis可以同时打开的客户端连接数为redis进程可以打开的最大文件描述符数。 \n\n如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，redis会关闭新的连接并向客户端返回max number of clients reached错误信息。\n\nmaxmemory \n指定redis最大内存限制。redis在启动时会把数据加载到内存中，达到最大内存后，redis会先尝试清除已到期或即将到期的key，redis同时也会移除空的list对象。当此方法处理后,仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。\n\n注意：redis新的vm机制，会把key存放内存，value会存放在swap区。\n\nmaxmemory-policy volatile-lru\n当内存达到最大值的时候redis会选择删除哪些数据呢？有五种方式可供选择：\n1．volatile-lru代表利用LRU算法移除设置过期时间的key(LRU：最近使用LeastRecentlyUsed)\n2．allkeys-lru代表利用LRU算法移除任何key\n3．volatile-random代表移除设置过过期时间的随机key\n4．allkeys_random代表移除一个随机的key\n5． volatile-ttl代表移除即将过期的key(minor TTL)\n6． noeviction代表不移除任何key，只是返回一个写错误\n\n注意：对于上面的策略，如果没有合适的key可以移除，写的时候redis会返回一个错误。\n\nappendonly no\n默认情况下，redis会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁。 如果发生诸如拉闸限电、拔插头等状况，那么将造成比较大范围的数据丢失，所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式。\n\n开启append only模式之后，redis会把所接收到的每一次写操作请求都追加到appendonly. aof文件中。当redis重新启动时，会从该文件恢复出之前的状态，但是这样会造成appendonly. aof文件过大，所以redis还支持BGREWRITEAOF指令对appendonly.aof。\n\nappendfilename appendonly.aof\nAOF文件名称，默认为\"appendonly.aof\"。\n\nappendfsync everysec\nredis支持三种同步AOF文件的策略：\n1．no代表不进行同步,系统去操作\n2．always代表每次有写操作都进行同步\n3．everysec代表对写操作进行累积，每秒同步一次，默认是\"everysec\"，按照速度和安全折中这是最好的\n\nslowlog-log-slower-than 10000\n记录超过特定执行时间的命令。执行时间不包括I/O计算，比如连接客户端，返回结果等。只是命令执行时间，可以通过两个参数设置slow log：一个是告诉Redis执行超过多少时间被记录的参数slowlog-log-slower-than(微妙)，另一个是slow log 的长度。\n\n当一个新命令被记录的时候最早的命令将被从队列中移除，下面的时间以微妙微单位，因此1000000代表一分钟。注意制定一个负数将关闭慢日志，而设置为0将强制每个命令都会记录。\n\nhash-max-zipmap-entries 512 && hash-maxz-ipmap-value 64\n当hash中包含超过指定元素个数并且最大的元素没有超过临界时，hash将以一种特殊的编码方式(大大减少内存使用)来存储，这里可以设置这两个临界值。Redis Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现。这个Hash的成员比较少时redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap。当成员数量增大时会自动转成真正的HashMap，此时encoding为ht。\n\nhash-max-zipmap-entries 512 512\nlist数据类型多少节点以下会采用去指针的紧凑存储格式。\n\nlist-max-ziplist-value 64\n数据类型节点值大小小于多少字节会采用紧凑存储格式。\n\nsetmaxintsetentries 512\nset数据类型内部数据如果全部是数值型,且包含多少节点以下会采用紧凑格式存储。\n\nzsetmaxziplistentries 128\nzsort数据类型多少节点以下会采用去指针的紧凑存储格式。\n\nzsetmaxziplistvalue 64\nzsort数据类型节点值大小小于多少字节会采用紧凑存储格式。\n\nactiverehashing yes\nredis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。 \n\n当你的使用场景中，有非常严格的实时性需要，不能够接受redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。\n\n\t\t\t#设置密码\n\t\t\tconfig set requirepass 密码\n\t\t\t\n\t\t\t#用密码登录\n\t\t\tauth 密码\n```\n\n### redis 可视化工具\n\nMac版 `https://www.macwk.com/soft/redis-desktop-manager` \n\n### redis 启动服务\n\n#### 启动server\n\n`redis-server`\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshkkun5znj31cw0u0gw6.jpg\" alt=\"image-20210715132834049\" style=\"zoom:67%;\" />\n\n#### 也可以指定配置文件启动\n\n`redis-server ./redis.conf`\n\n![image-20210715133359786](https://tva1.sinaimg.cn/large/008i3skNly1gshkqhqqt0j31mm06awhp.jpg)\n\n#### 打开就客户端连接服务器\n\n`redis-cli`\n\n#### 也可以远程连接，前提是配置过redis.conf,并以这个配置文件启动\n\n`redis-cli -h 192.168.33.33 -p 8899`\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshmmlan8uj319g08qt9u.jpg\" alt=\"远程连接redis server ，关闭保护模式\" style=\"zoom:67%;\" />\n\n### redis 数据类型\n\n| redis数据类型 | 含义     |\n| ------------- | -------- |\n| string        | 字符串   |\n| list          | 列表     |\n| hash          | 字典     |\n| set           | 集合     |\n| sorted set    | 有序集合 |\n| pub/sub       | 订阅     |\n| transactions  | 事务     |\n\n{% btn 'http://redis.cn/commands.html',数据类型相关操作指令参考文档,far fa-hand-point-right %}\n\n{% btn 'http://doc.redisfans.com',命令速查,far fa-hand-point-right %}\n\n#### key的操作\n\n>DBSIZE \tkey的个数\n>\n>FIUSHDB   删当前库\n>\n>FLUSHALL  删所有库\n>\n>keys pattern  查找所有符合给定模式pattern （正则表达式）的key\n>\n>keys *  所有的key\n>\n>exists key 存在返回 1 ，不存在返回 0\n>\n>del key 删除对应的key值\n>\n>type key 返回key对应value值的数据类型\n>\n>expire key seconds     seconds 秒后key自动删除\n>\n>TTL key 查看key剩余的时间,-1 表示永不过期\n>\n>persist key 清除生存时间\n>\n>pexpire key milliseconds 设置生存时间为x x x毫秒\n>\n>rename key newkey key的重命名\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshnaa0m88j30vs0k0n0o.jpg\" alt=\"image-20210715150212683\" style=\"zoom:50%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsi2qw1uc4j30s60i075x.jpg\" alt=\"image-20210715235709133\" style=\"zoom:50%;\" />\n\n#### string 字符串\n\n- string是简单的key-value 的类型，value不仅是string，也可以是数字。\n- string是二进制安全的，可以包含任意的数据类型，string 可以看作是byte 数组，上限为1G字节。\n\n```c\nstruct redis_string\n{\n\tlong len;\n\tlong free;\n\tchar buf[];\n};\n```\n\n- len 数组buf的长度\n- free 数组中可用的字节数\n- buf char类型数组，用于存储实际的字符串内容\n\n> set key value 设置key对应的值为string类型的value\n>\n> get key 获取key对应的value值，key不存在返回nil\n>\n> append key value\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshn46bfldj30pu0as75s.jpg\" alt=\"image-20210715145620961\" style=\"zoom:50%;\" />\n\n>setnx key value   key存在什么也不做，key不存在，相当于set\n>\n>msetnx key1 value1 key2 value2 有一个存在就不成功\n>\n>setex key seconds value 设置key对应字符串value，并且设置key在给定的seconds时间之后超时过期\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshngy25itj30us0j8q6e.jpg\" alt=\"image-20210715150837301\" style=\"zoom:50%;\" />\n\n>setrange key offset value  覆盖key对应的string的一部分，从指定的offset处开始，覆盖value的长度。如果offset比当前key对应string还要长，那这个string后面就补0以达到offset。\n>\n>incr key 1\n>\n>incrby  key 3  一次性加3\n>\n>dear key 1   \n>\n>nearby key 3\n>\n>setrange  key 0  10 从头开始，前两个字符设置为10\n>\n>getrange key start end 获取头到尾的字符\n\n<img src=\"/Users/sunguosheng/Library/Application%20Support/typora-user-images/image-20210715153432030.png\" alt=\"image-20210715153432030\" style=\"zoom: 50%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsho8vjd4pj30ym0dmwh1.jpg\" alt=\"image-20210715153527907\" style=\"zoom:50%;\" />\n\n> 批量的存取         \n>\n> mset key1 value1 key2 value2\n>\n> mget key1 key2 key3           \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshodd5w2sj317m08yq4j.jpg\" alt=\"image-20210715153946272\" style=\"zoom:50%;\" />\n\n### list 列表\n\n- 本质双端链表\n- 我们可以轻松地实现最新消息排行等功能(比如新浪微博的TimeLine )。List 的另一个应用就是消息队列，可以利用List的 PUSH操作，将任务存在List中，然后工作线程再用POP操作将任务取出进行执行。\n\n>lpush key value1 value2 value3 (每次从左面插入新的value)\n>\n>lpushx key value1 value2 要求当且仅当key存在并且是一个列表\n>\n>lpop key 从左边移除第一个元素\n>\n>lrange key start stop 返回存储在key ,范围为start 到 stop 的所有元素，起始为0，最后为-1\n>\n>ltrim key start stop 让这个key对应的list只保留start到stop范围的元素  ，先截取再赋值\n>\n>lien key. 查看key 对应的value长度 \n\n![image-20210715185643622](https://tva1.sinaimg.cn/large/008i3skNly1gshu2amclfj31jm0p6ju0.jpg)\n\n>list 可以从右端进行插入\n>\n>rpush key value1 value2\n>\n>rpop key\n>\n>可以利用list来模拟栈和队列\n>\n>队列，尾入，头出\n>\n>rpush\t\tlpop\n>\n>栈\n>\n>lpush  lpop 或者 rpush rpop             \n\n### set 无序集合\n\n- 集合指一堆不重复值的组合\n- redis为集合提供了求交集和并集，差集的操作\n- 比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。因为 Redis 非常人性化的为集合提供了求交集、并集、差集等操作，那么就可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。\n\n> sadd key member1 member2 member3 添加一个或者多个member到集合key中\n>\n> smembers key 返回key集合所有的元素\n>\n> srem key member 删除key集合中指定的元素        \n>\n> SRANDMEMBER key num key中随机num个\n>\n> spop key 随机出\n>\n> smove source dest num\n>\n> \n\n\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshvsft7vlj312y0hugn0.jpg\" alt=\"image-20210715195627033\" style=\"zoom:67%;\" />\n\n>sinter key1 key2 key3   求集合的交集\n>\n>sunionstore dest key1 key2 返回给定的多个集合的并集中的所有成员，将结果存储destination集合\n>\n>sunion key1 key2 求并集\n>\n>sdiff key1 key2 求差集（A-B 和 B-A 是不一样的）    \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw0ncqp9j317m0u0q4z.jpg\" alt=\"image-20210715200420420\" style=\"zoom:67%;\" />\n\n### sorted set 有序集合\n\n- 在set的基础上加了一个权重参数 score，排序的依据就是这个score\n- 比如一个存储全班同学成绩的 Sorted Sets，其集合 value 可以是同学的学号，而 score 就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。另外还可以用 Sorted Sets 来做带权重的队列，比如普通消息的 score 为1，重要消息的score 为2，然后工作线程可以选择按 score 的倒序来获取工作任务，让重要的任务优先执行。\n\n>zadd key score1 member1 score2 member2 score3 member3\n>\n>zrange key start stop withscores 从小到大\n>\n>zrevrange key start stop withscores  从大到小       \n>\n>zrangebyscore key start_score end_score 筛选出start_score 到end_score 的value\n>\n>ZRANGEBYSCORE zset01 (20 (60 \t大于20小于60\n>\n>ZRANGEBYSCORE zset01 (20 (60 limit 2 1  大于20小于60的结果集从第三个开始取一个\n>\n>ZREM zset01 v1 删除zset01中的v1\n>\n>ZCOUNT zset01 60 80 取分数再60-80的值的个数\n>\n>ZRANK zset01 v4 取V4在zset01中的下标\n>\n>ZREVRANK zset01 v4  取V4在zset01中的逆序下标\n>\n>ZSCORE zset01 v4 取v4 对应的分数\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw8ayij0j31au0e2q49.jpg\" alt=\"image-20210715201142224\" style=\"zoom:80%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw8wfnrfj310209odgd.jpg\" alt=\"image-20210715201216665\" style=\"zoom: 50%;\" />\n\n### hash 字典\n\n- 键值key 对应的是 field字段名称  value 字段值的结合(也就是还是一个键值对)\n\n>hset key field value 设置key指定的哈希集中的字段和字段值\n>\n>hmset key field1 value1 field2 value2\n>\n>hget key field key键值里面field 字段对应的字段值\n>\n>hmget key field1 field2\n>\n>hgetall key  获取所有的字段和字段值 ，注意和HVALS key --->只获取所有的字段值，不获取对应的字段\n>\n>hkeys key 返回 key 指定的哈希集中所有字段的名字\n>\n>hdel key field 删除key指定的哈希集中字段为field的字段\n>\n>hlen key 返回key指定的哈希集中字段的数量          \n>\n>hexists key field  判断对应的字段值是否存在\n>\n>HVALS key 取所有的字段值\n>\n>\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshwrfu84wj31el0u042h.jpg\" alt=\"image-20210715203005524\" style=\"zoom:80%;\" />   \n\n### pub/sub 发布/订阅\n\n- Pub/Sub 从字面上理解就是发布(Publish)与订阅(Subscribe)。发件人(在 Redis 中的术语称为发布者)发送邮件，而接收器(订户)接收它们。信息传输的链路称为通道。Redis 一个客户端可以订阅任意数量的通道。\n- 在 Redis 中，你可以设定对某一个key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天、群聊等功能。\n\n>subscribe channel 订阅给指定频道的信息。一旦客户端进入订阅状态，客户端就只可接受订阅相关的命令。\n>\n>publish channel message 将信息 message 发送到指定的频道 channel。     \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshx0letjij313808k3zb.jpg\" alt=\"image-20210715203853735\" style=\"zoom:67%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshx0zg4q5j30zk0gsabd.jpg\" alt=\"image-20210715203915977\" style=\"zoom:67%;\" />\n\n### transactions 事务\n\n- 事务允许一组命令在单一步骤中执行，也就是一组命令的集合，也就是一次性批处理\n- redis 事务具有原子性，所有命令要么都执行，要么都不执行\n- 事务中的所有命令作为单个独立的操作  顺序执行\n- 一个队列中，一次性的，顺序性的，拍他性的执行一组命令\n- redis的事务性是部分的，在一些情况下是不保证完整性的，下面的后两种状态就显示出来了这个特点\n\n>multi 标记事务的开始\n>\n>exec 执行事务中排队等待的指令并将链接状态恢复正常\n>\n>discard 放弃本次的批处理操作\n>\n>watch 监视一个或者多个key(这个类似于乐观锁，当中间有人修改之后，就会报错；需要重新 unwatch ，拿下数据，再去操作)\n>\n>unwatch 取消对所有key的监控         \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshxa004egj315t0u0jtv.jpg\" alt=\"image-20210715204755336\" style=\"zoom:80%;\" />\n\n#### 事务的几种状态\n\n- 全部执行成功，每一条命令都入队，然后执行.       \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt79wxeiomj30he0ie0tu.jpg\" alt=\"image-20210806190413020\" style=\"zoom:33%;\" />\n\n- 放弃事务           \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt79yhuny7j30is0d0dgq.jpg\" alt=\"image-20210806190546419\" style=\"zoom:33%;\" />\n\n\n\n- 有一个错误，全部就丢失，这个类似于 编译时的报错\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt7a0oihjsj319o0agt9u.jpg\" alt=\"image-20210806190752712\" style=\"zoom:33%;\" />\n\n- 那个错误就找错误的那个，其余的能执行成功（这个类似于运行时的错误）\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt7aq93i4mj30z00i00u8.jpg\" alt=\"image-20210806193226867\" style=\"zoom:33%;\" />\n\n#### redis的主从复制\n\n- 主机数据更新后，根据配置和策略自动同步到备机的master/slaver机制，Master主要为写，Slave以读为准\n- 主要干的事情就是 读写复制和容载备份\n- 怎么用\n  - 配从库不配主库 `slaveof 主库IP 主库PORT`，每次和`mastre`需要重新连接\n  - 修改配置文件中的端口，log目录，rdb 文件名，对应端口，用来做区分\n  - `slaveof ip port`后，从机会复制主机所有的内容；只有主机可以写的，从机只能读；当主机宕机后，从机不会变成主机，主机重新启动之后，会继续当主机的身份\n  - `info repcalition` 查看机器`replication`信息，需要关注`role`字段值\n\n#### 一主二仆\n\n- init.        \n\n <img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gntzmm3j311w0fa0xe.jpg\" alt=\"image-20210807194315072\" style=\"zoom:50%;\" />\n\n- 一个Master ，两个Slaves\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8goh2xbjj61280i6aff02.jpg\" alt=\"image-20210807194354594\" style=\"zoom:50%;\" />\n\n- 主机日志需要关注的点\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gpj0np5j31140d676p.jpg\" alt=\"image-20210807194454785\" style=\"zoom:50%;\" />\n\n- 备机日志需要关注的点\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gq08fggj311i0bk40i.jpg\" alt=\"image-20210807194522564\" style=\"zoom:50%;\" />\n\n- 几个需要关注的问题\n  - 切入点问题？slave1，slave2 是从头开始备份，还是从切入点开始复制？\n    - --》从头开始复制\n  - 从机是否可写？\n    - --》主机可写，从机不可写\n  - 主机shutdown后，从机是变成主机还是原地等待主机？\n    - 从机原地等待\n  - 主机又回来后，主机新增的记录，从机是否可以顺利的复制？\n    - 从机可以自动与主机相连，也就可以自动同步主机新增的数据 。\n  - 如果slave与Master断开之后，后面还能跟上master的脚步吗？\n    - slave与master断开之后，不会自动重新连接，需要配置进 `redis.conf ####REPLICATION####`\n\n#### 薪火相传\n\n- 去中心化的模式（减轻了master的负担），一个传递一个\n- 上一个的slave可以是下一个的master；中途方向变更后，会重新复制最新的数据\n- `slaveof ip port`            \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8nk2kqy2j31gm0kyjvy.jpg\" alt=\"image-20210807234151934\" style=\"zoom:67%;\" />\n\n\n\n#### 反客为主\n\n- `SLAVEOF no one`使当前数据库停止与其他数据库的同步，转成主数据库\n\n#### 复制的原理\n\n- slave连接到master后，会发出一个`sync`的命令\n- master接收到命令会启动一个存盘进程，后台收集所有用于修改的命令，收集完毕后，会把整个数据传送给slave\n- 全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中\n- 增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步\n- 只要是重新连接master，一次完全同步（全量复制)将被自动执行\n\n\n\n#### 哨兵模式\n\n- 一组sentinel能同时监控多个master\n- 反客为主的自动版，能够监控主机是否故障，故障之后按照投票数将从库变为主库\n- 设置\n  - 调整结构，一个主库带着两个从库\n  - 新建`sentinel.conf`文件，名字绝不能错\n  - 配置哨兵\n    - `sentinel monitor 被监控的数据库名字（自己起）监控的库ip 监控的库port  1（要大于的票数）`\n    - 新恢复的master就变成了slave，也就是master已经易主了\n  - 启动哨兵 `redis-sentinel /sentinel.conf`\n\n#### 复制的缺点\n\n- master到slave会有一些延迟，在业务繁忙的时候就会有更多的延迟\n\n  \n\n### redis 持久化\n\n#### 备份数据\n\n- `save`命令即可创建当前redis 的数据的备份，成功之后，会在服务器启动的目录生成对应的dump.rdb文件，文件名和文件路径都可以进行修改，在配置文件中可以设置对应的属性值，可以用 `CONFIG GET dir`命令张查看redis的启动目录\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshydgo13pj31110u0go0.jpg\" alt=\"image-20210715212551022\" style=\"zoom:67%;\" />\n\n- 会在对应目录 生成dump.rdb\n\n#### 数据恢复\n\n- redis 启动的时候会自动加载备份文件\n\n#### RDB(redia database)持久化方式 （默认）\n\n- 通过快照完成，dump.rdb 文件里面放的是真实的数据，也就是将内存中所有的数据进行快照到硬盘上面\n- 快照的频率在 redis.conf 配置文件里面\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshyjbl1dkj31e90u0gpv.jpg\" alt=\"image-20210715213128304\" style=\"zoom:80%;\" />\n\n- 多个频率设定的条件，只要有一个满足就会备份\n- 如果不想备份，注释掉 save的参数\n- 备份的文件名子和路径可以通过 dir 和 dbfilename 参数设定\n- FLUSHALL 都会触发RDB的备份,但是产生的dump.rdb 文件是空的\n\n>redis实现快照的过程：\n>\n>redis使用fork函数复制一份当前进程(父进程)的副本(子进程)，父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入硬盘中的临时文件，当子进程写入完所有数据后会用该临时文件替换旧的RDB文件，至此一次快照操作完成。在执行fork的时候操作系统(类Unix操作系统)会使用写时复制(copy-on-write)策略，即fork函数发生的一刻父子进程共享同一内存数据，当父进程要更改其中某片数据时(如执行一个写命令)，操作系统会将该片数据复制一份以保证子进程的数据不受影响，所以新的RDB文件存储的是执行fork一刻的内存数据。\n>\n>redis在进行快照的过程中不会修改RDB文件，只有快照结束后才会将旧的文件替换成新的，也就是说任何时候RDB文件都是完整的。这使得我们可以通过定时备份RDB文件来实现redis数据库备份。RDB文件是经过压缩(可以配置rdbcompression参数以禁用压缩节省CPU占用)的二进制格式，所以占用的空间会小于内存中的数据大小，更加利于传输。\n>\n>除了自动快照，还可以手动发送SAVE或BGSAVE命令让redis执行快照，两个命令的区别在于，前者是由主进程进行快照操作, 会阻塞住其他请求，后者会通过fork子进程进行快照操作。\n>\n>redis启动后会读取RDB快照文件，将数据从硬盘载入到内存。根据数据量大小与结构和服务器性能不同，这个时间也不同。通常将一个记录一千万个字符串类型键、大小为1GB的快照文件载入到内存中需要花费20~30秒钟。\n>\n>通过RDB方式实现持久化，一旦redis异常退出，就会丢失最后一次快照以后更改的所有数据。这就需要开发者根据具体的应用场合，通过组合设置自动快照条件的方式来将可能发生的数据损失控制在能够接受的范围。如果数据很重要以至于无法承受任何损失，则可以考虑使用AOF方式进行持久化.              \n\n#### AOF(Append only file) 数据持久化\n\n- 默认没有开启AOF方式\n- `appendonly yes` 开启AOF 方式备份 \n- AOF方式会把执行的每一条命令写指令存进磁盘；恢复的时候，会执行命令，恢复数据。\n- 恢复的时候却需要先执行命令，才会恢复数据，相比RDB比较费时间\n\n- AOF 文件名设定\n\n![image-20210715214354527](https://tva1.sinaimg.cn/large/008i3skNly1gshyw95f1mj31a408ugmh.jpg)\n\n- 刷新硬盘缓存频率\n\n![image-20210715214416705](https://tva1.sinaimg.cn/large/008i3skNly1gshywmog4oj30wy08uq3j.jpg)\n\n- 自动重写的条件\n\n  - 当AOF文件大小是上次rewrite大小的一倍且文件大于64M时就会重写\n\n  - rewrite 重写机制，就优化命令，减下磁盘占用\n\n    \n\n![image-20210715214507252](https://tva1.sinaimg.cn/large/008i3skNly1gshyxi13icj616206i74n02.jpg)\n\n\n\n#### AOF 和 RDB共存的问题\n\n- AOF和RDB会共存\n- 先去加载的是 AOF，当AOF中有错误的时候，`redis-server`会启动失败，需要修复AOF文件，使用redis 带的修复工具进行修复 `redis-check-aof --fix xxx.aof`\n\n#### AOF 和 RDB 对比\n\n- AOF\n  - 优点：备份数据较完成，最多丢失2秒的数据\n  - 缺点：磁盘占用较大和恢复较慢\n- RDB\n  - 优点：恢复数据较快\n  - 缺点：备份频率不容易控制，会丢失最后一次的RDB之后的数据\n\n\n\n### redis 客户端编程\n\n{% btn 'https://github.com/redis/hiredis',下载地址,far fa-hand-point-rigth %}\n\n```bash\nmake \nsudo make install\n```\n\n#### API 说明\n\n```c\nredisContext *redisConnect(const char *ip,int port)\n功能：连接redis数据库\n参数：IP 和 port\n返回值： 成功：redisContext 指针 ；失败 NULL\n---------------------------\nvoid *redisCommand(redisContext *c,const char * formate,...)\n功能：执行命令\n参数：redisConnect的返回值\n  \t命令......\n返回值： 成功：void *,会转换成redisReply类型 ；失败 NULL\n  \ntypedef struct redisReply {\n\tint type; /* REDIS_REPLY_* */\n\tlong long integer; /* The integer when type is REDIS_REPLY_INTEGER */\n\tsize_t len; /* Length of string */\n\tchar *str; /* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING */\n\tsize_t elements; /* number of elements, for REDIS_REPLY_ARRAY */\n\tstruct redisReply **element; /* elements vector for REDIS_REPLY_ARRAY */\n} redisReply;\n---------------------------\nvoid freeReplyObject(void *reply);\n功能：释放redisCommand执行后返回的redisReply所占用的内存\n参数：redisCommand执行后返回的redisReply\n返回值：无\n---------------------------\nvoid redisFree(redisContext *c);\n功能：释放redisConnect()所产生的连接\n参数：redisConnect()所产生的连接\n返回值：无\n```\n\n- redisReply ->type 中字段的标识 \n\n| 状态标识            | 含义                                                         |\n| ------------------- | ------------------------------------------------------------ |\n| REDIS_REPLY_STATUS  | 表示状态，内容通过str字段查看，字符串长度是len字段           |\n| REDIS_REPLY_ERROR   | 表示出错，查看出错信息，如上的str，len字段                   |\n| REDIS_REPLY_INTEGER | 返回整数，从integer字段获取值                                |\n| REDIS_REPLY_NIL     | 没有数据返回                                                 |\n| REDIS_REPLY_STRING  | 返回字符串，查看str，len字段                                 |\n| REDIS_REPLY_ARRAY   | 返回一个数组，查看elements的值(数组个数)，通过element[index] 的方式访问数组元素，每个数组元素是一个redisReply对象的指针。 |\n\n- redisReply->errata 字段查看\n\n| 错误状态标识       | 含义                               |\n| ------------------ | ---------------------------------- |\n| REDIS_OK           | 正常                               |\n| REDIS_ERR_IO       | IO读/写出现异常，通过errno查看原因 |\n| REDIS_ERR_EOF      | 服务器关闭了链接，读结束           |\n| REDIS_ERR_PROTOCOL | 分析redis协议内容出错              |\n| EDIS_ERR_OTHER     | 其他未知的错误                     |\n\n\n\n#### 测试用例\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <stdarg.h>\n#include <string.h>\n#include <assert.h>\n#include </usr/local/include/hiredis/hiredis.h>\n\n#define IP \"10.211.55.11\"\n#define PORT 8899\n\nvoid doWork()\n{\n    //port 8899 ip 10.211.55.11\n    redisContext * c = redisConnect(IP,PORT);\n    if(c->err)\n    {\n        redisFree(c);\n        perror(\"connect redis server fail!\");\n        return;\n    }\n\n    puts(\"connect redis server ok!\");\n//----------------\n    const char * command1 = \"set myname sungs\";\n    redisReply * r = (redisReply*)redisCommand(c,command1);\n    if(r == NULL)\n    {\n        redisFree(c);\n        perror(\"command1 error!\");\n        return;\n    }\n\n    if(!(r->type == REDIS_REPLY_STATUS && strcasecmp(r->str,\"ok\") == 0))\n    {\n        printf(\"Failed to execute command[%s]\\n\",command1);\n\t\tfreeReplyObject(r);\n\t\tredisFree(c);\n\t\treturn;\n    }\n\n    freeReplyObject(r);\n\tprintf(\"Succeed to execute command[%s]\\n\", command1);\n//-----------------\n    const char *command2 = \"strlen myname\";\n\n    r = (redisReply *)redisCommand(c,command2);\n    if(r == NULL)\n    {\n        redisFree(c);\n        perror(\"command2 error!\");\n        return ;\n    }\n\n    if(r->type != REDIS_REPLY_INTEGER)\n    {\n        freeReplyObject(r);\n        redisFree(c);\n        perror(\"REDIS_REPLY_INTEGE error\");\n        return;\n    }\n\n    int length = r->integer;\n    freeReplyObject(r);\n    printf(\"Succeed to execute command[%s]--->[%d]\\n\", command2,length);\n\n    const char* command3 = \"get myname\";\n\tr = (redisReply*)redisCommand(c, command3);\n\tif ( r->type != REDIS_REPLY_STRING)\n\t{\n\t\tprintf(\"Failed to execute command[%s]\\n\",command3);\n\t\tfreeReplyObject(r);\n\t\tredisFree(c);\n\t\treturn;\n\t} \n\n\tprintf(\"The value of 'myname' is %s\\n\", r->str);\n\tfreeReplyObject(r);\n\tprintf(\"Succeed to execute command[%s]\\n\", command3);\n\n\tconst char* command4 = \"get key2\";\n\tr = (redisReply*)redisCommand(c, command4);\n\tif ( r->type == REDIS_REPLY_NIL)\n\t{\n\t\tprintf(\"Failed to execute command[%s]\\n\",command4);\n\t\tfreeReplyObject(r);\n\t\tredisFree(c);\n\t\treturn;\n\t} \n\t\n\tfreeReplyObject(r);\n\tprintf(\"Succeed to execute command[%s]\\n\", command4);\n\tredisFree(c);\n\n}\n\n\n\nint main(void)\n{\n\tdoWork();\n\treturn 0;\n}\n```\n\n![image-20210715231818738](https://tva1.sinaimg.cn/large/008i3skNly1gsi1mh7socj31bo0butak.jpg)\n\n### 接口封装\n\n```c\n/**\n * @file   redis_api.h\n * @brief  redis 封装接口\n */\n\n#ifndef _REDIS_OP_H_\n#define _REDIS_OP_H_\n\n#include <hiredis.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <string.h>\n#include \"make_log.h\"\n\n\n#define REDIS_LOG_MODULE          \"database\"\n#define REDIS_LOG_PROC            \"redis\"\n\n#define REDIS_COMMAND_SIZE        300            /* redis Command 指令最大长度 */\n#define FIELD_ID_SIZE            100            /* redis hash表field域字段长度 */\n#define VALUES_ID_SIZE           1024            /* redis        value域字段长度 */\ntypedef char (*RCOMMANDS)[REDIS_COMMAND_SIZE];/* redis 存放批量 命令字符串数组类型 */\ntypedef char (*RFIELDS)[FIELD_ID_SIZE];        /* redis hash表存放批量field字符串数组类型 */\ntypedef char (*RVALUES)[VALUES_ID_SIZE];    /* redis 表存放批量value字符串数组类型 */\n\n\n/* -------------------------------------------*/\n/**\n * @brief  redis tcp模式链接\n *\n * @param ip_str\tredis服务器ip\n * @param port_str\tredis服务器port\n *\n * @returns   \n *\t\t\t成功返回链接句柄 \n *\t\t\t失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_nopwd(char *ip_str, char* port_str);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  redis tcp模式链接\n *\n * @param ip_str    redis服务器ip\n * @param port_str  redis服务器port\n * @param pwd       redis服务器密码\n *\n * @returns   \n *            成功返回链接句柄 \n *            失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb(char *ip_str, char* port_str, char *pwd);\n\n/* -------------------------------------------*/\n/**\n * @brief  redis unix域模式链接\n *\n * @param ip_str    unix域sock文件\n * @param  pwd      redis服务器密码\n *\n * @returns   \n *            成功返回链接句柄 \n *            失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_unix(char *sock_path, char *pwd);\n\n/* -------------------------------------------*/\n/**\n * @brief  tcp 链接redis超时等待模式，timeval链接超时\n *            返回\n *\n * @param ip_str        redis 服务器ip\n * @param port_str        redis 服务器端口\n * @param timeval        最大超时等待时间\n *\n * @returns   \n *        成功返回链接句柄\n *        失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_timeout(char* ip_str, char *port_str, struct timeval *timeout);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  关闭指定的链接句柄\n *\n * @param conn    已建立好的链接\n */\n/* -------------------------------------------*/\nvoid rop_disconnect(redisContext* conn);\n\n/* -------------------------------------------*/\n/**\n * @brief  选择redis中 其中一个数据库\n *\n * @param conn        已链接的数据库链接\n * @param db_no        redis数据库编号\n *\n * @returns   \n *            -1 失败\n *            0  成功\n */\n/* -------------------------------------------*/\nint rop_selectdatabase(redisContext *conn, unsigned int db_no);\n\n/* -------------------------------------------*/\n/**\n * @brief            清空当前数据库所有信息(慎用)\n *\n * @param conn        已链接的数据库链接\n *\n * @returns   \n *            -1 失败\n *            0  成功\n */\n/* -------------------------------------------*/\nint rop_flush_database(redisContext *conn);\n\n/* -------------------------------------------*/\n/**\n * @brief  判断key值是否存在\n *\n * @param conn        已经建立的链接\n * @param key        需要寻找的key值\n *\n * @returns   \n *                -1 失败\n *                1 存在\n *                0 不存在\n */\n/* -------------------------------------------*/\nint rop_is_key_exist(redisContext *conn, char* key);\n\n/* -------------------------------------------*/\n/**\n * @brief            删除一个key\n *\n * @param conn        已经建立的链接\n * @param key        \n *\n * @returns   \n *                -1 失败\n *                0 成功\n */\n/* -------------------------------------------*/\nint rop_del_key(redisContext *conn, char *key);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  打印库中所有匹配pattern的key\n *\n * @param conn        已建立好的链接\n * @param pattern    匹配模式，pattern支持glob-style的通配符格式，\n *                    如 *表示任意一个或多个字符，\n *                       ?表示任意字符，\n *                    [abc]表示方括号中任意一个字母。\n */\n/* -------------------------------------------*/\nvoid rop_show_keys(redisContext *conn, char* pattern);\n\n/* -------------------------------------------*/\n/**\n * @brief  设置一个key的删除时间 ，系统到达一定时间\n *            将会自动删除该KEY\n *\n * @param conn                已经建立好的链接\n * @param delete_time        到期事件 time_t 日历时间\n *\n * @returns   \n *        0    SUCC\n *        -1  FAIL\n */\n/* -------------------------------------------*/\nint rop_set_key_lifecycle(redisContext *conn, char *key, time_t delete_time);\n\n/* -------------------------------------------*/\n/**\n * @brief            创建或者覆盖一个HASH表\n *\n * @param conn                已建立好的链接\n * @param key                hash 表名\n * @param element_num        hash 表区域个数\n * @param fields            hash 表区域名称数组char(*)[FIELD_ID_SIZE]\n * @param values            hash 表区域值数组  char(*)[VALUES_ID_SIZE]\n *\n * @returns   \n *            0   成功    \n *            -1  失败\n */\n/* -------------------------------------------*/\nint rop_create_or_replace_hash_table(redisContext* conn,\n                                     char* key, \n                                     unsigned int element_num, \n                                     RFIELDS fields, \n                                     RVALUES values);\n\n/* -------------------------------------------*/\n/**\n * @brief  给指定的hash表 指定的field对应的value自增num\n *\n * @param conn\t\t\t已建立好的链接\n * @param key\t\t\thash表名\n * @param field\t\t\thash表下的区域名\n *\n * @returns\n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tfail\n */\n/* -------------------------------------------*/\nint rop_hincrement_one_field(redisContext *conn, char *key, char *field, unsigned int num);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行链表插入命令 插入链表头部\n *\n * @param conn        已建立好的链接\n * @param key        链表名\n * @param values    封装好的域名\n * @param values    封装好的值数组\n * @param val_num    值个数\n *\n * @returns   \n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_hash_set_append(redisContext *conn, char *key, RFIELDS fields, RVALUES values, int val_num);\n\n/* -------------------------------------------*/\n/**\n * @brief  想一个hash表中添加一条 key-value 数据\n *\n * @param conn  redis连接\n * @param key   哈希表名\n * @param field\n * @param value\n *\n * @returns\n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_hash_set(redisContext *conn, char *key, char *field, char *value);\n\n/* -------------------------------------------*/\n/**\n * @brief  从一个hash表中取出一条 key-value 数据\n *\n * @param conn  redis连接\n * @param key   哈希表名\n * @param field 字段名称\n * @param value 得到的数据， 需要先开辟内存\n *\n * @returns\n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_hash_get(redisContext *conn, char *key, char *field, char *value);\n\n\n\n/* -------------------------------------------*/\n/**\n * @brief        将指定的zset表，对应的成员，值自增1\n *                （key 或 成员不存在 则创建）\n *\n * @param conn        已建立的链接\n * @param key        zset表名\n * @param member    zset成员名\n *\n * @returns   \n *            0            succ\n *            -1            fail\n */\n/* -------------------------------------------*/\nint rop_zset_increment(redisContext *conn, char* key, char* member);\n\n\n//得到zset一个member的score\nint rop_zset_get_score(redisContext *conn, char *key, char *member);\n\n/* -------------------------------------------*/\n/**\n * @brief     批量将指定的zset表，对应的成员，值自增1\n *                （key 或 成员不存在 则创建）\n *\n * @param conn        已建立好的链接\n * @param key        有序集合名称\n * @param values    封装好的成员数组\n * @param val_num    数据个数\n *\n * @returns   \n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_zset_increment_append(redisContext *conn, char *key, RVALUES values, int val_num);\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行链表插入命令 插入链表头部\n *\n * @param conn        已建立好的链接\n * @param key        链表名\n * @param values    封装好的值数组\n * @param val_num    值个数\n *\n * @returns   \n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_list_push_append(redisContext *conn, char *key, RVALUES values, int val_num);\n\n/* -------------------------------------------*/\n/**\n * @brief  单条数据插入链表\n *\n * @param conn        已建立好的链接\n * @param key        链表名\n * @param value        数据\n *\n * @returns   \n */\n/* -------------------------------------------*/\nint rop_list_push(redisContext *conn, char *key, char *value);\n\n/* -------------------------------------------*/\n/**\n * @brief  得到链表中元素的个数\n *\n * @param conn    链接句柄\n * @param key    链表名\n *\n * @returns   \n *            >=0 个数\n *            -1 fail\n */\n/* -------------------------------------------*/\nint rop_get_list_cnt(redisContext *conn, char *key);\n\n/* -------------------------------------------*/\n/**\n * @brief  按照一定范围截断链表中的数据\n *\n * @param conn        已经建立的链接\n * @param key        链表名\n * @param begin        阶段启示位置 从 0 开始\n * @param end        阶段结束位置 从 -1 开始\n *\n *                    这里的范围定义举例 \n *                    如果得到全部范围(0, -1)\n *                    除了最后一个元素范围(0, -2)\n *                    前20各数据范围(0, 19)\n *\n * @returns   \n *            0  SUCC\n *            -1 FAIL\n */\n/* -------------------------------------------*/\nint rop_trim_list(redisContext *conn, char *key, int begin, int end);\n\n/* -------------------------------------------*/\n/**\n * @brief          得到链表中的数据\n *\n * @param conn\t\t已经建立的链接\n * @param key\t\t链表名\n *\n * @returns   \n *\t\t\t0  SUCC\n *\t\t\t-1 FAIL\n */\n/* -------------------------------------------*/\nint rop_range_list(redisContext *conn, char *key, int from_pos, int count, RVALUES values, int *get_num);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行已经封装好的redis 命令\n *\n * @param conn        已建立好的链接\n * @param cmds        封装好的命令数组\n * @param cmd_num    命令个数\n *\n * @returns   \n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_redis_append(redisContext *conn, RCOMMANDS cmds, int cmd_num);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  执行单向命令 无返回值 命令自行输入\n *\n * @param conn        已建立的链接\n * @param cmd        封装好的命令\n *\n * @returns   \n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_redis_command(redisContext *conn, char *cmd);\n\n/* -------------------------------------------*/\n/**\n * @brief  测试一个reply的结果类型\n *            得到对应的类型用对应的方法获取数据\n *\n * @param reply        返回的命令结果\n */\n/* -------------------------------------------*/\nvoid rop_test_reply_type(redisReply *reply);\n\n\n/* -------------------------------------------*/\n/**\n * @brief  设置key对应的值为string类型的value\n *            \n * @param conn          已经建立好的链接\n * @param key        \tkey值\n * @param value         value值\n *\n * @returns   \n *        0    SUCC\n *        -1  FAIL\n */\n/* -------------------------------------------*/\nint rop_set_string(redisContext *conn, char *key, char *value);\n\n/* -------------------------------------------*/\n/**\n * @brief  获取key对应的value值\n *            \n * @param conn          已经建立好的链接\n * @param key        \tkey值\n * @param value         value值\n *\n * @returns   \n *        0    SUCC\n *        -1  FAIL\n */\n/* -------------------------------------------*/\nint rop_get_string(redisContext *conn, char *key, char *value);\n\n#endif\n\n```\n\n```c\n/**\n * @file redis_op.c\n * @brief  redis 操作基本接口和key的操作实现\n */\n\n#include \"redis_op.h\"\n\n\n/* -------------------------------------------*/\n/**\n * @brief  选择redis一个数据库\n *\n * @param conn\t\t已链接的数据库链接\n * @param db_no\t\tredis数据库编号\n *\n * @returns   \n *\t\t\t-1 失败\n *\t\t\t0  成功\n */\n/* -------------------------------------------*/\nint rop_selectdatabase(redisContext *conn, unsigned int db_no)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\n\n\t/* 选择一个数据库 */\n\treply = redisCommand(conn, \"select %d\", db_no);\n\tif (reply == NULL) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS]Select database %d error!\\n\", db_no);\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Select database %d error!%s\\n\", db_no, conn->errstr);\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\n\tprintf(\"[+][GMS_REDIS]Select database %d SUCCESS!\\n\", db_no);\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]Select database %d SUCCESS!\\n\", db_no);\n\nEND:\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief\t\t\t清空当前数据库所有信息(慎用)\n *\n * @param conn\t\t已链接的数据库链接\n *\n * @returns   \n *\t\t\t-1 失败\n *\t\t\t0  成功\n */\n/* -------------------------------------------*/\nint rop_flush_database(redisContext *conn)\n{\n\tint retn = 0;\t\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"FLUSHDB\");\n\tif (reply == NULL) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS]Clear all data error\\n\");\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Clear all data error\\n\");\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\n\tprintf(\"[+][GMS_REDIS]Clear all data!!\\n\");\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Clear all data!!\\n\");\n\nEND:\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  判断key值是否存在\n *\n * @param conn\t\t已经建立的链接\n * @param key\t\t需要寻找的key值\n *\n * @returns   \n *\t\t\t\t-1 失败\n *\t\t\t\t1 存在\n *\t\t\t\t0 不存在\n */\n/* -------------------------------------------*/\nint rop_is_key_exist(redisContext *conn, char* key)\n{\n\tint retn = 0;\t\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"EXISTS %s\", key);\n\t//rop_test_reply_type(reply);\n\tif (reply->type != REDIS_REPLY_INTEGER) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS]is key exist get wrong type!\\n\");\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]is key exist get wrong type! %s\\n\", conn->errstr);\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\n\tif (reply->integer == 1) {\n\t\tretn = 1;\t\n\t}\n\telse {\n\t\tretn = 0;\n\t}\n\nEND:\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief\t\t\t删除一个key\n *\n * @param conn\t\t已经建立的链接\n * @param key\t\t\n *\n * @returns   \n *\t\t\t\t-1 失败\n *\t\t\t\t0 成功\n */\n/* -------------------------------------------*/\nint rop_del_key(redisContext *conn, char *key)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"DEL %s\", key);\n\tif (reply->type != REDIS_REPLY_INTEGER) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS] DEL key %s ERROR\\n\", key);\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS] DEL key %s ERROR %s\\n\", key, conn->errstr);\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\n\tif (reply->integer > 0) {\n\t\tretn = 0;\t\n\t}\n\telse {\n\t\tretn = -1;\n\t}\n\nEND:\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  设置一个key的删除时间 ，系统到达一定时间\n *\t\t\t将会自动删除该KEY\n *\n * @param conn\t\t\t\t已经建立好的链接\n * @param delete_time\t\t到期事件 time_t 日历时间\n *\n * @returns   \n *\t\t0\tSUCC\n *\t\t-1  FAIL\n */\n/* -------------------------------------------*/\nint rop_set_key_lifecycle(redisContext *conn, char *key, time_t delete_time)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\t\t\n\t\n\treply = redisCommand(conn, \"EXPIREAT %s %d\", key, delete_time);\n\tif (reply->type != REDIS_REPLY_INTEGER) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS]Set key:%s delete time ERROR!\\n\", key);\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Set key:%s delete time ERROR! %s\\n\", key, conn->errstr);\n\t\tretn = -1;\n\t}\n\tif (reply->integer == 1) {\n\t\t/* 成功 */\n\t\tretn = 0;\n\t}\n\telse {\n\t\t/* 错误 */\n\t\tretn = -1;\n\t}\n\n\n\tfreeReplyObject(reply);\t\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  打印库中所有匹配pattern的key\n *\n * @param conn\t\t已建立好的链接\n * @param pattern\t匹配模式，pattern支持glob-style的通配符格式，\n *\t\t\t\t\t如 *表示任意一个或多个字符，\n *\t\t\t\t\t   ?表示任意字符，\n *\t\t\t\t    [abc]表示方括号中任意一个字母。\n */\n/* -------------------------------------------*/\nvoid rop_show_keys(redisContext *conn, char* pattern)\n{\n\tint i = 0;\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"keys %s\", pattern);\n\tif (reply->type != REDIS_REPLY_ARRAY) {\n\t\tfprintf(stderr, \"[-][GMS_REDIS]show all keys and data wrong type!\\n\");\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]show all keys and data wrong type! %s\\n\", conn->errstr);\n\t\tgoto END;\n\t}\n\n\tfor (i = 0; i < reply->elements; ++i) {\n\t\tprintf(\"======[%s]======\\n\", reply->element[i]->str);\n\t}\n\n\nEND:\n\tfreeReplyObject(reply);\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行已经封装好的redis 命令\n *\n * @param conn\t\t已建立好的链接\n * @param cmds\t\t封装好的命令数组\n * @param cmd_num\t命令个数\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tFAIL\n */\n/* -------------------------------------------*/\nint rop_redis_append(redisContext *conn, RCOMMANDS cmds, int cmd_num)\n{\n\tint retn = 0;\n\tint i = 0;\n\tredisReply *reply = NULL;\n\n\n\t/* 批量插入命令到缓冲命令管道 */\n\tfor (i = 0; i < cmd_num; ++i) {\n\t\tretn = redisAppendCommand(conn, cmds[i]);\n\t\tif (retn != REDIS_OK) {\n\t\t\tfprintf(stderr, \"[-][GMS_REDIS]Append Command: %s ERROR!\\n\", cmds[i]);\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Append Command: %s ERROR! %s\\n\", cmds[i], conn->errstr);\n\t\t\tretn = -1;\n\t\t\tgoto END;\n\t\t}\n\t\tretn = 0;\n\t}\n\n\t/* 提交命令 */\n\tfor (i = 0; i < cmd_num; ++i) {\n\t\tretn = redisGetReply(conn, (void**)&reply);\n\t\tif (retn != REDIS_OK) {\n\t\t\tretn = -1;\n\t\t\tfprintf(stderr, \"[-][GMS_REDIS]Commit Command:%s ERROR!\\n\", cmds[i]);\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Commit Command:%s ERROR! %s\\n\", cmds[i], conn->errstr);\n\t\t\tfreeReplyObject(reply);\n\t\t\tbreak;\n\t\t}\n\t\tfreeReplyObject(reply);\n\t\tretn = 0;\n\t}\n\t\nEND:\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  执行单向命令 无返回值 命令自行输入\n *\n * @param conn\t\t已建立的链接\n * @param cmd\t\t封装好的命令\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tFAIL\n */\n/* -------------------------------------------*/\nint rop_redis_command(redisContext *conn, char *cmd)\n{\n\tint retn = 0;\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, cmd);\n\tif (reply == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Command : %s ERROR!%s\\n\", cmd, conn->errstr);\n\t\tretn = -1;\n\t}\n\n\tfreeReplyObject(reply);\n\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  测试一个reply的结果类型\n *\t\t\t得到对应的类型用对应的方法获取数据\n *\n * @param reply\t\t返回的命令结果\n */\n/* -------------------------------------------*/\nvoid rop_test_reply_type(redisReply *reply)\n{\n\tswitch (reply->type) {\n\t\tcase REDIS_REPLY_STATUS:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_STATUS=[string] use reply->str to get data, reply->len get data len\\n\");\n\t\t\tbreak;\n\t\tcase REDIS_REPLY_ERROR:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_ERROR=[string] use reply->str to get data, reply->len get date len\\n\");\n\t\t\tbreak;\n\t\tcase REDIS_REPLY_INTEGER:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_INTEGER=[long long] use reply->integer to get data\\n\");\n\t\t\tbreak;\n\t\tcase REDIS_REPLY_NIL:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_NIL=[] data not exist\\n\");\n\t\t\tbreak;\n\t\tcase REDIS_REPLY_ARRAY:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_ARRAY=[array] use reply->elements to get number of data, reply->element[index] to get (struct redisReply*) Object\\n\");\n\t\t\tbreak;\n\t\tcase REDIS_REPLY_STRING:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[+][GMS_REDIS]=REDIS_REPLY_string=[string] use reply->str to get data, reply->len get data len\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Can't parse this type\\n\");\n\t\t\tbreak;\n\t}\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  redis tcp模式链接\n *\n * @param ip_str\tredis服务器ip\n * @param port_str\tredis服务器port\n *\n * @returns   \n *\t\t\t成功返回链接句柄 \n *\t\t\t失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_nopwd(char *ip_str, char* port_str)\n{\n\tredisContext *conn = NULL;\n\tuint16_t port = atoi(port_str);\n\n\tconn = redisConnect(ip_str, port);\n\n\tif (conn  == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:Can't allocate redis context!\\n\", ip_str, port);\t\t\n\t\tgoto END;\n\t}\n\n\tif (conn->err) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:%s\\n\", ip_str, port, conn->errstr);\t\n\t\tredisFree(conn);\n\t\tconn = NULL;\n\t\tgoto END;\n\t}\n\t\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n\", ip_str, port);\n\nEND:\n\treturn conn;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  redis tcp模式链接\n *\n * @param ip_str\tredis服务器ip\n * @param port_str\tredis服务器port\n *\n * @returns   \n *\t\t\t成功返回链接句柄 \n *\t\t\t失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb(char *ip_str, char* port_str, char *pwd)\n{\n\tredisContext *conn = NULL;\n\tuint16_t port = atoi(port_str);\n    char auth_cmd[REDIS_COMMAND_SIZE];\n\n\tconn = redisConnect(ip_str, port);\n\n\tif (conn  == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:Can't allocate redis context!\\n\", ip_str, port);\t\t\n\t\tgoto END;\n\t}\n\n\tif (conn->err) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:%s\\n\", ip_str, port, conn->errstr);\t\n\t\tredisFree(conn);\n\t\tconn = NULL;\n\t\tgoto END;\n\t}\n\n    redisReply *reply = NULL;\n    sprintf(auth_cmd, \"auth %s\", pwd);\n\n    reply = redisCommand(conn, auth_cmd);\n\tif (reply == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Command : auth %s ERROR!\\n\", pwd);\n        conn = NULL;\n        goto END;\n\t}\n    freeReplyObject(reply);\n\n\t\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n\", ip_str, port);\n\nEND:\n\treturn conn;\n}\n\n/* -------------------------------------------*\n**\n * @brief  redis unix域模式链接\n *\n * @param ip_str\tunix域sock文件\n *\n * @returns   \n *\t\t\t成功返回链接句柄 \n *\t\t\t失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_unix(char *sock_path, char *pwd)\n{\n\tredisContext *conn = NULL;\n    char auth_cmd[REDIS_COMMAND_SIZE];\n\n\tconn = redisConnectUnix(sock_path);\n\tif (conn  == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect domain-unix:%s Error:Can't allocate redis context!\\n\", sock_path);\t\t\n\t\tgoto END;\n\t}\n\n\tif (conn->err) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect domain-unix:%s Error:%s\\n\", sock_path, conn->errstr);\t\n\t\tredisFree(conn);\n\t\tconn = NULL;\n\t\tgoto END;\n\t}\n\n    redisReply *reply = NULL;\n    sprintf(auth_cmd, \"auth %s\", pwd);\n    reply = redisCommand(conn, auth_cmd);\n\tif (reply == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Command : auth %s ERROR!\\n\", pwd);\n        conn = NULL;\n        goto END;\n\t}\n    freeReplyObject(reply);\n\t\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Connect domain-unix:%s SUCCESS!\\n\", sock_path);\n\nEND:\n\treturn conn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  tcp 链接redis超时等待模式，timeval链接超时\n *\t\t\t返回\n *\n * @param ip_str\t\tredis 服务器ip\n * @param port_str\t\tredis 服务器端口\n * @param timeval\t\t最大超时等待时间\n *\n * @returns   \n *\t\t成功返回链接句柄\n *\t\t失败返回NULL\n */\n/* -------------------------------------------*/\nredisContext* rop_connectdb_timeout(char* ip_str, char *port_str, struct timeval *timeout)\n{\n\tredisContext *conn = NULL;\n\tuint16_t port = atoi(port_str);\n\n\n\tconn = redisConnectWithTimeout(ip_str, port, *timeout);\n\n\tif (conn  == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:Can't allocate redis context!\\n\", ip_str, port);\n\t\tgoto END;\n\t}\n\n\tif (conn->err) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Connect %s:%d Error:%s\\n\", ip_str, port, conn->errstr);\t\n\t\tredisFree(conn);\n\t\tconn = NULL;\n\t\tgoto END;\n\t}\n\t\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n\", ip_str, port);\n\nEND:\n\treturn conn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  关闭指定的链接句柄\n *\n * @param conn\t已建立好的链接\n */\n/* -------------------------------------------*/\nvoid rop_disconnect(redisContext* conn)\n{\n\tif (conn == NULL) {\n\t\treturn ;\n\t}\n\tredisFree(conn);\n\t\n\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,\"[+][GMS_REDIS]Disconnect SUCCESS!\\n\");\n}\n\n/* 封装一个 hmset 命令 */\nstatic char* make_hmset_command(char* key, unsigned int element_num, RFIELDS fields, RVALUES values)\n{\n\tchar *cmd = NULL;\t\n\tunsigned int buf_size = 0;\n\tunsigned int use_size = 0;\n\tunsigned int i = 0;\n\n\tcmd = (char*)malloc(1024*1024);\n\tif (cmd == NULL) {\n\t\tgoto END;\n\t}\n\tmemset(cmd, 0, 1024*1024);\n\tbuf_size += 1024*1024;\n\n\tstrncat(cmd, \"hmset\", 6);\n\tuse_size += 5;\n\tstrncat(cmd, \" \", 1);\n\tuse_size += 1;\n\n\tstrncat(cmd, key, 200);\n\tuse_size += 200;\n\n\tfor (i = 0; i < element_num; ++i) {\n\n\t\tstrncat(cmd, \" \", 1);\n\t\tuse_size += 1;\n\t\tif (use_size >= buf_size) {\n\t\t\tcmd = realloc(cmd, use_size + 1024*1024);\n\t\t\tif (cmd == NULL) {\n\t\t\t\tgoto END;\n\t\t\t}\n\t\t\tbuf_size += 1024*1024;\n\t\t}\n\n\t\tstrncat(cmd, fields[i], FIELD_ID_SIZE);\n\t\tuse_size += strlen(fields[i]);\n\t\tif (use_size >= buf_size) {\n\t\t\tcmd = realloc(cmd, use_size + 1024*1024);\n\t\t\tif (cmd == NULL) {\n\t\t\t\tgoto END;\n\t\t\t}\n\t\t\tbuf_size += 1024*1024;\n\t\t}\n\n\n\t\tstrncat(cmd, \" \", 1);\n\t\tuse_size += 1;\n\t\tif (use_size >= buf_size) {\n\t\t\tcmd = realloc(cmd, use_size + 1024*1024);\n\t\t\tif (cmd == NULL) {\n\t\t\t\tgoto END;\n\t\t\t}\n\t\t\tbuf_size += 1024*1024;\n\t\t}\n\n\t\tstrncat(cmd, values[i], VALUES_ID_SIZE);\n\t\tuse_size += strlen(values[i]);\n\t\tif (use_size >= buf_size) {\n\t\t\tcmd = realloc(cmd, use_size + 1024*1024);\n\t\t\tif (cmd == NULL) {\n\t\t\t\tgoto END;\n\t\t\t}\n\t\t\tbuf_size += 1024*1024;\n\t\t}\n\n\t}\n\nEND:\n\treturn cmd;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行链表插入命令 插入链表头部\n *\n * @param conn\t\t已建立好的链接\n * @param key\t\t链表名\n * @param values\t封装好的值数组\n * @param val_num\t值个数\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tFAIL\n */\n/* -------------------------------------------*/\nint rop_hash_set_append(redisContext *conn, char *key, RFIELDS fields, RVALUES values, int val_num)\n{\n    int retn = 0;\n    int i = 0;\n    redisReply *reply = NULL;\n\n\t/* 批量插入命令到缓冲命令管道 */\n    for (i = 0; i < val_num; ++i) {\n        retn = redisAppendCommand(conn, \"hset %s %s %s\", key, fields[i], values[i]);\n        if (retn != REDIS_OK) {\n            LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]HSET %s %s %s ERROR![%s]\\n\", key, fields[i], values[i], conn->errstr);\n            retn = -1;\n            goto END;\n        }\n        retn = 0;\n    }\n\n\t/* 提交命令 */\n\tfor (i = 0; i < val_num; ++i) {\n\t\tretn = redisGetReply(conn, (void**)&reply);\n\t\tif (retn != REDIS_OK) {\n\t\t\tretn = -1;\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Commit HSET %s %s %s ERROR![%s]\\n\", key, fields[i], values[i], conn->errstr);\n\t\t\tfreeReplyObject(reply);\n\t\t\tbreak;\n\t\t}\n\t\tfreeReplyObject(reply);\n\t\tretn = 0;\n\t}\n\t\nEND:\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  想一个hash表中添加一条 key-value 数据\n *\n * @param conn  redis连接\n * @param key   哈希表名\n * @param field\n * @param value\n *\n * @returns\n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_hash_set(redisContext *conn, char *key, char *field, char *value)\n{\n    int retn = 0;\n    redisReply *reply = NULL;\n\n    reply =  redisCommand(conn, \"hset %s %s %s\", key, field, value);\n    if (reply == NULL || reply->type != REDIS_REPLY_INTEGER) {\n        LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]hset %s %s %s error %s\\n\", key, field, value,conn->errstr);\n        retn =  -1;\n        goto END;\n    }\n\n\nEND:\n    freeReplyObject(reply);\n\n    return retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  从一个hash表中取出一条 key-value 数据\n *\n * @param conn  redis连接\n * @param key   哈希表名\n * @param field 字段名称\n * @param value 得到的数据， 需要先开辟内存\n *\n * @returns\n *            0        succ\n *            -1        FAIL\n */\n/* -------------------------------------------*/\nint rop_hash_get(redisContext *conn, char *key, char *field, char *value)\n{\n    int retn = 0;\n    int len = 0;\n\n    redisReply *reply = NULL;\n\n    reply =  redisCommand(conn, \"hget %s %s\", key, field);\n    if (reply == NULL || reply->type != REDIS_REPLY_STRING) {\n        LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]hget %s %s  error %s\\n\", key, field, conn->errstr);\n        retn =  -1;\n        goto END;\n    }\n\n\n    len = reply->len > VALUES_ID_SIZE? VALUES_ID_SIZE:reply->len ;\n\n    strncpy(value, reply->str, len);\n\n    value[len] = '\\0';\n\n\nEND:\n    freeReplyObject(reply);\n\n\n    return retn;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief\t\t\t创建或者覆盖一个HASH表\n *\n * @param conn\t\t\t\t已建立好的链接\n * @param key\t\t\t\thash 表名\n * @param element_num\t\thash 表区域个数\n * @param fields\t\t\thash 表区域名称数组char(*)[FIELD_ID_SIZE]\n * @param values\t\t\thash 表区域值数组  char(*)[VALUES_ID_SIZE]\n *\n * @returns   \n *\t\t\t0   成功\t\n *\t\t\t-1  失败\n */\n/* -------------------------------------------*/\nint rop_create_or_replace_hash_table(redisContext* conn,\n\t\t\t\t\t\t\t\t\t char* key, \n\t\t\t\t\t\t\t\t\t unsigned int element_num, \n\t\t\t\t\t\t\t\t\t RFIELDS fields, \n\t\t\t\t\t\t\t\t\t RVALUES values)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\t\t\t\n\n\tchar *cmd = make_hmset_command(key, element_num, fields, values);\t\t\n\tif (cmd == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]create hash table %s error\\n\", key);\n\t\tretn = -1;\n\t\tgoto END_WITHOUT_FREE;\n\t}\n\n\treply = redisCommand(conn, cmd);\n//\trop_test_reply_type(reply);\n\tif (strcmp(reply->str, \"OK\") != 0) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Create hash table %s Error:%s,%s\\n\", key, reply->str, conn->errstr);\n\t\t\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\n\nEND:\n\tfree(cmd);\n\tfreeReplyObject(reply);\n\nEND_WITHOUT_FREE:\n\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  给指定的hash表 指定的field对应的value自增num\n *\n * @param conn\t\t\t已建立好的链接\n * @param key\t\t\thash表名\n * @param field\t\t\thash表下的区域名\t\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tfail\n */\n/* -------------------------------------------*/\nint rop_hincrement_one_field(redisContext *conn, char *key, char *field, unsigned int num)\n{\n\tint retn = 0;\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"HINCRBY %s %s %d\", key, field, num);\n\tif (reply == NULL) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]increment %s %s error %s\\n\", key, field, conn->errstr);\t\n\t\tretn =  -1;\n\t\tgoto END;\n\t}\n\nEND:\n\tfreeReplyObject(reply);\n\n\treturn retn;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  批量执行链表插入命令 插入链表头部\n *\n * @param conn\t\t已建立好的链接\n * @param key\t\t链表名\n * @param values\t封装好的值数组\n * @param val_num\t值个数\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tFAIL\n */\n/* -------------------------------------------*/\nint rop_list_push_append(redisContext *conn, char *key, RVALUES values, int val_num)\n{\n\tint retn = 0;\n\tint i = 0;\n\tredisReply *reply = NULL;\n\n\n\t/* 批量插入命令到缓冲命令管道 */\n\tfor (i = 0; i < val_num; ++i) {\n\t\tretn = redisAppendCommand(conn, \"lpush %s %s\", key, values[i]);\n\t\tif (retn != REDIS_OK) {\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]PLUSH %s %s ERROR! %s\\n\", key, values[i], conn->errstr);\n\t\t\tretn = -1;\n\t\t\tgoto END;\n\t\t}\n\t\tretn = 0;\n\t}\n\n\t/* 提交命令 */\n\tfor (i = 0; i < val_num; ++i) {\n\t\tretn = redisGetReply(conn, (void**)&reply);\n\t\tif (retn != REDIS_OK) {\n\t\t\tretn = -1;\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Commit LPUSH %s %s ERROR! %s\\n\", key, values[i], conn->errstr);\n\t\t\tfreeReplyObject(reply);\n\t\t\tbreak;\n\t\t}\n\t\tfreeReplyObject(reply);\n\t\tretn = 0;\n\t}\n\t\nEND:\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  单条数据插入链表\n *\n * @param conn\t\t已建立好的链接\n * @param key\t\t链表名\n * @param value\t\t数据\n *\n * @returns   \n */\n/* -------------------------------------------*/\nint rop_list_push(redisContext *conn, char *key, char *value)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"LPUSH %s %s\", key, value);\n\t//rop_test_reply_type(reply);\t\n\tif (reply->type != REDIS_REPLY_INTEGER) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]LPUSH %s %s error!%s\\n\", key, value, conn->errstr);\n\t\tretn = -1;\n\t}\n\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief  得到链表中元素的个数\n *\n * @param conn\t链接句柄\n * @param key\t链表名\n *\n * @returns   \n *\t\t\t>=0 个数\n *\t\t\t-1 fail\n */\n/* -------------------------------------------*/\nint rop_get_list_cnt(redisContext *conn, char *key)\n{\n\tint cnt = 0;\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"LLEN %s\", key);\n\tif (reply->type != REDIS_REPLY_INTEGER) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]LLEN %s error %s\\n\", key, conn->errstr);\n\t\tcnt = -1;\n\t\tgoto END;\n\t}\n\n\tcnt = reply->integer;\n\nEND:\n\tfreeReplyObject(reply);\n\treturn cnt;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  按照一定范围截断链表中的数据\n *\n * @param conn\t\t已经建立的链接\n * @param key\t\t链表名\n * @param begin\t\t阶段启示位置 从 0 开始\n * @param end\t\t阶段结束位置 从 -1 开始\n *\n *\t\t\t\t\t这里的范围定义举例 \n *\t\t\t\t\t如果得到全部范围(0, -1)\n *\t\t\t\t\t除了最后一个元素范围(0, -2)\n *\t\t\t\t\t前20各数据范围(0, 19)\n *\n * @returns   \n *\t\t\t0  SUCC\n *\t\t\t-1 FAIL\n */\n/* -------------------------------------------*/\nint rop_trim_list(redisContext *conn, char *key, int begin, int end)\n{\n\tint retn = 0;\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"LTRIM %s %d %d\", key, begin, end);\n\tif (reply->type != REDIS_REPLY_STATUS) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]LTRIM %s %d %d error!%s\\n\", key, begin, end, conn->errstr);\n\t\tretn = -1;\n\t}\n\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n\n/* -------------------------------------------*/\n/**\n * @brief  rop_range_list 得到链表中的数据\n *\n *          返回数据为 区间为\n *              [from_pos, end_pos)\n *\n * @param conn\n * @param key       表名\n * @param from_pos  查找表的起始数据下标\n * @param end_pos   查找表的结尾数据下标\n * @param values    得到表中的value数据\n * @param get_num   得到结果value的个数\n *\n * @returns   \n *      0 succ, -1 fail\n */\n/* -------------------------------------------*/\nint rop_range_list(redisContext *conn, char *key, int from_pos, int end_pos, RVALUES values, int *get_num)\n{\n    int retn = 0;\n    int i = 0;\n    redisReply *reply = NULL;\n    int max_count = 0;\n\n    int count = end_pos - from_pos + 1;\n\n    reply = redisCommand(conn, \"LRANGE %s %d %d\", key, from_pos, end_pos);\n    if (reply->type != REDIS_REPLY_ARRAY || reply->elements == 0) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]LRANGE %s  error!%s\\n\", key, conn->errstr);\n\t\tretn = -1;\n        goto END;\n\t}\n\n\n    max_count = (reply->elements > count) ? count: reply->elements;\n    *get_num = max_count;\n\n\n    for (i = 0; i < max_count; ++i) {\n        strncpy(values[i], reply->element[i]->str, VALUES_ID_SIZE-1);\n    }\n\nEND:\n    if(reply != NULL)\n    {\n        freeReplyObject(reply);\n    }\n\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief\t\t将指定的zset表，对应的成员，值自增1\n *\t\t\t\t（key 或 成员不存在 则创建）\n *\n * @param conn\t\t已建立的链接\n * @param key\t\tzset表名\n * @param member\tzset成员名\n *\n * @returns   \n *\t\t\t0\t\t\tsucc\n *\t\t\t-1\t\t\tfail\n */\n/* -------------------------------------------*/\nint rop_zset_increment(redisContext *conn, char* key, char* member)\n{\n\tint retn = 0;\t\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"ZINCRBY %s 1 %s\", key, member);\n\t//rop_test_reply_type(reply);\n\tif (strcmp(reply->str, \"OK\") != 0) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Add or increment table: %s,member: %s Error:%s,%s\\n\", key, member,reply->str, conn->errstr);\n\t\t\n\t\tretn = -1;\n\t\tgoto END;\n\t}\n\nEND:\n\tfreeReplyObject(reply);\n\treturn retn;\n}\n\n/* -------------------------------------------*/\n/**\n * @brief\t 批量将指定的zset表，对应的成员，值自增1\n *\t\t\t\t（key 或 成员不存在 则创建）\n *\n * @param conn\t\t已建立好的链接\n * @param key\t\t有序集合名称\n * @param values\t封装好的成员数组\n * @param val_num\t数据个数\n *\n * @returns   \n *\t\t\t0\t\tsucc\n *\t\t\t-1\t\tFAIL\n */\n/* -------------------------------------------*/\nint rop_zset_increment_append(redisContext *conn, char *key, RVALUES values, int val_num)\n{\n\tint retn = 0;\n\tint i = 0;\n\tredisReply *reply = NULL;\n\n\t/* 批量命令到缓冲管道 */\n\tfor (i = 0; i < val_num; ++i) {\n\t\tretn = redisAppendCommand(conn, \"ZINCRBY %s 1 %s\", key, values[i]);\n\t\tif (retn != REDIS_OK) {\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]ZINCRBY %s 1 %s ERROR! %s\\n\", key, values[i], conn->errstr);\n\t\t\tretn = -1;\n\t\t\tgoto END;\n\t\t}\n\t\tretn = 0;\n\t}\n\n\t/* 提交命令 */\n\tfor (i = 0; i < val_num; ++i) {\n\t\tretn = redisGetReply(conn, (void**)&reply);\n\t\tif (retn != REDIS_OK) {\n\t\t\tretn = -1;\n\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]Commit ZINCRBY %s 1 %s ERROR!%s\\n\", key, values[i], conn->errstr);\n\t\t\tfreeReplyObject(reply);\n\t\t\tbreak;\n\t\t}\n\t\tfreeReplyObject(reply);\n\t\tretn = 0;\n\t}\n\nEND: \n\treturn retn;\n}\n\nint rop_zset_get_score(redisContext *conn, char *key, char *member)\n{\n\tint score = 0;\n\n\tredisReply *reply = NULL;\n\n\treply = redisCommand(conn, \"ZSCORE %s %s\", key, member);\n    rop_test_reply_type(reply);\n    \n\tif (reply->type != REDIS_REPLY_STRING) {\n\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, \"[-][GMS_REDIS]ZSCORE %s %s error %s\\n\", key, member,conn->errstr);\n        score = -1;\n\t\tgoto END;\n\t}\n\n    score = atoi(reply->str);\n\n\nEND:\n\tfreeReplyObject(reply);\n\n\treturn score;\n}\n```\n\n```c\n#ifndef  _MAKE_LOG_H_\n#define  _MAKE_LOG_H\n#include \"pthread.h\"\n\nint out_put_file(char *path, char *buf);\nint make_path(char *path, char *module_name, char *proc_name);\nint dumpmsg_to_file(char *module_name, char *proc_name, const char *filename,\n                        int line, const char *funcname, char *fmt, ...);\n#ifndef _LOG\n#define LOG(module_name, proc_name, x...) \\\n        do{ \\\n\t\tdumpmsg_to_file(module_name, proc_name, __FILE__, __LINE__, __FUNCTION__, ##x);\\\n\t}while(0)\n#else\n#define LOG(module_name, proc_name, x...)\n#endif\n\nextern pthread_mutex_t ca_log_lock;\n\n#endif\n\n\n\n```\n\n```c\n#include<stdio.h>\n#include<stdarg.h>\n#include<string.h>\n#include<fcntl.h>\n#include<unistd.h>\n#include<time.h>\n#include<sys/stat.h>\n\n#include\"make_log.h\"\n#include<pthread.h>\n\n#if 1\n\n//pthread_mutex_t lock;\n//pthread_mutex_init(lock);\n/*void *comm_log(void *p)\n{\n    pthread_mutex_lock(&lock);\n    pthread_mutex_unlock(&lock);\n}\nstruct file_path{\n    char *module_name;\n    char *proc_name;\n    const char *filename;\n    int line;\n    const char *funcname;\n    char *fmt;\n\n};\nint lock_file(char *module, char *proc, const char *file,\n                        int lines, const char *func, char *mt, ...)\n{\n    va_list ap;\n    struct file_path path;\n    path.module_name = module;\n    path.proc_name = proc;\n    path.filename = file;\n    path.line = lines;\n    path.funcname = func;\n    //path.fmt  = mt;\n    va_start(ap,mt);\n    vsprintf(path.fmt,mt,ap);\n    va_end(ap);\n    pthread_mutex_init(&lock,0); \n    pthread_t comm;\n        pthread_create(&comm,0,dumpmsg_to_file,&path);\n    pthread_join(comm,0);\n    pthread_mutex_destroy(&lock);\n}*/\n\npthread_mutex_t ca_log_lock=PTHREAD_MUTEX_INITIALIZER;\n\n//创建目录并写入内容\nint dumpmsg_to_file(char *module_name, char *proc_name, const char *filename,\n                        int line, const char *funcname, char *fmt, ...)\n{\n        char mesg[4096]={0};\n        char buf[4096]={0};\n\t    char filepath[1024] = {0};\n        time_t t=0;\n        struct tm * now=NULL;                                                                                     \n        va_list ap;                                                                                               \n        //struct file_path *path;\n        //path = (struct file_path*)paths;\n        time(&t);                                                                                                 \n        now = localtime(&t);                                       \n        va_start(ap, fmt);                                                                               \n        vsprintf(mesg, fmt, ap);                                                                       \n        va_end(ap);                        \n#if 1\n        snprintf(buf, 4096, \"[%04d-%02d-%02d %02d:%02d:%02d]--[%s:%d]--%s\\n\",\n                                now -> tm_year + 1900, now -> tm_mon + 1,                                         \n                                now -> tm_mday, now -> tm_hour, now -> tm_min, now -> tm_sec,                     \n\t\t\t\t\t\t\t\tfilename, line, mesg);                                     \n#endif\n\n#if 0\n        snprintf(buf, 4096, \"===%04d%02d%02d-%02d%02d%02d,%s[%d]=== %s\\n\",\n                                now -> tm_year + 1900, now -> tm_mon + 1,                                         \n                                now -> tm_mday, now -> tm_hour, now -> tm_min, now -> tm_sec,\n                                funcname, line, mesg);   \n#endif\t\t\t\t\t\t\t\t\n        make_path(filepath, module_name, proc_name);\n        \n        pthread_mutex_lock(&ca_log_lock);\n\t    out_put_file(filepath, buf);     \n        pthread_mutex_unlock(&ca_log_lock);\n\n        return 0;     \n}\n#endif\n//写入内容\nint out_put_file(char *path, char *buf)\n{\n\tint fd;                                                                                                   \n    fd = open(path, O_RDWR | O_CREAT | O_APPEND, 0777);\n\n    if(write(fd, buf, strlen(buf)) != (int)strlen(buf)) {                                      \n            fprintf(stderr, \"write error!\\n\");                           \n            close(fd);                                                                                        \n    } else {                                                                                                  \n            //write(fd, \"\\n\", 1);\n            close(fd);                                                                                        \n    }               \n\n\treturn 0;\n}\n//创建目录\nint make_path(char *path, char *module_name, char *proc_name)\n{\n\ttime_t t;\n\tstruct tm *now = NULL;\n\tchar top_dir[1024] = {\".\"};\n\tchar second_dir[1024] = {\"./logs\"};\n\tchar third_dir[1024] = {0};\n\tchar y_dir[1024] = {0};\n\tchar m_dir[1024] = {0};\n\tchar d_dir[1024] = {0}; \n\ttime(&t);\n        now = localtime(&t);\n\tsnprintf(path, 1024, \"./logs/%s/%04d/%02d/%s-%02d.log\", module_name, now -> tm_year + 1900, now -> tm_mon + 1, proc_name, now -> tm_mday);\n\t\n\tsprintf(third_dir, \"%s/%s\", second_dir, module_name);\n\tsprintf(y_dir, \"%s/%04d/\", third_dir, now -> tm_year + 1900);\n\tsprintf(m_dir, \"%s/%02d/\", y_dir, now -> tm_mon + 1);\n\tsprintf(d_dir,\"%s/%02d/\", m_dir, now -> tm_mday);\n\t\n\tif(access(top_dir, 0) == -1) {\n\t\tif(mkdir(top_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"create %s failed!\\n\", top_dir);\t\n\t\t} else if(mkdir(second_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"%s:create %s failed!\\n\", top_dir, second_dir);\n\t\t} else if(mkdir(third_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"%s:create %s failed!\\n\", top_dir, third_dir);\n\t\t} else if(mkdir(y_dir, 0777) == -1) {\n                        fprintf(stderr, \"%s:create %s failed!\\n\", top_dir, y_dir);                                                     \n                } else if(mkdir(m_dir, 0777) == -1) {                                                             \n                        fprintf(stderr, \"%s:create %s failed!\\n\", top_dir, m_dir);                                                     \n                }          \t\n\t} else if(access(second_dir, 0) == -1) {\n\t\tif(mkdir(second_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"create %s failed!\\n\", second_dir);\n\t\t} else if(mkdir(third_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"%s:create %s failed!\\n\", second_dir, third_dir);\n                } else if(mkdir(y_dir, 0777) == -1) {\n                        fprintf(stderr, \"%s:create %s failed!\\n\", second_dir, y_dir);\n                } else if(mkdir(m_dir, 0777) == -1) {\n                        fprintf(stderr, \"%s:create %s failed!\\n\", second_dir, m_dir);\n                }\n\t} else if(access(third_dir, 0) == -1) {\n\t\tif(mkdir(third_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"create %s failed!\\n\", third_dir);\n\t\t} else if(mkdir(y_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"%s:create %s failed!\\n\", third_dir, y_dir);\n\t\t} else if(mkdir(m_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"%s:create %s failed!\\n\", third_dir, m_dir);\n\t\t} \n\t} else if (access(y_dir, 0) == -1) {\n\t\tif(mkdir(y_dir, 0777) == -1) {\n\t\t\tfprintf(stderr, \"create %s failed!\\n\", y_dir);\n\t\t} else if(mkdir(m_dir, 0777) == -1) {\n                        fprintf(stderr, \"%s:create %s failed!\\n\", y_dir, m_dir);\n                } \n\n\t} else if (access(m_dir, 0) == -1) {\n                if(mkdir(m_dir, 0777)) {\n\t\t\tfprintf(stderr, \"create %s failed!\\n\", m_dir);\n\t\t} \n        }\n\t//printf(\"path:%s\\n\", path);\n\treturn 0;\n}\n\n#if 0\nint main(void)\n{\n\tchar path[1024] = {0};\n\tchar proc_name[] = {\"sys_guard\"};\n\tchar buf[] = {\"12345\\n\"};\n\tmake_path(path, proc_name);\n\tout_put_file(path, buf);\n\treturn 0;\n} \n#endif\n\n```\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#include \"redis_op.h\"\n\nint main(int argc, char *argv[])\n{\n    int ret = 0;\n    //连接数据库\n    redisContext *conn = NULL;\n\n    conn = rop_connectdb_nopwd(\"127.0.0.1\", \"6379\");\n\n    //set foo  hello\n    ret = rop_set_string(conn, \"foo\", \"hello\");\n    if (ret == 0) \n\t{\n        printf(\"set succ!\\n\");\n    }\n    else \n\t{\n        printf(\"set fail\\n\");\n    }\n\t\n\tchar value[256] = {0};\n\tret = rop_get_string(conn, \"foo\", value);\n    if (ret == 0) \n\t{\n        printf(\"get succ: %s - %s\\n\", \"foo\", value);\n    }\n    else \n\t{\n        printf(\"get fail\\n\");\n    }\n\n\n    //释放数据库\n    rop_disconnect(conn);\n\n\n\treturn 0;\n}\n\n```\n\n","slug":"redis的简单使用","published":1,"updated":"2021-08-07T16:13:07.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xfa001ck057d22396g6","content":"<h3 id=\"关系型数据库\"><a href=\"#关系型数据库\" class=\"headerlink\" title=\"关系型数据库\"></a>关系型数据库</h3><ul>\n<li>NoSQL 数据库的四大分类<ul>\n<li>KV键值，典型就是 redis</li>\n<li>文档型数据库MongoDB </li>\n<li>列存储数据库 HBase</li>\n<li>图关系数据库 Neo4J</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"redis-是什么？\"><a href=\"#redis-是什么？\" class=\"headerlink\" title=\"redis 是什么？\"></a>redis 是什么？</h3><ul>\n<li>开源的key-value 的存储系统，将大部分数据存储在内存中。</li>\n<li>redis基于内存操作，读写数据很快，作为内存型缓存服务器，搭配mysql可以做到数据持久化</li>\n<li>redis基于C语言开发，不需要过多依赖；客户端提供各种语言版本。      </li>\n</ul>\n<h3 id=\"redis优点\"><a href=\"#redis优点\" class=\"headerlink\" title=\"redis优点\"></a>redis优点</h3><ul>\n<li>完全在内存中保存数据库，使用磁盘为了持久化;速度异常快速</li>\n<li>有丰富的数据类型，string，list，set，sorted set,hash</li>\n<li>操作都是原子的，操作不会在执行完毕前被打断。从而确保当两个客户同时访问 redis 服务器得到的是更新后的值</li>\n</ul>\n<h3 id=\"相关资源\"><a href=\"#相关资源\" class=\"headerlink\" title=\"相关资源\"></a>相关资源</h3><a class=\"btn-beautify button--animated \" href=\"http://redis.cn\" \n  title=\"中文网站\"><i class=\"far fa-hand-point-right\"></i><span>中文网站</span></a>\n\n<h3 id=\"redis-安装\"><a href=\"#redis-安装\" class=\"headerlink\" title=\"redis 安装\"></a>redis 安装</h3><h4 id=\"下载对应软件包\"><a href=\"#下载对应软件包\" class=\"headerlink\" title=\"下载对应软件包\"></a>下载对应软件包</h4><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsi2rwxb4ej30di07ot8v.jpg\" alt=\"redis 安装包\" style=\"zoom:50%;\" />\n\n<h4 id=\"解压后，开始编译\"><a href=\"#解压后，开始编译\" class=\"headerlink\" title=\"解压后，开始编译\"></a>解压后，开始编译</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置文件redis-cnf-在安装包里面\"><a href=\"#配置文件redis-cnf-在安装包里面\" class=\"headerlink\" title=\"配置文件redis.cnf 在安装包里面\"></a>配置文件redis.cnf 在安装包里面</h4><blockquote>\n<p>配置文件分成几大块：</p>\n<ol>\n<li><p>通用(general)</p>\n</li>\n<li><p>快照(snapshotting)</p>\n</li>\n<li><p>复制(replication)</p>\n</li>\n<li><p>安全(security)</p>\n</li>\n<li><p>限制(limits)</p>\n</li>\n<li><p>追加模式(append only mode)</p>\n</li>\n<li><p>LUA脚本(lua scripting)</p>\n</li>\n<li><p>慢日志(slow log)</p>\n</li>\n<li><p>事件通知(event notification).       </p>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize no</span><br><span class=\"line\">守护进程</span><br><span class=\"line\">默认情况下，redis不是在后台运行的。如果需要在后台运行，把该项的值更改为yes。</span><br><span class=\"line\"></span><br><span class=\"line\">pidfile /var/run/redis.pid</span><br><span class=\"line\">当redis在后台运行的时候，redis默认会把pid文件放在/var/run/redis.pid，你可以配置到其他位置。当运行多个redis服务时，需要指定不同的pid文件和端口。</span><br><span class=\"line\"></span><br><span class=\"line\">port 6379</span><br><span class=\"line\">指定redis运行的端口，默认是6379。</span><br><span class=\"line\"></span><br><span class=\"line\">bind 127.0.0.1</span><br><span class=\"line\">指定redis只接收来自于该IP地址的请求看，如果不进行设置，那么将处理所有请求。在生产环境中最好设置该项。</span><br><span class=\"line\">远程连接的话，需要把这行注释掉</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttimeout 多长时间的等待，就会断连接,0表示永远连着</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tkeepalive 心跳检测</span><br><span class=\"line\"></span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\">远程访问需要设置为 no</span><br><span class=\"line\"></span><br><span class=\"line\">loglevel debug</span><br><span class=\"line\">指定日志记录级别，其中redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose。</span><br><span class=\"line\">1．debug表示记录很多信息,用于开发和测试</span><br><span class=\"line\">2．verbose表示记录有用的信息, 但不像debug会记录那么多</span><br><span class=\"line\">3．notice表示普通的verbose，常用于生产环境</span><br><span class=\"line\">4．warning 表示只有非常重要或者严重的信息会记录到日志</span><br><span class=\"line\"></span><br><span class=\"line\">logfile /var/log/redis/redis.log</span><br><span class=\"line\">配置log文件地址,默认值为stdout。若后台模式会输出到/dev/null。</span><br><span class=\"line\"></span><br><span class=\"line\">databases 16</span><br><span class=\"line\">可用数据库数，默认值为16，默认数据库为0，数据库范围在0~15之间切换，彼此隔离。</span><br><span class=\"line\"></span><br><span class=\"line\">save</span><br><span class=\"line\">保存数据到磁盘，格式为save，指出在多长时间内，有多少次更新操作，就将数据同步到数据文件rdb。相当于条件触发抓取快照，这个可以多个条件配合。 </span><br><span class=\"line\"></span><br><span class=\"line\"> save 900 1 -- 900秒之内有1个keys发生变化时</span><br><span class=\"line\"> save 300 10 -- 300秒之内有10个keys发生变化时</span><br><span class=\"line\"> save 60 10000 -- 60秒之内有10000个keys发生变化时</span><br><span class=\"line\"></span><br><span class=\"line\">rdbcompression yes</span><br><span class=\"line\">存储至本地数据库时(持久化到rdb文件)是否压缩数据，默认为yes。</span><br><span class=\"line\"></span><br><span class=\"line\">dbfilename dump.rdb</span><br><span class=\"line\">本地持久化数据库文件名，默认值为dump.rdb。</span><br><span class=\"line\"></span><br><span class=\"line\">dir ./</span><br><span class=\"line\">工作目录，数据库镜像备份的文件放置的路径。这里的路径跟文件名要分开配置是因为redis在进行备份时，先会将当前数据库的状态写入到一个临时文件中，等备份完成时，再把该临时文件替换为上面所指定的文件。 而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中，AOF文件也会存放在这个目录下面。 注意这里必须指定一个目录而不是文件。</span><br><span class=\"line\"></span><br><span class=\"line\">slaveof</span><br><span class=\"line\">主从复制，设置该数据库为其他数据库的从数据库。设置当本机为slave服务时，设置master服务的IP地址及端口。 在redis启动时,它会自动从master进行数据同步。</span><br><span class=\"line\"></span><br><span class=\"line\">masterauth</span><br><span class=\"line\">当master服务设置了密码保护时(用requirepass制定的密码)slave服务连接master的密码。</span><br><span class=\"line\"></span><br><span class=\"line\">slave-serve-stale-data yes</span><br><span class=\"line\">当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：</span><br><span class=\"line\">如果slave-serve-stale-data设置为 yes(默认设置)，从库会继续相应客户端的请求。</span><br><span class=\"line\">如果slave-serve-stale-data是指为no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误&quot;SYNC with master in progress&quot;。</span><br><span class=\"line\"></span><br><span class=\"line\">repl-ping-slave-period 10</span><br><span class=\"line\">从库会按照一个时间间隔向主库发送PING，可以通过repl-ping-slave-period设置这个时间间隔,默认是10秒。</span><br><span class=\"line\"></span><br><span class=\"line\">repl-timeout 60</span><br><span class=\"line\">设置主库批量数据传输时间或者ping回复时间间隔，默认值是60秒，一定要确保repl-timeout大于repl-ping-slave-period。</span><br><span class=\"line\"></span><br><span class=\"line\">requirepass foobared</span><br><span class=\"line\">设置客户端连接后进行任何其他指定前需要使用的密码。因为redis速度相当快，所以在一台比较好的服务器平台下, 一个外部的用户可以在一秒钟进行150K次的密码尝试，这意味着你需要指定非常强大的密码来防止暴力破解。</span><br><span class=\"line\"></span><br><span class=\"line\">rename command CONFIG &quot;&quot;</span><br><span class=\"line\">命令重命名，在一个共享环境下可以重命名相对危险的命令，比如把CONFIG重名为一个不容易猜测的字符：</span><br><span class=\"line\">rename-command CONFIG  b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class=\"line\"></span><br><span class=\"line\">如果想删除一个命令，直接把它重命名为一个空字符&quot;&quot;即可：rename-command CONFIG &quot;&quot;。</span><br><span class=\"line\"></span><br><span class=\"line\">maxclients 128</span><br><span class=\"line\">设置同一时间最大客户端连接数，默认无限制。redis可以同时打开的客户端连接数为redis进程可以打开的最大文件描述符数。 </span><br><span class=\"line\"></span><br><span class=\"line\">如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，redis会关闭新的连接并向客户端返回max number of clients reached错误信息。</span><br><span class=\"line\"></span><br><span class=\"line\">maxmemory </span><br><span class=\"line\">指定redis最大内存限制。redis在启动时会把数据加载到内存中，达到最大内存后，redis会先尝试清除已到期或即将到期的key，redis同时也会移除空的list对象。当此方法处理后,仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。</span><br><span class=\"line\"></span><br><span class=\"line\">注意：redis新的vm机制，会把key存放内存，value会存放在swap区。</span><br><span class=\"line\"></span><br><span class=\"line\">maxmemory-policy volatile-lru</span><br><span class=\"line\">当内存达到最大值的时候redis会选择删除哪些数据呢？有五种方式可供选择：</span><br><span class=\"line\">1．volatile-lru代表利用LRU算法移除设置过期时间的key(LRU：最近使用LeastRecentlyUsed)</span><br><span class=\"line\">2．allkeys-lru代表利用LRU算法移除任何key</span><br><span class=\"line\">3．volatile-random代表移除设置过过期时间的随机key</span><br><span class=\"line\">4．allkeys_random代表移除一个随机的key</span><br><span class=\"line\">5． volatile-ttl代表移除即将过期的key(minor TTL)</span><br><span class=\"line\">6． noeviction代表不移除任何key，只是返回一个写错误</span><br><span class=\"line\"></span><br><span class=\"line\">注意：对于上面的策略，如果没有合适的key可以移除，写的时候redis会返回一个错误。</span><br><span class=\"line\"></span><br><span class=\"line\">appendonly no</span><br><span class=\"line\">默认情况下，redis会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁。 如果发生诸如拉闸限电、拔插头等状况，那么将造成比较大范围的数据丢失，所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式。</span><br><span class=\"line\"></span><br><span class=\"line\">开启append only模式之后，redis会把所接收到的每一次写操作请求都追加到appendonly. aof文件中。当redis重新启动时，会从该文件恢复出之前的状态，但是这样会造成appendonly. aof文件过大，所以redis还支持BGREWRITEAOF指令对appendonly.aof。</span><br><span class=\"line\"></span><br><span class=\"line\">appendfilename appendonly.aof</span><br><span class=\"line\">AOF文件名称，默认为&quot;appendonly.aof&quot;。</span><br><span class=\"line\"></span><br><span class=\"line\">appendfsync everysec</span><br><span class=\"line\">redis支持三种同步AOF文件的策略：</span><br><span class=\"line\">1．no代表不进行同步,系统去操作</span><br><span class=\"line\">2．always代表每次有写操作都进行同步</span><br><span class=\"line\">3．everysec代表对写操作进行累积，每秒同步一次，默认是&quot;everysec&quot;，按照速度和安全折中这是最好的</span><br><span class=\"line\"></span><br><span class=\"line\">slowlog-log-slower-than 10000</span><br><span class=\"line\">记录超过特定执行时间的命令。执行时间不包括I/O计算，比如连接客户端，返回结果等。只是命令执行时间，可以通过两个参数设置slow log：一个是告诉Redis执行超过多少时间被记录的参数slowlog-log-slower-than(微妙)，另一个是slow log 的长度。</span><br><span class=\"line\"></span><br><span class=\"line\">当一个新命令被记录的时候最早的命令将被从队列中移除，下面的时间以微妙微单位，因此1000000代表一分钟。注意制定一个负数将关闭慢日志，而设置为0将强制每个命令都会记录。</span><br><span class=\"line\"></span><br><span class=\"line\">hash-max-zipmap-entries 512 &amp;&amp; hash-maxz-ipmap-value 64</span><br><span class=\"line\">当hash中包含超过指定元素个数并且最大的元素没有超过临界时，hash将以一种特殊的编码方式(大大减少内存使用)来存储，这里可以设置这两个临界值。Redis Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现。这个Hash的成员比较少时redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap。当成员数量增大时会自动转成真正的HashMap，此时encoding为ht。</span><br><span class=\"line\"></span><br><span class=\"line\">hash-max-zipmap-entries 512 512</span><br><span class=\"line\">list数据类型多少节点以下会采用去指针的紧凑存储格式。</span><br><span class=\"line\"></span><br><span class=\"line\">list-max-ziplist-value 64</span><br><span class=\"line\">数据类型节点值大小小于多少字节会采用紧凑存储格式。</span><br><span class=\"line\"></span><br><span class=\"line\">setmaxintsetentries 512</span><br><span class=\"line\">set数据类型内部数据如果全部是数值型,且包含多少节点以下会采用紧凑格式存储。</span><br><span class=\"line\"></span><br><span class=\"line\">zsetmaxziplistentries 128</span><br><span class=\"line\">zsort数据类型多少节点以下会采用去指针的紧凑存储格式。</span><br><span class=\"line\"></span><br><span class=\"line\">zsetmaxziplistvalue 64</span><br><span class=\"line\">zsort数据类型节点值大小小于多少字节会采用紧凑存储格式。</span><br><span class=\"line\"></span><br><span class=\"line\">activerehashing yes</span><br><span class=\"line\">redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。 </span><br><span class=\"line\"></span><br><span class=\"line\">当你的使用场景中，有非常严格的实时性需要，不能够接受redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">#设置密码</span></span><br><span class=\"line\">\t\t\tconfig set requirepass 密码</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">#用密码登录</span></span><br><span class=\"line\">\t\t\tauth 密码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis-可视化工具\"><a href=\"#redis-可视化工具\" class=\"headerlink\" title=\"redis 可视化工具\"></a>redis 可视化工具</h3><p>Mac版 <code>https://www.macwk.com/soft/redis-desktop-manager</code> </p>\n<h3 id=\"redis-启动服务\"><a href=\"#redis-启动服务\" class=\"headerlink\" title=\"redis 启动服务\"></a>redis 启动服务</h3><h4 id=\"启动server\"><a href=\"#启动server\" class=\"headerlink\" title=\"启动server\"></a>启动server</h4><p><code>redis-server</code></p>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshkkun5znj31cw0u0gw6.jpg\" alt=\"image-20210715132834049\" style=\"zoom:67%;\" />\n\n<h4 id=\"也可以指定配置文件启动\"><a href=\"#也可以指定配置文件启动\" class=\"headerlink\" title=\"也可以指定配置文件启动\"></a>也可以指定配置文件启动</h4><p><code>redis-server ./redis.conf</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshkqhqqt0j31mm06awhp.jpg\" alt=\"image-20210715133359786\"></p>\n<h4 id=\"打开就客户端连接服务器\"><a href=\"#打开就客户端连接服务器\" class=\"headerlink\" title=\"打开就客户端连接服务器\"></a>打开就客户端连接服务器</h4><p><code>redis-cli</code></p>\n<h4 id=\"也可以远程连接，前提是配置过redis-conf-并以这个配置文件启动\"><a href=\"#也可以远程连接，前提是配置过redis-conf-并以这个配置文件启动\" class=\"headerlink\" title=\"也可以远程连接，前提是配置过redis.conf,并以这个配置文件启动\"></a>也可以远程连接，前提是配置过redis.conf,并以这个配置文件启动</h4><p><code>redis-cli -h 192.168.33.33 -p 8899</code></p>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshmmlan8uj319g08qt9u.jpg\" alt=\"远程连接redis server ，关闭保护模式\" style=\"zoom:67%;\" />\n\n<h3 id=\"redis-数据类型\"><a href=\"#redis-数据类型\" class=\"headerlink\" title=\"redis 数据类型\"></a>redis 数据类型</h3><table>\n<thead>\n<tr>\n<th>redis数据类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>list</td>\n<td>列表</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>字典</td>\n</tr>\n<tr>\n<td>set</td>\n<td>集合</td>\n</tr>\n<tr>\n<td>sorted set</td>\n<td>有序集合</td>\n</tr>\n<tr>\n<td>pub/sub</td>\n<td>订阅</td>\n</tr>\n<tr>\n<td>transactions</td>\n<td>事务</td>\n</tr>\n</tbody></table>\n<a class=\"btn-beautify button--animated \" href=\"http://redis.cn/commands.html\" \n  title=\"数据类型相关操作指令参考文档\"><i class=\"far fa-hand-point-right\"></i><span>数据类型相关操作指令参考文档</span></a>\n\n<a class=\"btn-beautify button--animated \" href=\"http://doc.redisfans.com\" \n  title=\"命令速查\"><i class=\"far fa-hand-point-right\"></i><span>命令速查</span></a>\n\n<h4 id=\"key的操作\"><a href=\"#key的操作\" class=\"headerlink\" title=\"key的操作\"></a>key的操作</h4><blockquote>\n<p>DBSIZE     key的个数</p>\n<p>FIUSHDB   删当前库</p>\n<p>FLUSHALL  删所有库</p>\n<p>keys pattern  查找所有符合给定模式pattern （正则表达式）的key</p>\n<p>keys *  所有的key</p>\n<p>exists key 存在返回 1 ，不存在返回 0</p>\n<p>del key 删除对应的key值</p>\n<p>type key 返回key对应value值的数据类型</p>\n<p>expire key seconds     seconds 秒后key自动删除</p>\n<p>TTL key 查看key剩余的时间,-1 表示永不过期</p>\n<p>persist key 清除生存时间</p>\n<p>pexpire key milliseconds 设置生存时间为x x x毫秒</p>\n<p>rename key newkey key的重命名</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshnaa0m88j30vs0k0n0o.jpg\" alt=\"image-20210715150212683\" style=\"zoom:50%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsi2qw1uc4j30s60i075x.jpg\" alt=\"image-20210715235709133\" style=\"zoom:50%;\" />\n\n<h4 id=\"string-字符串\"><a href=\"#string-字符串\" class=\"headerlink\" title=\"string 字符串\"></a>string 字符串</h4><ul>\n<li>string是简单的key-value 的类型，value不仅是string，也可以是数字。</li>\n<li>string是二进制安全的，可以包含任意的数据类型，string 可以看作是byte 数组，上限为1G字节。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redis_string</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> len;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>len 数组buf的长度</li>\n<li>free 数组中可用的字节数</li>\n<li>buf char类型数组，用于存储实际的字符串内容</li>\n</ul>\n<blockquote>\n<p>set key value 设置key对应的值为string类型的value</p>\n<p>get key 获取key对应的value值，key不存在返回nil</p>\n<p>append key value</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshn46bfldj30pu0as75s.jpg\" alt=\"image-20210715145620961\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>setnx key value   key存在什么也不做，key不存在，相当于set</p>\n<p>msetnx key1 value1 key2 value2 有一个存在就不成功</p>\n<p>setex key seconds value 设置key对应字符串value，并且设置key在给定的seconds时间之后超时过期</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshngy25itj30us0j8q6e.jpg\" alt=\"image-20210715150837301\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>setrange key offset value  覆盖key对应的string的一部分，从指定的offset处开始，覆盖value的长度。如果offset比当前key对应string还要长，那这个string后面就补0以达到offset。</p>\n<p>incr key 1</p>\n<p>incrby  key 3  一次性加3</p>\n<p>dear key 1   </p>\n<p>nearby key 3</p>\n<p>setrange  key 0  10 从头开始，前两个字符设置为10</p>\n<p>getrange key start end 获取头到尾的字符</p>\n</blockquote>\n<img src=\"/Users/sunguosheng/Library/Application%20Support/typora-user-images/image-20210715153432030.png\" alt=\"image-20210715153432030\" style=\"zoom: 50%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsho8vjd4pj30ym0dmwh1.jpg\" alt=\"image-20210715153527907\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>批量的存取         </p>\n<p>mset key1 value1 key2 value2</p>\n<p>mget key1 key2 key3           </p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshodd5w2sj317m08yq4j.jpg\" alt=\"image-20210715153946272\" style=\"zoom:50%;\" />\n\n<h3 id=\"list-列表\"><a href=\"#list-列表\" class=\"headerlink\" title=\"list 列表\"></a>list 列表</h3><ul>\n<li>本质双端链表</li>\n<li>我们可以轻松地实现最新消息排行等功能(比如新浪微博的TimeLine )。List 的另一个应用就是消息队列，可以利用List的 PUSH操作，将任务存在List中，然后工作线程再用POP操作将任务取出进行执行。</li>\n</ul>\n<blockquote>\n<p>lpush key value1 value2 value3 (每次从左面插入新的value)</p>\n<p>lpushx key value1 value2 要求当且仅当key存在并且是一个列表</p>\n<p>lpop key 从左边移除第一个元素</p>\n<p>lrange key start stop 返回存储在key ,范围为start 到 stop 的所有元素，起始为0，最后为-1</p>\n<p>ltrim key start stop 让这个key对应的list只保留start到stop范围的元素  ，先截取再赋值</p>\n<p>lien key. 查看key 对应的value长度 </p>\n</blockquote>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshu2amclfj31jm0p6ju0.jpg\" alt=\"image-20210715185643622\"></p>\n<blockquote>\n<p>list 可以从右端进行插入</p>\n<p>rpush key value1 value2</p>\n<p>rpop key</p>\n<p>可以利用list来模拟栈和队列</p>\n<p>队列，尾入，头出</p>\n<p>rpush        lpop</p>\n<p>栈</p>\n<p>lpush  lpop 或者 rpush rpop             </p>\n</blockquote>\n<h3 id=\"set-无序集合\"><a href=\"#set-无序集合\" class=\"headerlink\" title=\"set 无序集合\"></a>set 无序集合</h3><ul>\n<li>集合指一堆不重复值的组合</li>\n<li>redis为集合提供了求交集和并集，差集的操作</li>\n<li>比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。因为 Redis 非常人性化的为集合提供了求交集、并集、差集等操作，那么就可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</li>\n</ul>\n<blockquote>\n<p>sadd key member1 member2 member3 添加一个或者多个member到集合key中</p>\n<p>smembers key 返回key集合所有的元素</p>\n<p>srem key member 删除key集合中指定的元素        </p>\n<p>SRANDMEMBER key num key中随机num个</p>\n<p>spop key 随机出</p>\n<p>smove source dest num</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshvsft7vlj312y0hugn0.jpg\" alt=\"image-20210715195627033\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>sinter key1 key2 key3   求集合的交集</p>\n<p>sunionstore dest key1 key2 返回给定的多个集合的并集中的所有成员，将结果存储destination集合</p>\n<p>sunion key1 key2 求并集</p>\n<p>sdiff key1 key2 求差集（A-B 和 B-A 是不一样的）    </p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw0ncqp9j317m0u0q4z.jpg\" alt=\"image-20210715200420420\" style=\"zoom:67%;\" />\n\n<h3 id=\"sorted-set-有序集合\"><a href=\"#sorted-set-有序集合\" class=\"headerlink\" title=\"sorted set 有序集合\"></a>sorted set 有序集合</h3><ul>\n<li>在set的基础上加了一个权重参数 score，排序的依据就是这个score</li>\n<li>比如一个存储全班同学成绩的 Sorted Sets，其集合 value 可以是同学的学号，而 score 就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。另外还可以用 Sorted Sets 来做带权重的队列，比如普通消息的 score 为1，重要消息的score 为2，然后工作线程可以选择按 score 的倒序来获取工作任务，让重要的任务优先执行。</li>\n</ul>\n<blockquote>\n<p>zadd key score1 member1 score2 member2 score3 member3</p>\n<p>zrange key start stop withscores 从小到大</p>\n<p>zrevrange key start stop withscores  从大到小       </p>\n<p>zrangebyscore key start_score end_score 筛选出start_score 到end_score 的value</p>\n<p>ZRANGEBYSCORE zset01 (20 (60     大于20小于60</p>\n<p>ZRANGEBYSCORE zset01 (20 (60 limit 2 1  大于20小于60的结果集从第三个开始取一个</p>\n<p>ZREM zset01 v1 删除zset01中的v1</p>\n<p>ZCOUNT zset01 60 80 取分数再60-80的值的个数</p>\n<p>ZRANK zset01 v4 取V4在zset01中的下标</p>\n<p>ZREVRANK zset01 v4  取V4在zset01中的逆序下标</p>\n<p>ZSCORE zset01 v4 取v4 对应的分数</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw8ayij0j31au0e2q49.jpg\" alt=\"image-20210715201142224\" style=\"zoom:80%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw8wfnrfj310209odgd.jpg\" alt=\"image-20210715201216665\" style=\"zoom: 50%;\" />\n\n<h3 id=\"hash-字典\"><a href=\"#hash-字典\" class=\"headerlink\" title=\"hash 字典\"></a>hash 字典</h3><ul>\n<li>键值key 对应的是 field字段名称  value 字段值的结合(也就是还是一个键值对)</li>\n</ul>\n<blockquote>\n<p>hset key field value 设置key指定的哈希集中的字段和字段值</p>\n<p>hmset key field1 value1 field2 value2</p>\n<p>hget key field key键值里面field 字段对应的字段值</p>\n<p>hmget key field1 field2</p>\n<p>hgetall key  获取所有的字段和字段值 ，注意和HVALS key —&gt;只获取所有的字段值，不获取对应的字段</p>\n<p>hkeys key 返回 key 指定的哈希集中所有字段的名字</p>\n<p>hdel key field 删除key指定的哈希集中字段为field的字段</p>\n<p>hlen key 返回key指定的哈希集中字段的数量          </p>\n<p>hexists key field  判断对应的字段值是否存在</p>\n<p>HVALS key 取所有的字段值</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshwrfu84wj31el0u042h.jpg\" alt=\"image-20210715203005524\" style=\"zoom:80%;\" />   \n\n<h3 id=\"pub-sub-发布-订阅\"><a href=\"#pub-sub-发布-订阅\" class=\"headerlink\" title=\"pub/sub 发布/订阅\"></a>pub/sub 发布/订阅</h3><ul>\n<li>Pub/Sub 从字面上理解就是发布(Publish)与订阅(Subscribe)。发件人(在 Redis 中的术语称为发布者)发送邮件，而接收器(订户)接收它们。信息传输的链路称为通道。Redis 一个客户端可以订阅任意数量的通道。</li>\n<li>在 Redis 中，你可以设定对某一个key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天、群聊等功能。</li>\n</ul>\n<blockquote>\n<p>subscribe channel 订阅给指定频道的信息。一旦客户端进入订阅状态，客户端就只可接受订阅相关的命令。</p>\n<p>publish channel message 将信息 message 发送到指定的频道 channel。     </p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshx0letjij313808k3zb.jpg\" alt=\"image-20210715203853735\" style=\"zoom:67%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshx0zg4q5j30zk0gsabd.jpg\" alt=\"image-20210715203915977\" style=\"zoom:67%;\" />\n\n<h3 id=\"transactions-事务\"><a href=\"#transactions-事务\" class=\"headerlink\" title=\"transactions 事务\"></a>transactions 事务</h3><ul>\n<li>事务允许一组命令在单一步骤中执行，也就是一组命令的集合，也就是一次性批处理</li>\n<li>redis 事务具有原子性，所有命令要么都执行，要么都不执行</li>\n<li>事务中的所有命令作为单个独立的操作  顺序执行</li>\n<li>一个队列中，一次性的，顺序性的，拍他性的执行一组命令</li>\n<li>redis的事务性是部分的，在一些情况下是不保证完整性的，下面的后两种状态就显示出来了这个特点</li>\n</ul>\n<blockquote>\n<p>multi 标记事务的开始</p>\n<p>exec 执行事务中排队等待的指令并将链接状态恢复正常</p>\n<p>discard 放弃本次的批处理操作</p>\n<p>watch 监视一个或者多个key(这个类似于乐观锁，当中间有人修改之后，就会报错；需要重新 unwatch ，拿下数据，再去操作)</p>\n<p>unwatch 取消对所有key的监控         </p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshxa004egj315t0u0jtv.jpg\" alt=\"image-20210715204755336\" style=\"zoom:80%;\" />\n\n<h4 id=\"事务的几种状态\"><a href=\"#事务的几种状态\" class=\"headerlink\" title=\"事务的几种状态\"></a>事务的几种状态</h4><ul>\n<li>全部执行成功，每一条命令都入队，然后执行.       </li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt79wxeiomj30he0ie0tu.jpg\" alt=\"image-20210806190413020\" style=\"zoom:33%;\" />\n\n<ul>\n<li>放弃事务           </li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt79yhuny7j30is0d0dgq.jpg\" alt=\"image-20210806190546419\" style=\"zoom:33%;\" />\n\n\n\n<ul>\n<li>有一个错误，全部就丢失，这个类似于 编译时的报错</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt7a0oihjsj319o0agt9u.jpg\" alt=\"image-20210806190752712\" style=\"zoom:33%;\" />\n\n<ul>\n<li>那个错误就找错误的那个，其余的能执行成功（这个类似于运行时的错误）</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt7aq93i4mj30z00i00u8.jpg\" alt=\"image-20210806193226867\" style=\"zoom:33%;\" />\n\n<h4 id=\"redis的主从复制\"><a href=\"#redis的主从复制\" class=\"headerlink\" title=\"redis的主从复制\"></a>redis的主从复制</h4><ul>\n<li>主机数据更新后，根据配置和策略自动同步到备机的master/slaver机制，Master主要为写，Slave以读为准</li>\n<li>主要干的事情就是 读写复制和容载备份</li>\n<li>怎么用<ul>\n<li>配从库不配主库 <code>slaveof 主库IP 主库PORT</code>，每次和<code>mastre</code>需要重新连接</li>\n<li>修改配置文件中的端口，log目录，rdb 文件名，对应端口，用来做区分</li>\n<li><code>slaveof ip port</code>后，从机会复制主机所有的内容；只有主机可以写的，从机只能读；当主机宕机后，从机不会变成主机，主机重新启动之后，会继续当主机的身份</li>\n<li><code>info repcalition</code> 查看机器<code>replication</code>信息，需要关注<code>role</code>字段值</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"一主二仆\"><a href=\"#一主二仆\" class=\"headerlink\" title=\"一主二仆\"></a>一主二仆</h4><ul>\n<li>init.        </li>\n</ul>\n <img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gntzmm3j311w0fa0xe.jpg\" alt=\"image-20210807194315072\" style=\"zoom:50%;\" />\n\n<ul>\n<li>一个Master ，两个Slaves</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8goh2xbjj61280i6aff02.jpg\" alt=\"image-20210807194354594\" style=\"zoom:50%;\" />\n\n<ul>\n<li>主机日志需要关注的点</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gpj0np5j31140d676p.jpg\" alt=\"image-20210807194454785\" style=\"zoom:50%;\" />\n\n<ul>\n<li>备机日志需要关注的点</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gq08fggj311i0bk40i.jpg\" alt=\"image-20210807194522564\" style=\"zoom:50%;\" />\n\n<ul>\n<li>几个需要关注的问题<ul>\n<li>切入点问题？slave1，slave2 是从头开始备份，还是从切入点开始复制？<ul>\n<li>–》从头开始复制</li>\n</ul>\n</li>\n<li>从机是否可写？<ul>\n<li>–》主机可写，从机不可写</li>\n</ul>\n</li>\n<li>主机shutdown后，从机是变成主机还是原地等待主机？<ul>\n<li>从机原地等待</li>\n</ul>\n</li>\n<li>主机又回来后，主机新增的记录，从机是否可以顺利的复制？<ul>\n<li>从机可以自动与主机相连，也就可以自动同步主机新增的数据 。</li>\n</ul>\n</li>\n<li>如果slave与Master断开之后，后面还能跟上master的脚步吗？<ul>\n<li>slave与master断开之后，不会自动重新连接，需要配置进 <code>redis.conf ####REPLICATION####</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"薪火相传\"><a href=\"#薪火相传\" class=\"headerlink\" title=\"薪火相传\"></a>薪火相传</h4><ul>\n<li>去中心化的模式（减轻了master的负担），一个传递一个</li>\n<li>上一个的slave可以是下一个的master；中途方向变更后，会重新复制最新的数据</li>\n<li><code>slaveof ip port</code>            </li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8nk2kqy2j31gm0kyjvy.jpg\" alt=\"image-20210807234151934\" style=\"zoom:67%;\" />\n\n\n\n<h4 id=\"反客为主\"><a href=\"#反客为主\" class=\"headerlink\" title=\"反客为主\"></a>反客为主</h4><ul>\n<li><code>SLAVEOF no one</code>使当前数据库停止与其他数据库的同步，转成主数据库</li>\n</ul>\n<h4 id=\"复制的原理\"><a href=\"#复制的原理\" class=\"headerlink\" title=\"复制的原理\"></a>复制的原理</h4><ul>\n<li>slave连接到master后，会发出一个<code>sync</code>的命令</li>\n<li>master接收到命令会启动一个存盘进程，后台收集所有用于修改的命令，收集完毕后，会把整个数据传送给slave</li>\n<li>全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中</li>\n<li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</li>\n<li>只要是重新连接master，一次完全同步（全量复制)将被自动执行</li>\n</ul>\n<h4 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h4><ul>\n<li>一组sentinel能同时监控多个master</li>\n<li>反客为主的自动版，能够监控主机是否故障，故障之后按照投票数将从库变为主库</li>\n<li>设置<ul>\n<li>调整结构，一个主库带着两个从库</li>\n<li>新建<code>sentinel.conf</code>文件，名字绝不能错</li>\n<li>配置哨兵<ul>\n<li><code>sentinel monitor 被监控的数据库名字（自己起）监控的库ip 监控的库port  1（要大于的票数）</code></li>\n<li>新恢复的master就变成了slave，也就是master已经易主了</li>\n</ul>\n</li>\n<li>启动哨兵 <code>redis-sentinel /sentinel.conf</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"复制的缺点\"><a href=\"#复制的缺点\" class=\"headerlink\" title=\"复制的缺点\"></a>复制的缺点</h4><ul>\n<li>master到slave会有一些延迟，在业务繁忙的时候就会有更多的延迟</li>\n</ul>\n<h3 id=\"redis-持久化\"><a href=\"#redis-持久化\" class=\"headerlink\" title=\"redis 持久化\"></a>redis 持久化</h3><h4 id=\"备份数据\"><a href=\"#备份数据\" class=\"headerlink\" title=\"备份数据\"></a>备份数据</h4><ul>\n<li><code>save</code>命令即可创建当前redis 的数据的备份，成功之后，会在服务器启动的目录生成对应的dump.rdb文件，文件名和文件路径都可以进行修改，在配置文件中可以设置对应的属性值，可以用 <code>CONFIG GET dir</code>命令张查看redis的启动目录</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshydgo13pj31110u0go0.jpg\" alt=\"image-20210715212551022\" style=\"zoom:67%;\" />\n\n<ul>\n<li>会在对应目录 生成dump.rdb</li>\n</ul>\n<h4 id=\"数据恢复\"><a href=\"#数据恢复\" class=\"headerlink\" title=\"数据恢复\"></a>数据恢复</h4><ul>\n<li>redis 启动的时候会自动加载备份文件</li>\n</ul>\n<h4 id=\"RDB-redia-database-持久化方式-（默认）\"><a href=\"#RDB-redia-database-持久化方式-（默认）\" class=\"headerlink\" title=\"RDB(redia database)持久化方式 （默认）\"></a>RDB(redia database)持久化方式 （默认）</h4><ul>\n<li>通过快照完成，dump.rdb 文件里面放的是真实的数据，也就是将内存中所有的数据进行快照到硬盘上面</li>\n<li>快照的频率在 redis.conf 配置文件里面</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshyjbl1dkj31e90u0gpv.jpg\" alt=\"image-20210715213128304\" style=\"zoom:80%;\" />\n\n<ul>\n<li>多个频率设定的条件，只要有一个满足就会备份</li>\n<li>如果不想备份，注释掉 save的参数</li>\n<li>备份的文件名子和路径可以通过 dir 和 dbfilename 参数设定</li>\n<li>FLUSHALL 都会触发RDB的备份,但是产生的dump.rdb 文件是空的</li>\n</ul>\n<blockquote>\n<p>redis实现快照的过程：</p>\n<p>redis使用fork函数复制一份当前进程(父进程)的副本(子进程)，父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入硬盘中的临时文件，当子进程写入完所有数据后会用该临时文件替换旧的RDB文件，至此一次快照操作完成。在执行fork的时候操作系统(类Unix操作系统)会使用写时复制(copy-on-write)策略，即fork函数发生的一刻父子进程共享同一内存数据，当父进程要更改其中某片数据时(如执行一个写命令)，操作系统会将该片数据复制一份以保证子进程的数据不受影响，所以新的RDB文件存储的是执行fork一刻的内存数据。</p>\n<p>redis在进行快照的过程中不会修改RDB文件，只有快照结束后才会将旧的文件替换成新的，也就是说任何时候RDB文件都是完整的。这使得我们可以通过定时备份RDB文件来实现redis数据库备份。RDB文件是经过压缩(可以配置rdbcompression参数以禁用压缩节省CPU占用)的二进制格式，所以占用的空间会小于内存中的数据大小，更加利于传输。</p>\n<p>除了自动快照，还可以手动发送SAVE或BGSAVE命令让redis执行快照，两个命令的区别在于，前者是由主进程进行快照操作, 会阻塞住其他请求，后者会通过fork子进程进行快照操作。</p>\n<p>redis启动后会读取RDB快照文件，将数据从硬盘载入到内存。根据数据量大小与结构和服务器性能不同，这个时间也不同。通常将一个记录一千万个字符串类型键、大小为1GB的快照文件载入到内存中需要花费20~30秒钟。</p>\n<p>通过RDB方式实现持久化，一旦redis异常退出，就会丢失最后一次快照以后更改的所有数据。这就需要开发者根据具体的应用场合，通过组合设置自动快照条件的方式来将可能发生的数据损失控制在能够接受的范围。如果数据很重要以至于无法承受任何损失，则可以考虑使用AOF方式进行持久化.              </p>\n</blockquote>\n<h4 id=\"AOF-Append-only-file-数据持久化\"><a href=\"#AOF-Append-only-file-数据持久化\" class=\"headerlink\" title=\"AOF(Append only file) 数据持久化\"></a>AOF(Append only file) 数据持久化</h4><ul>\n<li><p>默认没有开启AOF方式</p>\n</li>\n<li><p><code>appendonly yes</code> 开启AOF 方式备份 </p>\n</li>\n<li><p>AOF方式会把执行的每一条命令写指令存进磁盘；恢复的时候，会执行命令，恢复数据。</p>\n</li>\n<li><p>恢复的时候却需要先执行命令，才会恢复数据，相比RDB比较费时间</p>\n</li>\n<li><p>AOF 文件名设定</p>\n</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshyw95f1mj31a408ugmh.jpg\" alt=\"image-20210715214354527\"></p>\n<ul>\n<li>刷新硬盘缓存频率</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshywmog4oj30wy08uq3j.jpg\" alt=\"image-20210715214416705\"></p>\n<ul>\n<li><p>自动重写的条件</p>\n<ul>\n<li><p>当AOF文件大小是上次rewrite大小的一倍且文件大于64M时就会重写</p>\n</li>\n<li><p>rewrite 重写机制，就优化命令，减下磁盘占用</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshyxi13icj616206i74n02.jpg\" alt=\"image-20210715214507252\"></p>\n<h4 id=\"AOF-和-RDB共存的问题\"><a href=\"#AOF-和-RDB共存的问题\" class=\"headerlink\" title=\"AOF 和 RDB共存的问题\"></a>AOF 和 RDB共存的问题</h4><ul>\n<li>AOF和RDB会共存</li>\n<li>先去加载的是 AOF，当AOF中有错误的时候，<code>redis-server</code>会启动失败，需要修复AOF文件，使用redis 带的修复工具进行修复 <code>redis-check-aof --fix xxx.aof</code></li>\n</ul>\n<h4 id=\"AOF-和-RDB-对比\"><a href=\"#AOF-和-RDB-对比\" class=\"headerlink\" title=\"AOF 和 RDB 对比\"></a>AOF 和 RDB 对比</h4><ul>\n<li>AOF<ul>\n<li>优点：备份数据较完成，最多丢失2秒的数据</li>\n<li>缺点：磁盘占用较大和恢复较慢</li>\n</ul>\n</li>\n<li>RDB<ul>\n<li>优点：恢复数据较快</li>\n<li>缺点：备份频率不容易控制，会丢失最后一次的RDB之后的数据</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"redis-客户端编程\"><a href=\"#redis-客户端编程\" class=\"headerlink\" title=\"redis 客户端编程\"></a>redis 客户端编程</h3><a class=\"btn-beautify button--animated \" href=\"https://github.com/redis/hiredis\" \n  title=\"下载地址\"><i class=\"far fa-hand-point-rigth\"></i><span>下载地址</span></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make </span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"API-说明\"><a href=\"#API-说明\" class=\"headerlink\" title=\"API 说明\"></a>API 说明</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">redisContext *<span class=\"title\">redisConnect</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ip,<span class=\"keyword\">int</span> port)</span></span></span><br><span class=\"line\"><span class=\"function\">功能：连接redis数据库</span></span><br><span class=\"line\"><span class=\"function\">参数：IP 和 port</span></span><br><span class=\"line\"><span class=\"function\">返回值： 成功：redisContext 指针 ；失败 <span class=\"literal\">NULL</span></span></span><br><span class=\"line\"><span class=\"function\">---------------------------</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">redisCommand</span><span class=\"params\">(redisContext *c,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * formate,...)</span></span></span><br><span class=\"line\"><span class=\"function\">功能：执行命令</span></span><br><span class=\"line\"><span class=\"function\">参数：redisConnect的返回值</span></span><br><span class=\"line\"><span class=\"function\">  \t命令......</span></span><br><span class=\"line\"><span class=\"function\">返回值： 成功：<span class=\"keyword\">void</span> *,会转换成redisReply类型 ；失败 <span class=\"literal\">NULL</span></span></span><br><span class=\"line\"><span class=\"function\">  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> struct redisReply </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> type; <span class=\"comment\">/* REDIS_REPLY_* */</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> integer; <span class=\"comment\">/* The integer when type is REDIS_REPLY_INTEGER */</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> len; <span class=\"comment\">/* Length of string */</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *str; <span class=\"comment\">/* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING */</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> elements; <span class=\"comment\">/* number of elements, for REDIS_REPLY_ARRAY */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redisReply</span> **<span class=\"title\">element</span>;</span> <span class=\"comment\">/* elements vector for REDIS_REPLY_ARRAY */</span></span><br><span class=\"line\">&#125; redisReply;</span><br><span class=\"line\">---------------------------</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeReplyObject</span><span class=\"params\">(<span class=\"keyword\">void</span> *reply)</span></span>;</span><br><span class=\"line\">功能：释放redisCommand执行后返回的redisReply所占用的内存</span><br><span class=\"line\">参数：redisCommand执行后返回的redisReply</span><br><span class=\"line\">返回值：无</span><br><span class=\"line\">---------------------------</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">redisFree</span><span class=\"params\">(redisContext *c)</span></span>;</span><br><span class=\"line\">功能：释放redisConnect()所产生的连接</span><br><span class=\"line\">参数：redisConnect()所产生的连接</span><br><span class=\"line\">返回值：无</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>redisReply -&gt;type 中字段的标识 </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态标识</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REDIS_REPLY_STATUS</td>\n<td>表示状态，内容通过str字段查看，字符串长度是len字段</td>\n</tr>\n<tr>\n<td>REDIS_REPLY_ERROR</td>\n<td>表示出错，查看出错信息，如上的str，len字段</td>\n</tr>\n<tr>\n<td>REDIS_REPLY_INTEGER</td>\n<td>返回整数，从integer字段获取值</td>\n</tr>\n<tr>\n<td>REDIS_REPLY_NIL</td>\n<td>没有数据返回</td>\n</tr>\n<tr>\n<td>REDIS_REPLY_STRING</td>\n<td>返回字符串，查看str，len字段</td>\n</tr>\n<tr>\n<td>REDIS_REPLY_ARRAY</td>\n<td>返回一个数组，查看elements的值(数组个数)，通过element[index] 的方式访问数组元素，每个数组元素是一个redisReply对象的指针。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>redisReply-&gt;errata 字段查看</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>错误状态标识</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REDIS_OK</td>\n<td>正常</td>\n</tr>\n<tr>\n<td>REDIS_ERR_IO</td>\n<td>IO读/写出现异常，通过errno查看原因</td>\n</tr>\n<tr>\n<td>REDIS_ERR_EOF</td>\n<td>服务器关闭了链接，读结束</td>\n</tr>\n<tr>\n<td>REDIS_ERR_PROTOCOL</td>\n<td>分析redis协议内容出错</td>\n</tr>\n<tr>\n<td>EDIS_ERR_OTHER</td>\n<td>其他未知的错误</td>\n</tr>\n</tbody></table>\n<h4 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;/usr/local/include/hiredis/hiredis.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IP <span class=\"meta-string\">&quot;10.211.55.11&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PORT 8899</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//port 8899 ip 10.211.55.11</span></span><br><span class=\"line\">    redisContext * c = redisConnect(IP,PORT);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c-&gt;err)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisFree(c);</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;connect redis server fail!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;connect redis server ok!&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//----------------</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * command1 = <span class=\"string\">&quot;set myname sungs&quot;</span>;</span><br><span class=\"line\">    redisReply * r = (redisReply*)redisCommand(c,command1);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisFree(c);</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;command1 error!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(r-&gt;type == REDIS_REPLY_STATUS &amp;&amp; strcasecmp(r-&gt;str,<span class=\"string\">&quot;ok&quot;</span>) == <span class=\"number\">0</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed to execute command[%s]\\n&quot;</span>,command1);</span><br><span class=\"line\">\t\tfreeReplyObject(r);</span><br><span class=\"line\">\t\tredisFree(c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    freeReplyObject(r);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Succeed to execute command[%s]\\n&quot;</span>, command1);</span><br><span class=\"line\"><span class=\"comment\">//-----------------</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *command2 = <span class=\"string\">&quot;strlen myname&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    r = (redisReply *)redisCommand(c,command2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisFree(c);</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;command2 error!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-&gt;type != REDIS_REPLY_INTEGER)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        freeReplyObject(r);</span><br><span class=\"line\">        redisFree(c);</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;REDIS_REPLY_INTEGE error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = r-&gt;integer;</span><br><span class=\"line\">    freeReplyObject(r);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Succeed to execute command[%s]---&gt;[%d]\\n&quot;</span>, command2,length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* command3 = <span class=\"string\">&quot;get myname&quot;</span>;</span><br><span class=\"line\">\tr = (redisReply*)redisCommand(c, command3);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( r-&gt;type != REDIS_REPLY_STRING)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed to execute command[%s]\\n&quot;</span>,command3);</span><br><span class=\"line\">\t\tfreeReplyObject(r);</span><br><span class=\"line\">\t\tredisFree(c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The value of &#x27;myname&#x27; is %s\\n&quot;</span>, r-&gt;str);</span><br><span class=\"line\">\tfreeReplyObject(r);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Succeed to execute command[%s]\\n&quot;</span>, command3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* command4 = <span class=\"string\">&quot;get key2&quot;</span>;</span><br><span class=\"line\">\tr = (redisReply*)redisCommand(c, command4);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( r-&gt;type == REDIS_REPLY_NIL)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed to execute command[%s]\\n&quot;</span>,command4);</span><br><span class=\"line\">\t\tfreeReplyObject(r);</span><br><span class=\"line\">\t\tredisFree(c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfreeReplyObject(r);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Succeed to execute command[%s]\\n&quot;</span>, command4);</span><br><span class=\"line\">\tredisFree(c);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tdoWork();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsi1mh7socj31bo0butak.jpg\" alt=\"image-20210715231818738\"></p>\n<h3 id=\"接口封装\"><a href=\"#接口封装\" class=\"headerlink\" title=\"接口封装\"></a>接口封装</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @file   redis_api.h</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis 封装接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _REDIS_OP_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _REDIS_OP_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;hiredis.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;make_log.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_LOG_MODULE          <span class=\"meta-string\">&quot;database&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_LOG_PROC            <span class=\"meta-string\">&quot;redis&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_COMMAND_SIZE        300            <span class=\"comment\">/* redis Command 指令最大长度 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FIELD_ID_SIZE            100            <span class=\"comment\">/* redis hash表field域字段长度 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VALUES_ID_SIZE           1024            <span class=\"comment\">/* redis        value域字段长度 */</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">char</span> <span class=\"params\">(*RCOMMANDS)</span>[REDIS_COMMAND_SIZE]</span>;<span class=\"comment\">/* redis 存放批量 命令字符串数组类型 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">char</span> <span class=\"params\">(*RFIELDS)</span>[FIELD_ID_SIZE]</span>;        <span class=\"comment\">/* redis hash表存放批量field字符串数组类型 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">char</span> <span class=\"params\">(*RVALUES)</span>[VALUES_ID_SIZE]</span>;    <span class=\"comment\">/* redis 表存放批量value字符串数组类型 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis tcp模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str\tredis服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str\tredis服务器port</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_nopwd</span><span class=\"params\">(<span class=\"keyword\">char</span> *ip_str, <span class=\"keyword\">char</span>* port_str)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis tcp模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str    redis服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str  redis服务器port</span></span><br><span class=\"line\"><span class=\"comment\"> * @param pwd       redis服务器密码</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *            失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb</span><span class=\"params\">(<span class=\"keyword\">char</span> *ip_str, <span class=\"keyword\">char</span>* port_str, <span class=\"keyword\">char</span> *pwd)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis unix域模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str    unix域sock文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  pwd      redis服务器密码</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *            失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_unix</span><span class=\"params\">(<span class=\"keyword\">char</span> *sock_path, <span class=\"keyword\">char</span> *pwd)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  tcp 链接redis超时等待模式，timeval链接超时</span></span><br><span class=\"line\"><span class=\"comment\"> *            返回</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str        redis 服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str        redis 服务器端口</span></span><br><span class=\"line\"><span class=\"comment\"> * @param timeval        最大超时等待时间</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *        成功返回链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *        失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_timeout</span><span class=\"params\">(<span class=\"keyword\">char</span>* ip_str, <span class=\"keyword\">char</span> *port_str, struct timeval *timeout)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  关闭指定的链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn    已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_disconnect</span><span class=\"params\">(redisContext* conn)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  选择redis中 其中一个数据库</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已链接的数据库链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param db_no        redis数据库编号</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            -1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *            0  成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_selectdatabase</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> db_no)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief            清空当前数据库所有信息(慎用)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已链接的数据库链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            -1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *            0  成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_flush_database</span><span class=\"params\">(redisContext *conn)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  判断key值是否存在</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        需要寻找的key值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *                -1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *                1 存在</span></span><br><span class=\"line\"><span class=\"comment\"> *                0 不存在</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_is_key_exist</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* key)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief            删除一个key</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        </span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *                -1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *                0 成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_del_key</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  打印库中所有匹配pattern的key</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param pattern    匹配模式，pattern支持glob-style的通配符格式，</span></span><br><span class=\"line\"><span class=\"comment\"> *                    如 *表示任意一个或多个字符，</span></span><br><span class=\"line\"><span class=\"comment\"> *                       ?表示任意字符，</span></span><br><span class=\"line\"><span class=\"comment\"> *                    [abc]表示方括号中任意一个字母。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_show_keys</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* pattern)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  设置一个key的删除时间 ，系统到达一定时间</span></span><br><span class=\"line\"><span class=\"comment\"> *            将会自动删除该KEY</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn                已经建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param delete_time        到期事件 time_t 日历时间</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *        0    SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *        -1  FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_set_key_lifecycle</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">time_t</span> delete_time)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief            创建或者覆盖一个HASH表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn                已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key                hash 表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param element_num        hash 表区域个数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param fields            hash 表区域名称数组char(*)[FIELD_ID_SIZE]</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values            hash 表区域值数组  char(*)[VALUES_ID_SIZE]</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0   成功    </span></span><br><span class=\"line\"><span class=\"comment\"> *            -1  失败</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_create_or_replace_hash_table</span><span class=\"params\">(redisContext* conn,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                     <span class=\"keyword\">char</span>* key, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                     <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> element_num, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                     RFIELDS fields, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                     RVALUES values)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  给指定的hash表 指定的field对应的value自增num</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t\thash表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field\t\t\thash表下的区域名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tfail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hincrement_one_field</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行链表插入命令 插入链表头部</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values    封装好的域名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values    封装好的值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num    值个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_set_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RFIELDS fields, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  想一个hash表中添加一条 key-value 数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn  redis连接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key   哈希表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_set</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">char</span> *value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  从一个hash表中取出一条 key-value 数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn  redis连接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key   哈希表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field 字段名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 得到的数据， 需要先开辟内存</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_get</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">char</span> *value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief        将指定的zset表，对应的成员，值自增1</span></span><br><span class=\"line\"><span class=\"comment\"> *                （key 或 成员不存在 则创建）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        zset表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param member    zset成员名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0            succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1            fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_increment</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* key, <span class=\"keyword\">char</span>* member)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//得到zset一个member的score</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_get_score</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *member)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief     批量将指定的zset表，对应的成员，值自增1</span></span><br><span class=\"line\"><span class=\"comment\"> *                （key 或 成员不存在 则创建）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        有序集合名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values    封装好的成员数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num    数据个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_increment_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行链表插入命令 插入链表头部</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values    封装好的值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num    值个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_list_push_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  单条数据插入链表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value        数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_list_push</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  得到链表中元素的个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn    链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key    链表名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            &gt;=0 个数</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1 fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_get_list_cnt</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  按照一定范围截断链表中的数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param begin        阶段启示位置 从 0 开始</span></span><br><span class=\"line\"><span class=\"comment\"> * @param end        阶段结束位置 从 -1 开始</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *                    这里的范围定义举例 </span></span><br><span class=\"line\"><span class=\"comment\"> *                    如果得到全部范围(0, -1)</span></span><br><span class=\"line\"><span class=\"comment\"> *                    除了最后一个元素范围(0, -2)</span></span><br><span class=\"line\"><span class=\"comment\"> *                    前20各数据范围(0, 19)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0  SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1 FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_trim_list</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">int</span> begin, <span class=\"keyword\">int</span> end)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief          得到链表中的数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0  SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1 FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_range_list</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">int</span> from_pos, <span class=\"keyword\">int</span> count, RVALUES values, <span class=\"keyword\">int</span> *get_num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行已经封装好的redis 命令</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmds        封装好的命令数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmd_num    命令个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_redis_append</span><span class=\"params\">(redisContext *conn, RCOMMANDS cmds, <span class=\"keyword\">int</span> cmd_num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  执行单向命令 无返回值 命令自行输入</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmd        封装好的命令</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_redis_command</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *cmd)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  测试一个reply的结果类型</span></span><br><span class=\"line\"><span class=\"comment\"> *            得到对应的类型用对应的方法获取数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param reply        返回的命令结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_test_reply_type</span><span class=\"params\">(redisReply *reply)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  设置key对应的值为string类型的value</span></span><br><span class=\"line\"><span class=\"comment\"> *            </span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn          已经建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        \tkey值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value         value值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *        0    SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *        -1  FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_set_string</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  获取key对应的value值</span></span><br><span class=\"line\"><span class=\"comment\"> *            </span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn          已经建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        \tkey值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value         value值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *        0    SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *        -1  FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_get_string</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @file redis_op.c</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis 操作基本接口和key的操作实现</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;redis_op.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  选择redis一个数据库</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已链接的数据库链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param db_no\t\tredis数据库编号</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0  成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_selectdatabase</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> db_no)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 选择一个数据库 */</span></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;select %d&quot;</span>, db_no);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]Select database %d error!\\n&quot;</span>, db_no);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Select database %d error!%s\\n&quot;</span>, db_no, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+][GMS_REDIS]Select database %d SUCCESS!\\n&quot;</span>, db_no);</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]Select database %d SUCCESS!\\n&quot;</span>, db_no);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief\t\t\t清空当前数据库所有信息(慎用)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已链接的数据库链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0  成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_flush_database</span><span class=\"params\">(redisContext *conn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;\t</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;FLUSHDB&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]Clear all data error\\n&quot;</span>);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Clear all data error\\n&quot;</span>);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+][GMS_REDIS]Clear all data!!\\n&quot;</span>);</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Clear all data!!\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  判断key值是否存在</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t需要寻找的key值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t-1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t1 存在</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t0 不存在</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_is_key_exist</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;EXISTS %s&quot;</span>, key);</span><br><span class=\"line\">\t<span class=\"comment\">//rop_test_reply_type(reply);</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]is key exist get wrong type!\\n&quot;</span>);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]is key exist get wrong type! %s\\n&quot;</span>, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;integer == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">1</span>;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief\t\t\t删除一个key</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t-1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t0 成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_del_key</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;DEL %s&quot;</span>, key);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS] DEL key %s ERROR\\n&quot;</span>, key);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS] DEL key %s ERROR %s\\n&quot;</span>, key, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;integer &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  设置一个key的删除时间 ，系统到达一定时间</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t将会自动删除该KEY</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t\t\t已经建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param delete_time\t\t到期事件 time_t 日历时间</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t0\tSUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t-1  FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_set_key_lifecycle</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">time_t</span> delete_time)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;EXPIREAT %s %d&quot;</span>, key, delete_time);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]Set key:%s delete time ERROR!\\n&quot;</span>, key);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Set key:%s delete time ERROR! %s\\n&quot;</span>, key, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;integer == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 成功 */</span></span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 错误 */</span></span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tfreeReplyObject(reply);\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  打印库中所有匹配pattern的key</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param pattern\t匹配模式，pattern支持glob-style的通配符格式，</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t如 *表示任意一个或多个字符，</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t   ?表示任意字符，</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t    [abc]表示方括号中任意一个字母。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_show_keys</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* pattern)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;keys %s&quot;</span>, pattern);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_ARRAY) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]show all keys and data wrong type!\\n&quot;</span>);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]show all keys and data wrong type! %s\\n&quot;</span>, conn-&gt;errstr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; reply-&gt;elements; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;======[%s]======\\n&quot;</span>, reply-&gt;element[i]-&gt;str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行已经封装好的redis 命令</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmds\t\t封装好的命令数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmd_num\t命令个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tFAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_redis_append</span><span class=\"params\">(redisContext *conn, RCOMMANDS cmds, <span class=\"keyword\">int</span> cmd_num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 批量插入命令到缓冲命令管道 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cmd_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisAppendCommand(conn, cmds[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]Append Command: %s ERROR!\\n&quot;</span>, cmds[i]);</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Append Command: %s ERROR! %s\\n&quot;</span>, cmds[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 提交命令 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cmd_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisGetReply(conn, (<span class=\"keyword\">void</span>**)&amp;reply);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]Commit Command:%s ERROR!\\n&quot;</span>, cmds[i]);</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Commit Command:%s ERROR! %s\\n&quot;</span>, cmds[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  执行单向命令 无返回值 命令自行输入</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmd\t\t封装好的命令</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tFAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_redis_command</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *cmd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, cmd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Command : %s ERROR!%s\\n&quot;</span>, cmd, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  测试一个reply的结果类型</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t得到对应的类型用对应的方法获取数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param reply\t\t返回的命令结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_test_reply_type</span><span class=\"params\">(redisReply *reply)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (reply-&gt;type) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_STATUS:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_STATUS=[string] use reply-&gt;str to get data, reply-&gt;len get data len\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_ERROR:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_ERROR=[string] use reply-&gt;str to get data, reply-&gt;len get date len\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_INTEGER:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_INTEGER=[long long] use reply-&gt;integer to get data\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_NIL:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_NIL=[] data not exist\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_ARRAY:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_ARRAY=[array] use reply-&gt;elements to get number of data, reply-&gt;element[index] to get (struct redisReply*) Object\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_STRING:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_string=[string] use reply-&gt;str to get data, reply-&gt;len get data len\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Can&#x27;t parse this type\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis tcp模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str\tredis服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str\tredis服务器port</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_nopwd</span><span class=\"params\">(<span class=\"keyword\">char</span> *ip_str, <span class=\"keyword\">char</span>* port_str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tredisContext *conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">uint16_t</span> port = atoi(port_str);</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn = redisConnect(ip_str, port);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn  == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:Can&#x27;t allocate redis context!\\n&quot;</span>, ip_str, port);\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn-&gt;err) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:%s\\n&quot;</span>, ip_str, port, conn-&gt;errstr);\t</span><br><span class=\"line\">\t\tredisFree(conn);</span><br><span class=\"line\">\t\tconn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n&quot;</span>, ip_str, port);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis tcp模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str\tredis服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str\tredis服务器port</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb</span><span class=\"params\">(<span class=\"keyword\">char</span> *ip_str, <span class=\"keyword\">char</span>* port_str, <span class=\"keyword\">char</span> *pwd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tredisContext *conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">uint16_t</span> port = atoi(port_str);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> auth_cmd[REDIS_COMMAND_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn = redisConnect(ip_str, port);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn  == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:Can&#x27;t allocate redis context!\\n&quot;</span>, ip_str, port);\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn-&gt;err) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:%s\\n&quot;</span>, ip_str, port, conn-&gt;errstr);\t</span><br><span class=\"line\">\t\tredisFree(conn);</span><br><span class=\"line\">\t\tconn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(auth_cmd, <span class=\"string\">&quot;auth %s&quot;</span>, pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">    reply = redisCommand(conn, auth_cmd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Command : auth %s ERROR!\\n&quot;</span>, pwd);</span><br><span class=\"line\">        conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    freeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n&quot;</span>, ip_str, port);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*</span></span><br><span class=\"line\"><span class=\"comment\">**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis unix域模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str\tunix域sock文件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_unix</span><span class=\"params\">(<span class=\"keyword\">char</span> *sock_path, <span class=\"keyword\">char</span> *pwd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tredisContext *conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> auth_cmd[REDIS_COMMAND_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn = redisConnectUnix(sock_path);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn  == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect domain-unix:%s Error:Can&#x27;t allocate redis context!\\n&quot;</span>, sock_path);\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn-&gt;err) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect domain-unix:%s Error:%s\\n&quot;</span>, sock_path, conn-&gt;errstr);\t</span><br><span class=\"line\">\t\tredisFree(conn);</span><br><span class=\"line\">\t\tconn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(auth_cmd, <span class=\"string\">&quot;auth %s&quot;</span>, pwd);</span><br><span class=\"line\">    reply = redisCommand(conn, auth_cmd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Command : auth %s ERROR!\\n&quot;</span>, pwd);</span><br><span class=\"line\">        conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    freeReplyObject(reply);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Connect domain-unix:%s SUCCESS!\\n&quot;</span>, sock_path);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  tcp 链接redis超时等待模式，timeval链接超时</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t返回</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str\t\tredis 服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str\t\tredis 服务器端口</span></span><br><span class=\"line\"><span class=\"comment\"> * @param timeval\t\t最大超时等待时间</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t成功返回链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_timeout</span><span class=\"params\">(<span class=\"keyword\">char</span>* ip_str, <span class=\"keyword\">char</span> *port_str, struct timeval *timeout)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tredisContext *conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">uint16_t</span> port = atoi(port_str);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tconn = redisConnectWithTimeout(ip_str, port, *timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn  == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:Can&#x27;t allocate redis context!\\n&quot;</span>, ip_str, port);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn-&gt;err) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:%s\\n&quot;</span>, ip_str, port, conn-&gt;errstr);\t</span><br><span class=\"line\">\t\tredisFree(conn);</span><br><span class=\"line\">\t\tconn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n&quot;</span>, ip_str, port);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  关闭指定的链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_disconnect</span><span class=\"params\">(redisContext* conn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tredisFree(conn);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Disconnect SUCCESS!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 封装一个 hmset 命令 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span>* <span class=\"title\">make_hmset_command</span><span class=\"params\">(<span class=\"keyword\">char</span>* key, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> element_num, RFIELDS fields, RVALUES values)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *cmd = <span class=\"literal\">NULL</span>;\t</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> buf_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> use_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcmd = (<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(cmd, <span class=\"number\">0</span>, <span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\tbuf_size += <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">strncat</span>(cmd, <span class=\"string\">&quot;hmset&quot;</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">\tuse_size += <span class=\"number\">5</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">strncat</span>(cmd, <span class=\"string\">&quot; &quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\tuse_size += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">strncat</span>(cmd, key, <span class=\"number\">200</span>);</span><br><span class=\"line\">\tuse_size += <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; element_num; ++i) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">strncat</span>(cmd, <span class=\"string\">&quot; &quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuse_size += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (use_size &gt;= buf_size) &#123;</span><br><span class=\"line\">\t\t\tcmd = <span class=\"built_in\">realloc</span>(cmd, use_size + <span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbuf_size += <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">strncat</span>(cmd, fields[i], FIELD_ID_SIZE);</span><br><span class=\"line\">\t\tuse_size += <span class=\"built_in\">strlen</span>(fields[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (use_size &gt;= buf_size) &#123;</span><br><span class=\"line\">\t\t\tcmd = <span class=\"built_in\">realloc</span>(cmd, use_size + <span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbuf_size += <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">strncat</span>(cmd, <span class=\"string\">&quot; &quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuse_size += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (use_size &gt;= buf_size) &#123;</span><br><span class=\"line\">\t\t\tcmd = <span class=\"built_in\">realloc</span>(cmd, use_size + <span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbuf_size += <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">strncat</span>(cmd, values[i], VALUES_ID_SIZE);</span><br><span class=\"line\">\t\tuse_size += <span class=\"built_in\">strlen</span>(values[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (use_size &gt;= buf_size) &#123;</span><br><span class=\"line\">\t\t\tcmd = <span class=\"built_in\">realloc</span>(cmd, use_size + <span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbuf_size += <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cmd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行链表插入命令 插入链表头部</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values\t封装好的值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num\t值个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tFAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_set_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RFIELDS fields, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 批量插入命令到缓冲命令管道 */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">        retn = redisAppendCommand(conn, <span class=\"string\">&quot;hset %s %s %s&quot;</span>, key, fields[i], values[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">            LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]HSET %s %s %s ERROR![%s]\\n&quot;</span>, key, fields[i], values[i], conn-&gt;errstr);</span><br><span class=\"line\">            retn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 提交命令 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisGetReply(conn, (<span class=\"keyword\">void</span>**)&amp;reply);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Commit HSET %s %s %s ERROR![%s]\\n&quot;</span>, key, fields[i], values[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  想一个hash表中添加一条 key-value 数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn  redis连接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key   哈希表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_set</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">char</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    reply =  redisCommand(conn, <span class=\"string\">&quot;hset %s %s %s&quot;</span>, key, field, value);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span> || reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">        LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]hset %s %s %s error %s\\n&quot;</span>, key, field, value,conn-&gt;errstr);</span><br><span class=\"line\">        retn =  <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">    freeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  从一个hash表中取出一条 key-value 数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn  redis连接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key   哈希表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field 字段名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 得到的数据， 需要先开辟内存</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_get</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">char</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    reply =  redisCommand(conn, <span class=\"string\">&quot;hget %s %s&quot;</span>, key, field);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span> || reply-&gt;type != REDIS_REPLY_STRING) &#123;</span><br><span class=\"line\">        LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]hget %s %s  error %s\\n&quot;</span>, key, field, conn-&gt;errstr);</span><br><span class=\"line\">        retn =  <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    len = reply-&gt;len &gt; VALUES_ID_SIZE? VALUES_ID_SIZE:reply-&gt;len ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">strncpy</span>(value, reply-&gt;str, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    value[len] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">    freeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief\t\t\t创建或者覆盖一个HASH表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t\t\thash 表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param element_num\t\thash 表区域个数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param fields\t\t\thash 表区域名称数组char(*)[FIELD_ID_SIZE]</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values\t\t\thash 表区域值数组  char(*)[VALUES_ID_SIZE]</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0   成功\t</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1  失败</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_create_or_replace_hash_table</span><span class=\"params\">(redisContext* conn,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t\t\t\t\t\t\t <span class=\"keyword\">char</span>* key, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t\t\t\t\t\t\t <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> element_num, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t\t\t\t\t\t\t RFIELDS fields, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t\t\t\t\t\t\t RVALUES values)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *cmd = make_hmset_command(key, element_num, fields, values);\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]create hash table %s error\\n&quot;</span>, key);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END_WITHOUT_FREE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, cmd);</span><br><span class=\"line\"><span class=\"comment\">//\trop_test_reply_type(reply);</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(reply-&gt;str, <span class=\"string\">&quot;OK&quot;</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Create hash table %s Error:%s,%s\\n&quot;</span>, key, reply-&gt;str, conn-&gt;errstr);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(cmd);</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">END_WITHOUT_FREE:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  给指定的hash表 指定的field对应的value自增num</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t\thash表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field\t\t\thash表下的区域名\t</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tfail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hincrement_one_field</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;HINCRBY %s %s %d&quot;</span>, key, field, num);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]increment %s %s error %s\\n&quot;</span>, key, field, conn-&gt;errstr);\t</span><br><span class=\"line\">\t\tretn =  <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行链表插入命令 插入链表头部</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values\t封装好的值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num\t值个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tFAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_list_push_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 批量插入命令到缓冲命令管道 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisAppendCommand(conn, <span class=\"string\">&quot;lpush %s %s&quot;</span>, key, values[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]PLUSH %s %s ERROR! %s\\n&quot;</span>, key, values[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 提交命令 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisGetReply(conn, (<span class=\"keyword\">void</span>**)&amp;reply);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Commit LPUSH %s %s ERROR! %s\\n&quot;</span>, key, values[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  单条数据插入链表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value\t\t数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_list_push</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;LPUSH %s %s&quot;</span>, key, value);</span><br><span class=\"line\">\t<span class=\"comment\">//rop_test_reply_type(reply);\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]LPUSH %s %s error!%s\\n&quot;</span>, key, value, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  得到链表中元素的个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t&gt;=0 个数</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1 fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_get_list_cnt</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;LLEN %s&quot;</span>, key);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]LLEN %s error %s\\n&quot;</span>, key, conn-&gt;errstr);</span><br><span class=\"line\">\t\tcnt = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcnt = reply-&gt;integer;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  按照一定范围截断链表中的数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param begin\t\t阶段启示位置 从 0 开始</span></span><br><span class=\"line\"><span class=\"comment\"> * @param end\t\t阶段结束位置 从 -1 开始</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t这里的范围定义举例 </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t如果得到全部范围(0, -1)</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t除了最后一个元素范围(0, -2)</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t前20各数据范围(0, 19)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0  SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1 FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_trim_list</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">int</span> begin, <span class=\"keyword\">int</span> end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;LTRIM %s %d %d&quot;</span>, key, begin, end);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_STATUS) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]LTRIM %s %d %d error!%s\\n&quot;</span>, key, begin, end, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  rop_range_list 得到链表中的数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *          返回数据为 区间为</span></span><br><span class=\"line\"><span class=\"comment\"> *              [from_pos, end_pos)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key       表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param from_pos  查找表的起始数据下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param end_pos   查找表的结尾数据下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values    得到表中的value数据</span></span><br><span class=\"line\"><span class=\"comment\"> * @param get_num   得到结果value的个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *      0 succ, -1 fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_range_list</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">int</span> from_pos, <span class=\"keyword\">int</span> end_pos, RVALUES values, <span class=\"keyword\">int</span> *get_num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = end_pos - from_pos + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    reply = redisCommand(conn, <span class=\"string\">&quot;LRANGE %s %d %d&quot;</span>, key, from_pos, end_pos);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_ARRAY || reply-&gt;elements == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]LRANGE %s  error!%s\\n&quot;</span>, key, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    max_count = (reply-&gt;elements &gt; count) ? count: reply-&gt;elements;</span><br><span class=\"line\">    *get_num = max_count;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; max_count; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">strncpy</span>(values[i], reply-&gt;element[i]-&gt;str, VALUES_ID_SIZE<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reply != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        freeReplyObject(reply);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief\t\t将指定的zset表，对应的成员，值自增1</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t（key 或 成员不存在 则创建）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\tzset表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param member\tzset成员名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\t\tfail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_increment</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* key, <span class=\"keyword\">char</span>* member)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;ZINCRBY %s 1 %s&quot;</span>, key, member);</span><br><span class=\"line\">\t<span class=\"comment\">//rop_test_reply_type(reply);</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(reply-&gt;str, <span class=\"string\">&quot;OK&quot;</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Add or increment table: %s,member: %s Error:%s,%s\\n&quot;</span>, key, member,reply-&gt;str, conn-&gt;errstr);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief\t 批量将指定的zset表，对应的成员，值自增1</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t（key 或 成员不存在 则创建）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t有序集合名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values\t封装好的成员数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num\t数据个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tFAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_increment_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 批量命令到缓冲管道 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisAppendCommand(conn, <span class=\"string\">&quot;ZINCRBY %s 1 %s&quot;</span>, key, values[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]ZINCRBY %s 1 %s ERROR! %s\\n&quot;</span>, key, values[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 提交命令 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisGetReply(conn, (<span class=\"keyword\">void</span>**)&amp;reply);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Commit ZINCRBY %s 1 %s ERROR!%s\\n&quot;</span>, key, values[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END: </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_get_score</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *member)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;ZSCORE %s %s&quot;</span>, key, member);</span><br><span class=\"line\">    rop_test_reply_type(reply);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_STRING) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]ZSCORE %s %s error %s\\n&quot;</span>, key, member,conn-&gt;errstr);</span><br><span class=\"line\">        score = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    score = atoi(reply-&gt;str);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> score;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span>  _MAKE_LOG_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  _MAKE_LOG_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;pthread.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">out_put_file</span><span class=\"params\">(<span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *buf)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">make_path</span><span class=\"params\">(<span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *module_name, <span class=\"keyword\">char</span> *proc_name)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dumpmsg_to_file</span><span class=\"params\">(<span class=\"keyword\">char</span> *module_name, <span class=\"keyword\">char</span> *proc_name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"keyword\">int</span> line, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *funcname, <span class=\"keyword\">char</span> *fmt, ...)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _LOG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOG(module_name, proc_name, x...) \\</span></span><br><span class=\"line\"><span class=\"meta\">        do&#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\tdumpmsg_to_file(module_name, proc_name, __FILE__, __LINE__, __FUNCTION__, ##x);\\</span></span><br><span class=\"line\"><span class=\"meta\">\t&#125;while(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOG(module_name, proc_name, x...)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">pthread_mutex_t</span> ca_log_lock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&quot;make_log.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//pthread_mutex_t lock;</span></span><br><span class=\"line\"><span class=\"comment\">//pthread_mutex_init(lock);</span></span><br><span class=\"line\"><span class=\"comment\">/*void *comm_log(void *p)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    pthread_mutex_lock(&amp;lock);</span></span><br><span class=\"line\"><span class=\"comment\">    pthread_mutex_unlock(&amp;lock);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">struct file_path&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    char *module_name;</span></span><br><span class=\"line\"><span class=\"comment\">    char *proc_name;</span></span><br><span class=\"line\"><span class=\"comment\">    const char *filename;</span></span><br><span class=\"line\"><span class=\"comment\">    int line;</span></span><br><span class=\"line\"><span class=\"comment\">    const char *funcname;</span></span><br><span class=\"line\"><span class=\"comment\">    char *fmt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">int lock_file(char *module, char *proc, const char *file,</span></span><br><span class=\"line\"><span class=\"comment\">                        int lines, const char *func, char *mt, ...)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    va_list ap;</span></span><br><span class=\"line\"><span class=\"comment\">    struct file_path path;</span></span><br><span class=\"line\"><span class=\"comment\">    path.module_name = module;</span></span><br><span class=\"line\"><span class=\"comment\">    path.proc_name = proc;</span></span><br><span class=\"line\"><span class=\"comment\">    path.filename = file;</span></span><br><span class=\"line\"><span class=\"comment\">    path.line = lines;</span></span><br><span class=\"line\"><span class=\"comment\">    path.funcname = func;</span></span><br><span class=\"line\"><span class=\"comment\">    //path.fmt  = mt;</span></span><br><span class=\"line\"><span class=\"comment\">    va_start(ap,mt);</span></span><br><span class=\"line\"><span class=\"comment\">    vsprintf(path.fmt,mt,ap);</span></span><br><span class=\"line\"><span class=\"comment\">    va_end(ap);</span></span><br><span class=\"line\"><span class=\"comment\">    pthread_mutex_init(&amp;lock,0); </span></span><br><span class=\"line\"><span class=\"comment\">    pthread_t comm;</span></span><br><span class=\"line\"><span class=\"comment\">        pthread_create(&amp;comm,0,dumpmsg_to_file,&amp;path);</span></span><br><span class=\"line\"><span class=\"comment\">    pthread_join(comm,0);</span></span><br><span class=\"line\"><span class=\"comment\">    pthread_mutex_destroy(&amp;lock);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pthread_mutex_t</span> ca_log_lock=PTHREAD_MUTEX_INITIALIZER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建目录并写入内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dumpmsg_to_file</span><span class=\"params\">(<span class=\"keyword\">char</span> *module_name, <span class=\"keyword\">char</span> *proc_name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"keyword\">int</span> line, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *funcname, <span class=\"keyword\">char</span> *fmt, ...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> mesg[<span class=\"number\">4096</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> buf[<span class=\"number\">4096</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t    <span class=\"keyword\">char</span> filepath[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">time_t</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> * <span class=\"title\">now</span>=</span><span class=\"literal\">NULL</span>;                                                                                     </span><br><span class=\"line\">        va_list ap;                                                                                               </span><br><span class=\"line\">        <span class=\"comment\">//struct file_path *path;</span></span><br><span class=\"line\">        <span class=\"comment\">//path = (struct file_path*)paths;</span></span><br><span class=\"line\">        time(&amp;t);                                                                                                 </span><br><span class=\"line\">        now = localtime(&amp;t);                                       </span><br><span class=\"line\">        va_start(ap, fmt);                                                                               </span><br><span class=\"line\">        <span class=\"built_in\">vsprintf</span>(mesg, fmt, ap);                                                                       </span><br><span class=\"line\">        va_end(ap);                        </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1</span></span><br><span class=\"line\">        <span class=\"built_in\">snprintf</span>(buf, <span class=\"number\">4096</span>, <span class=\"string\">&quot;[%04d-%02d-%02d %02d:%02d:%02d]--[%s:%d]--%s\\n&quot;</span>,</span><br><span class=\"line\">                                now -&gt; tm_year + <span class=\"number\">1900</span>, now -&gt; tm_mon + <span class=\"number\">1</span>,                                         </span><br><span class=\"line\">                                now -&gt; tm_mday, now -&gt; tm_hour, now -&gt; tm_min, now -&gt; tm_sec,                     </span><br><span class=\"line\">\t\t\t\t\t\t\t\tfilename, line, mesg);                                     </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></span><br><span class=\"line\">        <span class=\"built_in\">snprintf</span>(buf, <span class=\"number\">4096</span>, <span class=\"string\">&quot;===%04d%02d%02d-%02d%02d%02d,%s[%d]=== %s\\n&quot;</span>,</span><br><span class=\"line\">                                now -&gt; tm_year + <span class=\"number\">1900</span>, now -&gt; tm_mon + <span class=\"number\">1</span>,                                         </span><br><span class=\"line\">                                now -&gt; tm_mday, now -&gt; tm_hour, now -&gt; tm_min, now -&gt; tm_sec,</span><br><span class=\"line\">                                funcname, line, mesg);   </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">        make_path(filepath, module_name, proc_name);</span><br><span class=\"line\">        </span><br><span class=\"line\">        pthread_mutex_lock(&amp;ca_log_lock);</span><br><span class=\"line\">\t    out_put_file(filepath, buf);     </span><br><span class=\"line\">        pthread_mutex_unlock(&amp;ca_log_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;     </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"comment\">//写入内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">out_put_file</span><span class=\"params\">(<span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *buf)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fd;                                                                                                   </span><br><span class=\"line\">    fd = open(path, O_RDWR | O_CREAT | O_APPEND, <span class=\"number\">0777</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(write(fd, buf, <span class=\"built_in\">strlen</span>(buf)) != (<span class=\"keyword\">int</span>)<span class=\"built_in\">strlen</span>(buf)) &#123;                                      </span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;write error!\\n&quot;</span>);                           </span><br><span class=\"line\">            close(fd);                                                                                        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;                                                                                                  </span><br><span class=\"line\">            <span class=\"comment\">//write(fd, &quot;\\n&quot;, 1);</span></span><br><span class=\"line\">            close(fd);                                                                                        </span><br><span class=\"line\">    &#125;               </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">make_path</span><span class=\"params\">(<span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *module_name, <span class=\"keyword\">char</span> *proc_name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> t;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> *<span class=\"title\">now</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> top_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"string\">&quot;.&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> second_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"string\">&quot;./logs&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> third_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> y_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> m_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> d_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;; </span><br><span class=\"line\">\ttime(&amp;t);</span><br><span class=\"line\">        now = localtime(&amp;t);</span><br><span class=\"line\">\t<span class=\"built_in\">snprintf</span>(path, <span class=\"number\">1024</span>, <span class=\"string\">&quot;./logs/%s/%04d/%02d/%s-%02d.log&quot;</span>, module_name, now -&gt; tm_year + <span class=\"number\">1900</span>, now -&gt; tm_mon + <span class=\"number\">1</span>, proc_name, now -&gt; tm_mday);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(third_dir, <span class=\"string\">&quot;%s/%s&quot;</span>, second_dir, module_name);</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(y_dir, <span class=\"string\">&quot;%s/%04d/&quot;</span>, third_dir, now -&gt; tm_year + <span class=\"number\">1900</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(m_dir, <span class=\"string\">&quot;%s/%02d/&quot;</span>, y_dir, now -&gt; tm_mon + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(d_dir,<span class=\"string\">&quot;%s/%02d/&quot;</span>, m_dir, now -&gt; tm_mday);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(access(top_dir, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mkdir(top_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;create %s failed!\\n&quot;</span>, top_dir);\t</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(second_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, top_dir, second_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(third_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, top_dir, third_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(y_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, top_dir, y_dir);                                                     </span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(m_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;                                                             </span><br><span class=\"line\">                        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, top_dir, m_dir);                                                     </span><br><span class=\"line\">                &#125;          \t</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(access(second_dir, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mkdir(second_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;create %s failed!\\n&quot;</span>, second_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(third_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, second_dir, third_dir);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(y_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, second_dir, y_dir);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(m_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, second_dir, m_dir);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(access(third_dir, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mkdir(third_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;create %s failed!\\n&quot;</span>, third_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(y_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, third_dir, y_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(m_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, third_dir, m_dir);</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (access(y_dir, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mkdir(y_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;create %s failed!\\n&quot;</span>, y_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(m_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, y_dir, m_dir);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (access(m_dir, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mkdir(m_dir, <span class=\"number\">0777</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;create %s failed!\\n&quot;</span>, m_dir);</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//printf(&quot;path:%s\\n&quot;, path);</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> path[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> proc_name[] = &#123;<span class=\"string\">&quot;sys_guard&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[] = &#123;<span class=\"string\">&quot;12345\\n&quot;</span>&#125;;</span><br><span class=\"line\">\tmake_path(path, proc_name);</span><br><span class=\"line\">\tout_put_file(path, buf);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;redis_op.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">    redisContext *conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    conn = rop_connectdb_nopwd(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"string\">&quot;6379&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//set foo  hello</span></span><br><span class=\"line\">    ret = rop_set_string(conn, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;set succ!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;set fail\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> value[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tret = rop_get_string(conn, <span class=\"string\">&quot;foo&quot;</span>, value);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;get succ: %s - %s\\n&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;get fail\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//释放数据库</span></span><br><span class=\"line\">    rop_disconnect(conn);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"关系型数据库\"><a href=\"#关系型数据库\" class=\"headerlink\" title=\"关系型数据库\"></a>关系型数据库</h3><ul>\n<li>NoSQL 数据库的四大分类<ul>\n<li>KV键值，典型就是 redis</li>\n<li>文档型数据库MongoDB </li>\n<li>列存储数据库 HBase</li>\n<li>图关系数据库 Neo4J</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"redis-是什么？\"><a href=\"#redis-是什么？\" class=\"headerlink\" title=\"redis 是什么？\"></a>redis 是什么？</h3><ul>\n<li>开源的key-value 的存储系统，将大部分数据存储在内存中。</li>\n<li>redis基于内存操作，读写数据很快，作为内存型缓存服务器，搭配mysql可以做到数据持久化</li>\n<li>redis基于C语言开发，不需要过多依赖；客户端提供各种语言版本。      </li>\n</ul>\n<h3 id=\"redis优点\"><a href=\"#redis优点\" class=\"headerlink\" title=\"redis优点\"></a>redis优点</h3><ul>\n<li>完全在内存中保存数据库，使用磁盘为了持久化;速度异常快速</li>\n<li>有丰富的数据类型，string，list，set，sorted set,hash</li>\n<li>操作都是原子的，操作不会在执行完毕前被打断。从而确保当两个客户同时访问 redis 服务器得到的是更新后的值</li>\n</ul>\n<h3 id=\"相关资源\"><a href=\"#相关资源\" class=\"headerlink\" title=\"相关资源\"></a>相关资源</h3><a class=\"btn-beautify button--animated \" href=\"http://redis.cn\" \n  title=\"中文网站\"><i class=\"far fa-hand-point-right\"></i><span>中文网站</span></a>\n\n<h3 id=\"redis-安装\"><a href=\"#redis-安装\" class=\"headerlink\" title=\"redis 安装\"></a>redis 安装</h3><h4 id=\"下载对应软件包\"><a href=\"#下载对应软件包\" class=\"headerlink\" title=\"下载对应软件包\"></a>下载对应软件包</h4><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsi2rwxb4ej30di07ot8v.jpg\" alt=\"redis 安装包\" style=\"zoom:50%;\" />\n\n<h4 id=\"解压后，开始编译\"><a href=\"#解压后，开始编译\" class=\"headerlink\" title=\"解压后，开始编译\"></a>解压后，开始编译</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置文件redis-cnf-在安装包里面\"><a href=\"#配置文件redis-cnf-在安装包里面\" class=\"headerlink\" title=\"配置文件redis.cnf 在安装包里面\"></a>配置文件redis.cnf 在安装包里面</h4><blockquote>\n<p>配置文件分成几大块：</p>\n<ol>\n<li><p>通用(general)</p>\n</li>\n<li><p>快照(snapshotting)</p>\n</li>\n<li><p>复制(replication)</p>\n</li>\n<li><p>安全(security)</p>\n</li>\n<li><p>限制(limits)</p>\n</li>\n<li><p>追加模式(append only mode)</p>\n</li>\n<li><p>LUA脚本(lua scripting)</p>\n</li>\n<li><p>慢日志(slow log)</p>\n</li>\n<li><p>事件通知(event notification).       </p>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize no</span><br><span class=\"line\">守护进程</span><br><span class=\"line\">默认情况下，redis不是在后台运行的。如果需要在后台运行，把该项的值更改为yes。</span><br><span class=\"line\"></span><br><span class=\"line\">pidfile /var/run/redis.pid</span><br><span class=\"line\">当redis在后台运行的时候，redis默认会把pid文件放在/var/run/redis.pid，你可以配置到其他位置。当运行多个redis服务时，需要指定不同的pid文件和端口。</span><br><span class=\"line\"></span><br><span class=\"line\">port 6379</span><br><span class=\"line\">指定redis运行的端口，默认是6379。</span><br><span class=\"line\"></span><br><span class=\"line\">bind 127.0.0.1</span><br><span class=\"line\">指定redis只接收来自于该IP地址的请求看，如果不进行设置，那么将处理所有请求。在生产环境中最好设置该项。</span><br><span class=\"line\">远程连接的话，需要把这行注释掉</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttimeout 多长时间的等待，就会断连接,0表示永远连着</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tkeepalive 心跳检测</span><br><span class=\"line\"></span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\">远程访问需要设置为 no</span><br><span class=\"line\"></span><br><span class=\"line\">loglevel debug</span><br><span class=\"line\">指定日志记录级别，其中redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose。</span><br><span class=\"line\">1．debug表示记录很多信息,用于开发和测试</span><br><span class=\"line\">2．verbose表示记录有用的信息, 但不像debug会记录那么多</span><br><span class=\"line\">3．notice表示普通的verbose，常用于生产环境</span><br><span class=\"line\">4．warning 表示只有非常重要或者严重的信息会记录到日志</span><br><span class=\"line\"></span><br><span class=\"line\">logfile /var/log/redis/redis.log</span><br><span class=\"line\">配置log文件地址,默认值为stdout。若后台模式会输出到/dev/null。</span><br><span class=\"line\"></span><br><span class=\"line\">databases 16</span><br><span class=\"line\">可用数据库数，默认值为16，默认数据库为0，数据库范围在0~15之间切换，彼此隔离。</span><br><span class=\"line\"></span><br><span class=\"line\">save</span><br><span class=\"line\">保存数据到磁盘，格式为save，指出在多长时间内，有多少次更新操作，就将数据同步到数据文件rdb。相当于条件触发抓取快照，这个可以多个条件配合。 </span><br><span class=\"line\"></span><br><span class=\"line\"> save 900 1 -- 900秒之内有1个keys发生变化时</span><br><span class=\"line\"> save 300 10 -- 300秒之内有10个keys发生变化时</span><br><span class=\"line\"> save 60 10000 -- 60秒之内有10000个keys发生变化时</span><br><span class=\"line\"></span><br><span class=\"line\">rdbcompression yes</span><br><span class=\"line\">存储至本地数据库时(持久化到rdb文件)是否压缩数据，默认为yes。</span><br><span class=\"line\"></span><br><span class=\"line\">dbfilename dump.rdb</span><br><span class=\"line\">本地持久化数据库文件名，默认值为dump.rdb。</span><br><span class=\"line\"></span><br><span class=\"line\">dir ./</span><br><span class=\"line\">工作目录，数据库镜像备份的文件放置的路径。这里的路径跟文件名要分开配置是因为redis在进行备份时，先会将当前数据库的状态写入到一个临时文件中，等备份完成时，再把该临时文件替换为上面所指定的文件。 而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中，AOF文件也会存放在这个目录下面。 注意这里必须指定一个目录而不是文件。</span><br><span class=\"line\"></span><br><span class=\"line\">slaveof</span><br><span class=\"line\">主从复制，设置该数据库为其他数据库的从数据库。设置当本机为slave服务时，设置master服务的IP地址及端口。 在redis启动时,它会自动从master进行数据同步。</span><br><span class=\"line\"></span><br><span class=\"line\">masterauth</span><br><span class=\"line\">当master服务设置了密码保护时(用requirepass制定的密码)slave服务连接master的密码。</span><br><span class=\"line\"></span><br><span class=\"line\">slave-serve-stale-data yes</span><br><span class=\"line\">当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：</span><br><span class=\"line\">如果slave-serve-stale-data设置为 yes(默认设置)，从库会继续相应客户端的请求。</span><br><span class=\"line\">如果slave-serve-stale-data是指为no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误&quot;SYNC with master in progress&quot;。</span><br><span class=\"line\"></span><br><span class=\"line\">repl-ping-slave-period 10</span><br><span class=\"line\">从库会按照一个时间间隔向主库发送PING，可以通过repl-ping-slave-period设置这个时间间隔,默认是10秒。</span><br><span class=\"line\"></span><br><span class=\"line\">repl-timeout 60</span><br><span class=\"line\">设置主库批量数据传输时间或者ping回复时间间隔，默认值是60秒，一定要确保repl-timeout大于repl-ping-slave-period。</span><br><span class=\"line\"></span><br><span class=\"line\">requirepass foobared</span><br><span class=\"line\">设置客户端连接后进行任何其他指定前需要使用的密码。因为redis速度相当快，所以在一台比较好的服务器平台下, 一个外部的用户可以在一秒钟进行150K次的密码尝试，这意味着你需要指定非常强大的密码来防止暴力破解。</span><br><span class=\"line\"></span><br><span class=\"line\">rename command CONFIG &quot;&quot;</span><br><span class=\"line\">命令重命名，在一个共享环境下可以重命名相对危险的命令，比如把CONFIG重名为一个不容易猜测的字符：</span><br><span class=\"line\">rename-command CONFIG  b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class=\"line\"></span><br><span class=\"line\">如果想删除一个命令，直接把它重命名为一个空字符&quot;&quot;即可：rename-command CONFIG &quot;&quot;。</span><br><span class=\"line\"></span><br><span class=\"line\">maxclients 128</span><br><span class=\"line\">设置同一时间最大客户端连接数，默认无限制。redis可以同时打开的客户端连接数为redis进程可以打开的最大文件描述符数。 </span><br><span class=\"line\"></span><br><span class=\"line\">如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，redis会关闭新的连接并向客户端返回max number of clients reached错误信息。</span><br><span class=\"line\"></span><br><span class=\"line\">maxmemory </span><br><span class=\"line\">指定redis最大内存限制。redis在启动时会把数据加载到内存中，达到最大内存后，redis会先尝试清除已到期或即将到期的key，redis同时也会移除空的list对象。当此方法处理后,仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。</span><br><span class=\"line\"></span><br><span class=\"line\">注意：redis新的vm机制，会把key存放内存，value会存放在swap区。</span><br><span class=\"line\"></span><br><span class=\"line\">maxmemory-policy volatile-lru</span><br><span class=\"line\">当内存达到最大值的时候redis会选择删除哪些数据呢？有五种方式可供选择：</span><br><span class=\"line\">1．volatile-lru代表利用LRU算法移除设置过期时间的key(LRU：最近使用LeastRecentlyUsed)</span><br><span class=\"line\">2．allkeys-lru代表利用LRU算法移除任何key</span><br><span class=\"line\">3．volatile-random代表移除设置过过期时间的随机key</span><br><span class=\"line\">4．allkeys_random代表移除一个随机的key</span><br><span class=\"line\">5． volatile-ttl代表移除即将过期的key(minor TTL)</span><br><span class=\"line\">6． noeviction代表不移除任何key，只是返回一个写错误</span><br><span class=\"line\"></span><br><span class=\"line\">注意：对于上面的策略，如果没有合适的key可以移除，写的时候redis会返回一个错误。</span><br><span class=\"line\"></span><br><span class=\"line\">appendonly no</span><br><span class=\"line\">默认情况下，redis会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁。 如果发生诸如拉闸限电、拔插头等状况，那么将造成比较大范围的数据丢失，所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式。</span><br><span class=\"line\"></span><br><span class=\"line\">开启append only模式之后，redis会把所接收到的每一次写操作请求都追加到appendonly. aof文件中。当redis重新启动时，会从该文件恢复出之前的状态，但是这样会造成appendonly. aof文件过大，所以redis还支持BGREWRITEAOF指令对appendonly.aof。</span><br><span class=\"line\"></span><br><span class=\"line\">appendfilename appendonly.aof</span><br><span class=\"line\">AOF文件名称，默认为&quot;appendonly.aof&quot;。</span><br><span class=\"line\"></span><br><span class=\"line\">appendfsync everysec</span><br><span class=\"line\">redis支持三种同步AOF文件的策略：</span><br><span class=\"line\">1．no代表不进行同步,系统去操作</span><br><span class=\"line\">2．always代表每次有写操作都进行同步</span><br><span class=\"line\">3．everysec代表对写操作进行累积，每秒同步一次，默认是&quot;everysec&quot;，按照速度和安全折中这是最好的</span><br><span class=\"line\"></span><br><span class=\"line\">slowlog-log-slower-than 10000</span><br><span class=\"line\">记录超过特定执行时间的命令。执行时间不包括I/O计算，比如连接客户端，返回结果等。只是命令执行时间，可以通过两个参数设置slow log：一个是告诉Redis执行超过多少时间被记录的参数slowlog-log-slower-than(微妙)，另一个是slow log 的长度。</span><br><span class=\"line\"></span><br><span class=\"line\">当一个新命令被记录的时候最早的命令将被从队列中移除，下面的时间以微妙微单位，因此1000000代表一分钟。注意制定一个负数将关闭慢日志，而设置为0将强制每个命令都会记录。</span><br><span class=\"line\"></span><br><span class=\"line\">hash-max-zipmap-entries 512 &amp;&amp; hash-maxz-ipmap-value 64</span><br><span class=\"line\">当hash中包含超过指定元素个数并且最大的元素没有超过临界时，hash将以一种特殊的编码方式(大大减少内存使用)来存储，这里可以设置这两个临界值。Redis Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现。这个Hash的成员比较少时redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap。当成员数量增大时会自动转成真正的HashMap，此时encoding为ht。</span><br><span class=\"line\"></span><br><span class=\"line\">hash-max-zipmap-entries 512 512</span><br><span class=\"line\">list数据类型多少节点以下会采用去指针的紧凑存储格式。</span><br><span class=\"line\"></span><br><span class=\"line\">list-max-ziplist-value 64</span><br><span class=\"line\">数据类型节点值大小小于多少字节会采用紧凑存储格式。</span><br><span class=\"line\"></span><br><span class=\"line\">setmaxintsetentries 512</span><br><span class=\"line\">set数据类型内部数据如果全部是数值型,且包含多少节点以下会采用紧凑格式存储。</span><br><span class=\"line\"></span><br><span class=\"line\">zsetmaxziplistentries 128</span><br><span class=\"line\">zsort数据类型多少节点以下会采用去指针的紧凑存储格式。</span><br><span class=\"line\"></span><br><span class=\"line\">zsetmaxziplistvalue 64</span><br><span class=\"line\">zsort数据类型节点值大小小于多少字节会采用紧凑存储格式。</span><br><span class=\"line\"></span><br><span class=\"line\">activerehashing yes</span><br><span class=\"line\">redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。 </span><br><span class=\"line\"></span><br><span class=\"line\">当你的使用场景中，有非常严格的实时性需要，不能够接受redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">#设置密码</span></span><br><span class=\"line\">\t\t\tconfig set requirepass 密码</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">#用密码登录</span></span><br><span class=\"line\">\t\t\tauth 密码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis-可视化工具\"><a href=\"#redis-可视化工具\" class=\"headerlink\" title=\"redis 可视化工具\"></a>redis 可视化工具</h3><p>Mac版 <code>https://www.macwk.com/soft/redis-desktop-manager</code> </p>\n<h3 id=\"redis-启动服务\"><a href=\"#redis-启动服务\" class=\"headerlink\" title=\"redis 启动服务\"></a>redis 启动服务</h3><h4 id=\"启动server\"><a href=\"#启动server\" class=\"headerlink\" title=\"启动server\"></a>启动server</h4><p><code>redis-server</code></p>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshkkun5znj31cw0u0gw6.jpg\" alt=\"image-20210715132834049\" style=\"zoom:67%;\" />\n\n<h4 id=\"也可以指定配置文件启动\"><a href=\"#也可以指定配置文件启动\" class=\"headerlink\" title=\"也可以指定配置文件启动\"></a>也可以指定配置文件启动</h4><p><code>redis-server ./redis.conf</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshkqhqqt0j31mm06awhp.jpg\" alt=\"image-20210715133359786\"></p>\n<h4 id=\"打开就客户端连接服务器\"><a href=\"#打开就客户端连接服务器\" class=\"headerlink\" title=\"打开就客户端连接服务器\"></a>打开就客户端连接服务器</h4><p><code>redis-cli</code></p>\n<h4 id=\"也可以远程连接，前提是配置过redis-conf-并以这个配置文件启动\"><a href=\"#也可以远程连接，前提是配置过redis-conf-并以这个配置文件启动\" class=\"headerlink\" title=\"也可以远程连接，前提是配置过redis.conf,并以这个配置文件启动\"></a>也可以远程连接，前提是配置过redis.conf,并以这个配置文件启动</h4><p><code>redis-cli -h 192.168.33.33 -p 8899</code></p>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshmmlan8uj319g08qt9u.jpg\" alt=\"远程连接redis server ，关闭保护模式\" style=\"zoom:67%;\" />\n\n<h3 id=\"redis-数据类型\"><a href=\"#redis-数据类型\" class=\"headerlink\" title=\"redis 数据类型\"></a>redis 数据类型</h3><table>\n<thead>\n<tr>\n<th>redis数据类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>list</td>\n<td>列表</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>字典</td>\n</tr>\n<tr>\n<td>set</td>\n<td>集合</td>\n</tr>\n<tr>\n<td>sorted set</td>\n<td>有序集合</td>\n</tr>\n<tr>\n<td>pub/sub</td>\n<td>订阅</td>\n</tr>\n<tr>\n<td>transactions</td>\n<td>事务</td>\n</tr>\n</tbody></table>\n<a class=\"btn-beautify button--animated \" href=\"http://redis.cn/commands.html\" \n  title=\"数据类型相关操作指令参考文档\"><i class=\"far fa-hand-point-right\"></i><span>数据类型相关操作指令参考文档</span></a>\n\n<a class=\"btn-beautify button--animated \" href=\"http://doc.redisfans.com\" \n  title=\"命令速查\"><i class=\"far fa-hand-point-right\"></i><span>命令速查</span></a>\n\n<h4 id=\"key的操作\"><a href=\"#key的操作\" class=\"headerlink\" title=\"key的操作\"></a>key的操作</h4><blockquote>\n<p>DBSIZE     key的个数</p>\n<p>FIUSHDB   删当前库</p>\n<p>FLUSHALL  删所有库</p>\n<p>keys pattern  查找所有符合给定模式pattern （正则表达式）的key</p>\n<p>keys *  所有的key</p>\n<p>exists key 存在返回 1 ，不存在返回 0</p>\n<p>del key 删除对应的key值</p>\n<p>type key 返回key对应value值的数据类型</p>\n<p>expire key seconds     seconds 秒后key自动删除</p>\n<p>TTL key 查看key剩余的时间,-1 表示永不过期</p>\n<p>persist key 清除生存时间</p>\n<p>pexpire key milliseconds 设置生存时间为x x x毫秒</p>\n<p>rename key newkey key的重命名</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshnaa0m88j30vs0k0n0o.jpg\" alt=\"image-20210715150212683\" style=\"zoom:50%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsi2qw1uc4j30s60i075x.jpg\" alt=\"image-20210715235709133\" style=\"zoom:50%;\" />\n\n<h4 id=\"string-字符串\"><a href=\"#string-字符串\" class=\"headerlink\" title=\"string 字符串\"></a>string 字符串</h4><ul>\n<li>string是简单的key-value 的类型，value不仅是string，也可以是数字。</li>\n<li>string是二进制安全的，可以包含任意的数据类型，string 可以看作是byte 数组，上限为1G字节。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redis_string</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> len;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>len 数组buf的长度</li>\n<li>free 数组中可用的字节数</li>\n<li>buf char类型数组，用于存储实际的字符串内容</li>\n</ul>\n<blockquote>\n<p>set key value 设置key对应的值为string类型的value</p>\n<p>get key 获取key对应的value值，key不存在返回nil</p>\n<p>append key value</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshn46bfldj30pu0as75s.jpg\" alt=\"image-20210715145620961\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>setnx key value   key存在什么也不做，key不存在，相当于set</p>\n<p>msetnx key1 value1 key2 value2 有一个存在就不成功</p>\n<p>setex key seconds value 设置key对应字符串value，并且设置key在给定的seconds时间之后超时过期</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshngy25itj30us0j8q6e.jpg\" alt=\"image-20210715150837301\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>setrange key offset value  覆盖key对应的string的一部分，从指定的offset处开始，覆盖value的长度。如果offset比当前key对应string还要长，那这个string后面就补0以达到offset。</p>\n<p>incr key 1</p>\n<p>incrby  key 3  一次性加3</p>\n<p>dear key 1   </p>\n<p>nearby key 3</p>\n<p>setrange  key 0  10 从头开始，前两个字符设置为10</p>\n<p>getrange key start end 获取头到尾的字符</p>\n</blockquote>\n<img src=\"/Users/sunguosheng/Library/Application%20Support/typora-user-images/image-20210715153432030.png\" alt=\"image-20210715153432030\" style=\"zoom: 50%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsho8vjd4pj30ym0dmwh1.jpg\" alt=\"image-20210715153527907\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>批量的存取         </p>\n<p>mset key1 value1 key2 value2</p>\n<p>mget key1 key2 key3           </p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshodd5w2sj317m08yq4j.jpg\" alt=\"image-20210715153946272\" style=\"zoom:50%;\" />\n\n<h3 id=\"list-列表\"><a href=\"#list-列表\" class=\"headerlink\" title=\"list 列表\"></a>list 列表</h3><ul>\n<li>本质双端链表</li>\n<li>我们可以轻松地实现最新消息排行等功能(比如新浪微博的TimeLine )。List 的另一个应用就是消息队列，可以利用List的 PUSH操作，将任务存在List中，然后工作线程再用POP操作将任务取出进行执行。</li>\n</ul>\n<blockquote>\n<p>lpush key value1 value2 value3 (每次从左面插入新的value)</p>\n<p>lpushx key value1 value2 要求当且仅当key存在并且是一个列表</p>\n<p>lpop key 从左边移除第一个元素</p>\n<p>lrange key start stop 返回存储在key ,范围为start 到 stop 的所有元素，起始为0，最后为-1</p>\n<p>ltrim key start stop 让这个key对应的list只保留start到stop范围的元素  ，先截取再赋值</p>\n<p>lien key. 查看key 对应的value长度 </p>\n</blockquote>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshu2amclfj31jm0p6ju0.jpg\" alt=\"image-20210715185643622\"></p>\n<blockquote>\n<p>list 可以从右端进行插入</p>\n<p>rpush key value1 value2</p>\n<p>rpop key</p>\n<p>可以利用list来模拟栈和队列</p>\n<p>队列，尾入，头出</p>\n<p>rpush        lpop</p>\n<p>栈</p>\n<p>lpush  lpop 或者 rpush rpop             </p>\n</blockquote>\n<h3 id=\"set-无序集合\"><a href=\"#set-无序集合\" class=\"headerlink\" title=\"set 无序集合\"></a>set 无序集合</h3><ul>\n<li>集合指一堆不重复值的组合</li>\n<li>redis为集合提供了求交集和并集，差集的操作</li>\n<li>比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。因为 Redis 非常人性化的为集合提供了求交集、并集、差集等操作，那么就可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</li>\n</ul>\n<blockquote>\n<p>sadd key member1 member2 member3 添加一个或者多个member到集合key中</p>\n<p>smembers key 返回key集合所有的元素</p>\n<p>srem key member 删除key集合中指定的元素        </p>\n<p>SRANDMEMBER key num key中随机num个</p>\n<p>spop key 随机出</p>\n<p>smove source dest num</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshvsft7vlj312y0hugn0.jpg\" alt=\"image-20210715195627033\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>sinter key1 key2 key3   求集合的交集</p>\n<p>sunionstore dest key1 key2 返回给定的多个集合的并集中的所有成员，将结果存储destination集合</p>\n<p>sunion key1 key2 求并集</p>\n<p>sdiff key1 key2 求差集（A-B 和 B-A 是不一样的）    </p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw0ncqp9j317m0u0q4z.jpg\" alt=\"image-20210715200420420\" style=\"zoom:67%;\" />\n\n<h3 id=\"sorted-set-有序集合\"><a href=\"#sorted-set-有序集合\" class=\"headerlink\" title=\"sorted set 有序集合\"></a>sorted set 有序集合</h3><ul>\n<li>在set的基础上加了一个权重参数 score，排序的依据就是这个score</li>\n<li>比如一个存储全班同学成绩的 Sorted Sets，其集合 value 可以是同学的学号，而 score 就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。另外还可以用 Sorted Sets 来做带权重的队列，比如普通消息的 score 为1，重要消息的score 为2，然后工作线程可以选择按 score 的倒序来获取工作任务，让重要的任务优先执行。</li>\n</ul>\n<blockquote>\n<p>zadd key score1 member1 score2 member2 score3 member3</p>\n<p>zrange key start stop withscores 从小到大</p>\n<p>zrevrange key start stop withscores  从大到小       </p>\n<p>zrangebyscore key start_score end_score 筛选出start_score 到end_score 的value</p>\n<p>ZRANGEBYSCORE zset01 (20 (60     大于20小于60</p>\n<p>ZRANGEBYSCORE zset01 (20 (60 limit 2 1  大于20小于60的结果集从第三个开始取一个</p>\n<p>ZREM zset01 v1 删除zset01中的v1</p>\n<p>ZCOUNT zset01 60 80 取分数再60-80的值的个数</p>\n<p>ZRANK zset01 v4 取V4在zset01中的下标</p>\n<p>ZREVRANK zset01 v4  取V4在zset01中的逆序下标</p>\n<p>ZSCORE zset01 v4 取v4 对应的分数</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw8ayij0j31au0e2q49.jpg\" alt=\"image-20210715201142224\" style=\"zoom:80%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshw8wfnrfj310209odgd.jpg\" alt=\"image-20210715201216665\" style=\"zoom: 50%;\" />\n\n<h3 id=\"hash-字典\"><a href=\"#hash-字典\" class=\"headerlink\" title=\"hash 字典\"></a>hash 字典</h3><ul>\n<li>键值key 对应的是 field字段名称  value 字段值的结合(也就是还是一个键值对)</li>\n</ul>\n<blockquote>\n<p>hset key field value 设置key指定的哈希集中的字段和字段值</p>\n<p>hmset key field1 value1 field2 value2</p>\n<p>hget key field key键值里面field 字段对应的字段值</p>\n<p>hmget key field1 field2</p>\n<p>hgetall key  获取所有的字段和字段值 ，注意和HVALS key —&gt;只获取所有的字段值，不获取对应的字段</p>\n<p>hkeys key 返回 key 指定的哈希集中所有字段的名字</p>\n<p>hdel key field 删除key指定的哈希集中字段为field的字段</p>\n<p>hlen key 返回key指定的哈希集中字段的数量          </p>\n<p>hexists key field  判断对应的字段值是否存在</p>\n<p>HVALS key 取所有的字段值</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshwrfu84wj31el0u042h.jpg\" alt=\"image-20210715203005524\" style=\"zoom:80%;\" />   \n\n<h3 id=\"pub-sub-发布-订阅\"><a href=\"#pub-sub-发布-订阅\" class=\"headerlink\" title=\"pub/sub 发布/订阅\"></a>pub/sub 发布/订阅</h3><ul>\n<li>Pub/Sub 从字面上理解就是发布(Publish)与订阅(Subscribe)。发件人(在 Redis 中的术语称为发布者)发送邮件，而接收器(订户)接收它们。信息传输的链路称为通道。Redis 一个客户端可以订阅任意数量的通道。</li>\n<li>在 Redis 中，你可以设定对某一个key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天、群聊等功能。</li>\n</ul>\n<blockquote>\n<p>subscribe channel 订阅给指定频道的信息。一旦客户端进入订阅状态，客户端就只可接受订阅相关的命令。</p>\n<p>publish channel message 将信息 message 发送到指定的频道 channel。     </p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshx0letjij313808k3zb.jpg\" alt=\"image-20210715203853735\" style=\"zoom:67%;\" />\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshx0zg4q5j30zk0gsabd.jpg\" alt=\"image-20210715203915977\" style=\"zoom:67%;\" />\n\n<h3 id=\"transactions-事务\"><a href=\"#transactions-事务\" class=\"headerlink\" title=\"transactions 事务\"></a>transactions 事务</h3><ul>\n<li>事务允许一组命令在单一步骤中执行，也就是一组命令的集合，也就是一次性批处理</li>\n<li>redis 事务具有原子性，所有命令要么都执行，要么都不执行</li>\n<li>事务中的所有命令作为单个独立的操作  顺序执行</li>\n<li>一个队列中，一次性的，顺序性的，拍他性的执行一组命令</li>\n<li>redis的事务性是部分的，在一些情况下是不保证完整性的，下面的后两种状态就显示出来了这个特点</li>\n</ul>\n<blockquote>\n<p>multi 标记事务的开始</p>\n<p>exec 执行事务中排队等待的指令并将链接状态恢复正常</p>\n<p>discard 放弃本次的批处理操作</p>\n<p>watch 监视一个或者多个key(这个类似于乐观锁，当中间有人修改之后，就会报错；需要重新 unwatch ，拿下数据，再去操作)</p>\n<p>unwatch 取消对所有key的监控         </p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshxa004egj315t0u0jtv.jpg\" alt=\"image-20210715204755336\" style=\"zoom:80%;\" />\n\n<h4 id=\"事务的几种状态\"><a href=\"#事务的几种状态\" class=\"headerlink\" title=\"事务的几种状态\"></a>事务的几种状态</h4><ul>\n<li>全部执行成功，每一条命令都入队，然后执行.       </li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt79wxeiomj30he0ie0tu.jpg\" alt=\"image-20210806190413020\" style=\"zoom:33%;\" />\n\n<ul>\n<li>放弃事务           </li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt79yhuny7j30is0d0dgq.jpg\" alt=\"image-20210806190546419\" style=\"zoom:33%;\" />\n\n\n\n<ul>\n<li>有一个错误，全部就丢失，这个类似于 编译时的报错</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt7a0oihjsj319o0agt9u.jpg\" alt=\"image-20210806190752712\" style=\"zoom:33%;\" />\n\n<ul>\n<li>那个错误就找错误的那个，其余的能执行成功（这个类似于运行时的错误）</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt7aq93i4mj30z00i00u8.jpg\" alt=\"image-20210806193226867\" style=\"zoom:33%;\" />\n\n<h4 id=\"redis的主从复制\"><a href=\"#redis的主从复制\" class=\"headerlink\" title=\"redis的主从复制\"></a>redis的主从复制</h4><ul>\n<li>主机数据更新后，根据配置和策略自动同步到备机的master/slaver机制，Master主要为写，Slave以读为准</li>\n<li>主要干的事情就是 读写复制和容载备份</li>\n<li>怎么用<ul>\n<li>配从库不配主库 <code>slaveof 主库IP 主库PORT</code>，每次和<code>mastre</code>需要重新连接</li>\n<li>修改配置文件中的端口，log目录，rdb 文件名，对应端口，用来做区分</li>\n<li><code>slaveof ip port</code>后，从机会复制主机所有的内容；只有主机可以写的，从机只能读；当主机宕机后，从机不会变成主机，主机重新启动之后，会继续当主机的身份</li>\n<li><code>info repcalition</code> 查看机器<code>replication</code>信息，需要关注<code>role</code>字段值</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"一主二仆\"><a href=\"#一主二仆\" class=\"headerlink\" title=\"一主二仆\"></a>一主二仆</h4><ul>\n<li>init.        </li>\n</ul>\n <img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gntzmm3j311w0fa0xe.jpg\" alt=\"image-20210807194315072\" style=\"zoom:50%;\" />\n\n<ul>\n<li>一个Master ，两个Slaves</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8goh2xbjj61280i6aff02.jpg\" alt=\"image-20210807194354594\" style=\"zoom:50%;\" />\n\n<ul>\n<li>主机日志需要关注的点</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gpj0np5j31140d676p.jpg\" alt=\"image-20210807194454785\" style=\"zoom:50%;\" />\n\n<ul>\n<li>备机日志需要关注的点</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8gq08fggj311i0bk40i.jpg\" alt=\"image-20210807194522564\" style=\"zoom:50%;\" />\n\n<ul>\n<li>几个需要关注的问题<ul>\n<li>切入点问题？slave1，slave2 是从头开始备份，还是从切入点开始复制？<ul>\n<li>–》从头开始复制</li>\n</ul>\n</li>\n<li>从机是否可写？<ul>\n<li>–》主机可写，从机不可写</li>\n</ul>\n</li>\n<li>主机shutdown后，从机是变成主机还是原地等待主机？<ul>\n<li>从机原地等待</li>\n</ul>\n</li>\n<li>主机又回来后，主机新增的记录，从机是否可以顺利的复制？<ul>\n<li>从机可以自动与主机相连，也就可以自动同步主机新增的数据 。</li>\n</ul>\n</li>\n<li>如果slave与Master断开之后，后面还能跟上master的脚步吗？<ul>\n<li>slave与master断开之后，不会自动重新连接，需要配置进 <code>redis.conf ####REPLICATION####</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"薪火相传\"><a href=\"#薪火相传\" class=\"headerlink\" title=\"薪火相传\"></a>薪火相传</h4><ul>\n<li>去中心化的模式（减轻了master的负担），一个传递一个</li>\n<li>上一个的slave可以是下一个的master；中途方向变更后，会重新复制最新的数据</li>\n<li><code>slaveof ip port</code>            </li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gt8nk2kqy2j31gm0kyjvy.jpg\" alt=\"image-20210807234151934\" style=\"zoom:67%;\" />\n\n\n\n<h4 id=\"反客为主\"><a href=\"#反客为主\" class=\"headerlink\" title=\"反客为主\"></a>反客为主</h4><ul>\n<li><code>SLAVEOF no one</code>使当前数据库停止与其他数据库的同步，转成主数据库</li>\n</ul>\n<h4 id=\"复制的原理\"><a href=\"#复制的原理\" class=\"headerlink\" title=\"复制的原理\"></a>复制的原理</h4><ul>\n<li>slave连接到master后，会发出一个<code>sync</code>的命令</li>\n<li>master接收到命令会启动一个存盘进程，后台收集所有用于修改的命令，收集完毕后，会把整个数据传送给slave</li>\n<li>全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中</li>\n<li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</li>\n<li>只要是重新连接master，一次完全同步（全量复制)将被自动执行</li>\n</ul>\n<h4 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h4><ul>\n<li>一组sentinel能同时监控多个master</li>\n<li>反客为主的自动版，能够监控主机是否故障，故障之后按照投票数将从库变为主库</li>\n<li>设置<ul>\n<li>调整结构，一个主库带着两个从库</li>\n<li>新建<code>sentinel.conf</code>文件，名字绝不能错</li>\n<li>配置哨兵<ul>\n<li><code>sentinel monitor 被监控的数据库名字（自己起）监控的库ip 监控的库port  1（要大于的票数）</code></li>\n<li>新恢复的master就变成了slave，也就是master已经易主了</li>\n</ul>\n</li>\n<li>启动哨兵 <code>redis-sentinel /sentinel.conf</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"复制的缺点\"><a href=\"#复制的缺点\" class=\"headerlink\" title=\"复制的缺点\"></a>复制的缺点</h4><ul>\n<li>master到slave会有一些延迟，在业务繁忙的时候就会有更多的延迟</li>\n</ul>\n<h3 id=\"redis-持久化\"><a href=\"#redis-持久化\" class=\"headerlink\" title=\"redis 持久化\"></a>redis 持久化</h3><h4 id=\"备份数据\"><a href=\"#备份数据\" class=\"headerlink\" title=\"备份数据\"></a>备份数据</h4><ul>\n<li><code>save</code>命令即可创建当前redis 的数据的备份，成功之后，会在服务器启动的目录生成对应的dump.rdb文件，文件名和文件路径都可以进行修改，在配置文件中可以设置对应的属性值，可以用 <code>CONFIG GET dir</code>命令张查看redis的启动目录</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshydgo13pj31110u0go0.jpg\" alt=\"image-20210715212551022\" style=\"zoom:67%;\" />\n\n<ul>\n<li>会在对应目录 生成dump.rdb</li>\n</ul>\n<h4 id=\"数据恢复\"><a href=\"#数据恢复\" class=\"headerlink\" title=\"数据恢复\"></a>数据恢复</h4><ul>\n<li>redis 启动的时候会自动加载备份文件</li>\n</ul>\n<h4 id=\"RDB-redia-database-持久化方式-（默认）\"><a href=\"#RDB-redia-database-持久化方式-（默认）\" class=\"headerlink\" title=\"RDB(redia database)持久化方式 （默认）\"></a>RDB(redia database)持久化方式 （默认）</h4><ul>\n<li>通过快照完成，dump.rdb 文件里面放的是真实的数据，也就是将内存中所有的数据进行快照到硬盘上面</li>\n<li>快照的频率在 redis.conf 配置文件里面</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshyjbl1dkj31e90u0gpv.jpg\" alt=\"image-20210715213128304\" style=\"zoom:80%;\" />\n\n<ul>\n<li>多个频率设定的条件，只要有一个满足就会备份</li>\n<li>如果不想备份，注释掉 save的参数</li>\n<li>备份的文件名子和路径可以通过 dir 和 dbfilename 参数设定</li>\n<li>FLUSHALL 都会触发RDB的备份,但是产生的dump.rdb 文件是空的</li>\n</ul>\n<blockquote>\n<p>redis实现快照的过程：</p>\n<p>redis使用fork函数复制一份当前进程(父进程)的副本(子进程)，父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入硬盘中的临时文件，当子进程写入完所有数据后会用该临时文件替换旧的RDB文件，至此一次快照操作完成。在执行fork的时候操作系统(类Unix操作系统)会使用写时复制(copy-on-write)策略，即fork函数发生的一刻父子进程共享同一内存数据，当父进程要更改其中某片数据时(如执行一个写命令)，操作系统会将该片数据复制一份以保证子进程的数据不受影响，所以新的RDB文件存储的是执行fork一刻的内存数据。</p>\n<p>redis在进行快照的过程中不会修改RDB文件，只有快照结束后才会将旧的文件替换成新的，也就是说任何时候RDB文件都是完整的。这使得我们可以通过定时备份RDB文件来实现redis数据库备份。RDB文件是经过压缩(可以配置rdbcompression参数以禁用压缩节省CPU占用)的二进制格式，所以占用的空间会小于内存中的数据大小，更加利于传输。</p>\n<p>除了自动快照，还可以手动发送SAVE或BGSAVE命令让redis执行快照，两个命令的区别在于，前者是由主进程进行快照操作, 会阻塞住其他请求，后者会通过fork子进程进行快照操作。</p>\n<p>redis启动后会读取RDB快照文件，将数据从硬盘载入到内存。根据数据量大小与结构和服务器性能不同，这个时间也不同。通常将一个记录一千万个字符串类型键、大小为1GB的快照文件载入到内存中需要花费20~30秒钟。</p>\n<p>通过RDB方式实现持久化，一旦redis异常退出，就会丢失最后一次快照以后更改的所有数据。这就需要开发者根据具体的应用场合，通过组合设置自动快照条件的方式来将可能发生的数据损失控制在能够接受的范围。如果数据很重要以至于无法承受任何损失，则可以考虑使用AOF方式进行持久化.              </p>\n</blockquote>\n<h4 id=\"AOF-Append-only-file-数据持久化\"><a href=\"#AOF-Append-only-file-数据持久化\" class=\"headerlink\" title=\"AOF(Append only file) 数据持久化\"></a>AOF(Append only file) 数据持久化</h4><ul>\n<li><p>默认没有开启AOF方式</p>\n</li>\n<li><p><code>appendonly yes</code> 开启AOF 方式备份 </p>\n</li>\n<li><p>AOF方式会把执行的每一条命令写指令存进磁盘；恢复的时候，会执行命令，恢复数据。</p>\n</li>\n<li><p>恢复的时候却需要先执行命令，才会恢复数据，相比RDB比较费时间</p>\n</li>\n<li><p>AOF 文件名设定</p>\n</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshyw95f1mj31a408ugmh.jpg\" alt=\"image-20210715214354527\"></p>\n<ul>\n<li>刷新硬盘缓存频率</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshywmog4oj30wy08uq3j.jpg\" alt=\"image-20210715214416705\"></p>\n<ul>\n<li><p>自动重写的条件</p>\n<ul>\n<li><p>当AOF文件大小是上次rewrite大小的一倍且文件大于64M时就会重写</p>\n</li>\n<li><p>rewrite 重写机制，就优化命令，减下磁盘占用</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gshyxi13icj616206i74n02.jpg\" alt=\"image-20210715214507252\"></p>\n<h4 id=\"AOF-和-RDB共存的问题\"><a href=\"#AOF-和-RDB共存的问题\" class=\"headerlink\" title=\"AOF 和 RDB共存的问题\"></a>AOF 和 RDB共存的问题</h4><ul>\n<li>AOF和RDB会共存</li>\n<li>先去加载的是 AOF，当AOF中有错误的时候，<code>redis-server</code>会启动失败，需要修复AOF文件，使用redis 带的修复工具进行修复 <code>redis-check-aof --fix xxx.aof</code></li>\n</ul>\n<h4 id=\"AOF-和-RDB-对比\"><a href=\"#AOF-和-RDB-对比\" class=\"headerlink\" title=\"AOF 和 RDB 对比\"></a>AOF 和 RDB 对比</h4><ul>\n<li>AOF<ul>\n<li>优点：备份数据较完成，最多丢失2秒的数据</li>\n<li>缺点：磁盘占用较大和恢复较慢</li>\n</ul>\n</li>\n<li>RDB<ul>\n<li>优点：恢复数据较快</li>\n<li>缺点：备份频率不容易控制，会丢失最后一次的RDB之后的数据</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"redis-客户端编程\"><a href=\"#redis-客户端编程\" class=\"headerlink\" title=\"redis 客户端编程\"></a>redis 客户端编程</h3><a class=\"btn-beautify button--animated \" href=\"https://github.com/redis/hiredis\" \n  title=\"下载地址\"><i class=\"far fa-hand-point-rigth\"></i><span>下载地址</span></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make </span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"API-说明\"><a href=\"#API-说明\" class=\"headerlink\" title=\"API 说明\"></a>API 说明</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">redisContext *<span class=\"title\">redisConnect</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ip,<span class=\"keyword\">int</span> port)</span></span></span><br><span class=\"line\"><span class=\"function\">功能：连接redis数据库</span></span><br><span class=\"line\"><span class=\"function\">参数：IP 和 port</span></span><br><span class=\"line\"><span class=\"function\">返回值： 成功：redisContext 指针 ；失败 <span class=\"literal\">NULL</span></span></span><br><span class=\"line\"><span class=\"function\">---------------------------</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">redisCommand</span><span class=\"params\">(redisContext *c,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * formate,...)</span></span></span><br><span class=\"line\"><span class=\"function\">功能：执行命令</span></span><br><span class=\"line\"><span class=\"function\">参数：redisConnect的返回值</span></span><br><span class=\"line\"><span class=\"function\">  \t命令......</span></span><br><span class=\"line\"><span class=\"function\">返回值： 成功：<span class=\"keyword\">void</span> *,会转换成redisReply类型 ；失败 <span class=\"literal\">NULL</span></span></span><br><span class=\"line\"><span class=\"function\">  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> struct redisReply </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> type; <span class=\"comment\">/* REDIS_REPLY_* */</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> integer; <span class=\"comment\">/* The integer when type is REDIS_REPLY_INTEGER */</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> len; <span class=\"comment\">/* Length of string */</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *str; <span class=\"comment\">/* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING */</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> elements; <span class=\"comment\">/* number of elements, for REDIS_REPLY_ARRAY */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redisReply</span> **<span class=\"title\">element</span>;</span> <span class=\"comment\">/* elements vector for REDIS_REPLY_ARRAY */</span></span><br><span class=\"line\">&#125; redisReply;</span><br><span class=\"line\">---------------------------</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeReplyObject</span><span class=\"params\">(<span class=\"keyword\">void</span> *reply)</span></span>;</span><br><span class=\"line\">功能：释放redisCommand执行后返回的redisReply所占用的内存</span><br><span class=\"line\">参数：redisCommand执行后返回的redisReply</span><br><span class=\"line\">返回值：无</span><br><span class=\"line\">---------------------------</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">redisFree</span><span class=\"params\">(redisContext *c)</span></span>;</span><br><span class=\"line\">功能：释放redisConnect()所产生的连接</span><br><span class=\"line\">参数：redisConnect()所产生的连接</span><br><span class=\"line\">返回值：无</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>redisReply -&gt;type 中字段的标识 </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态标识</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REDIS_REPLY_STATUS</td>\n<td>表示状态，内容通过str字段查看，字符串长度是len字段</td>\n</tr>\n<tr>\n<td>REDIS_REPLY_ERROR</td>\n<td>表示出错，查看出错信息，如上的str，len字段</td>\n</tr>\n<tr>\n<td>REDIS_REPLY_INTEGER</td>\n<td>返回整数，从integer字段获取值</td>\n</tr>\n<tr>\n<td>REDIS_REPLY_NIL</td>\n<td>没有数据返回</td>\n</tr>\n<tr>\n<td>REDIS_REPLY_STRING</td>\n<td>返回字符串，查看str，len字段</td>\n</tr>\n<tr>\n<td>REDIS_REPLY_ARRAY</td>\n<td>返回一个数组，查看elements的值(数组个数)，通过element[index] 的方式访问数组元素，每个数组元素是一个redisReply对象的指针。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>redisReply-&gt;errata 字段查看</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>错误状态标识</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REDIS_OK</td>\n<td>正常</td>\n</tr>\n<tr>\n<td>REDIS_ERR_IO</td>\n<td>IO读/写出现异常，通过errno查看原因</td>\n</tr>\n<tr>\n<td>REDIS_ERR_EOF</td>\n<td>服务器关闭了链接，读结束</td>\n</tr>\n<tr>\n<td>REDIS_ERR_PROTOCOL</td>\n<td>分析redis协议内容出错</td>\n</tr>\n<tr>\n<td>EDIS_ERR_OTHER</td>\n<td>其他未知的错误</td>\n</tr>\n</tbody></table>\n<h4 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;/usr/local/include/hiredis/hiredis.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IP <span class=\"meta-string\">&quot;10.211.55.11&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PORT 8899</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//port 8899 ip 10.211.55.11</span></span><br><span class=\"line\">    redisContext * c = redisConnect(IP,PORT);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c-&gt;err)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisFree(c);</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;connect redis server fail!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;connect redis server ok!&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//----------------</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * command1 = <span class=\"string\">&quot;set myname sungs&quot;</span>;</span><br><span class=\"line\">    redisReply * r = (redisReply*)redisCommand(c,command1);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisFree(c);</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;command1 error!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(r-&gt;type == REDIS_REPLY_STATUS &amp;&amp; strcasecmp(r-&gt;str,<span class=\"string\">&quot;ok&quot;</span>) == <span class=\"number\">0</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed to execute command[%s]\\n&quot;</span>,command1);</span><br><span class=\"line\">\t\tfreeReplyObject(r);</span><br><span class=\"line\">\t\tredisFree(c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    freeReplyObject(r);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Succeed to execute command[%s]\\n&quot;</span>, command1);</span><br><span class=\"line\"><span class=\"comment\">//-----------------</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *command2 = <span class=\"string\">&quot;strlen myname&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    r = (redisReply *)redisCommand(c,command2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisFree(c);</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;command2 error!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-&gt;type != REDIS_REPLY_INTEGER)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        freeReplyObject(r);</span><br><span class=\"line\">        redisFree(c);</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;REDIS_REPLY_INTEGE error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = r-&gt;integer;</span><br><span class=\"line\">    freeReplyObject(r);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Succeed to execute command[%s]---&gt;[%d]\\n&quot;</span>, command2,length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* command3 = <span class=\"string\">&quot;get myname&quot;</span>;</span><br><span class=\"line\">\tr = (redisReply*)redisCommand(c, command3);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( r-&gt;type != REDIS_REPLY_STRING)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed to execute command[%s]\\n&quot;</span>,command3);</span><br><span class=\"line\">\t\tfreeReplyObject(r);</span><br><span class=\"line\">\t\tredisFree(c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The value of &#x27;myname&#x27; is %s\\n&quot;</span>, r-&gt;str);</span><br><span class=\"line\">\tfreeReplyObject(r);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Succeed to execute command[%s]\\n&quot;</span>, command3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* command4 = <span class=\"string\">&quot;get key2&quot;</span>;</span><br><span class=\"line\">\tr = (redisReply*)redisCommand(c, command4);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( r-&gt;type == REDIS_REPLY_NIL)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed to execute command[%s]\\n&quot;</span>,command4);</span><br><span class=\"line\">\t\tfreeReplyObject(r);</span><br><span class=\"line\">\t\tredisFree(c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfreeReplyObject(r);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Succeed to execute command[%s]\\n&quot;</span>, command4);</span><br><span class=\"line\">\tredisFree(c);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tdoWork();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsi1mh7socj31bo0butak.jpg\" alt=\"image-20210715231818738\"></p>\n<h3 id=\"接口封装\"><a href=\"#接口封装\" class=\"headerlink\" title=\"接口封装\"></a>接口封装</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @file   redis_api.h</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis 封装接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _REDIS_OP_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _REDIS_OP_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;hiredis.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;make_log.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_LOG_MODULE          <span class=\"meta-string\">&quot;database&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_LOG_PROC            <span class=\"meta-string\">&quot;redis&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_COMMAND_SIZE        300            <span class=\"comment\">/* redis Command 指令最大长度 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FIELD_ID_SIZE            100            <span class=\"comment\">/* redis hash表field域字段长度 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VALUES_ID_SIZE           1024            <span class=\"comment\">/* redis        value域字段长度 */</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">char</span> <span class=\"params\">(*RCOMMANDS)</span>[REDIS_COMMAND_SIZE]</span>;<span class=\"comment\">/* redis 存放批量 命令字符串数组类型 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">char</span> <span class=\"params\">(*RFIELDS)</span>[FIELD_ID_SIZE]</span>;        <span class=\"comment\">/* redis hash表存放批量field字符串数组类型 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">char</span> <span class=\"params\">(*RVALUES)</span>[VALUES_ID_SIZE]</span>;    <span class=\"comment\">/* redis 表存放批量value字符串数组类型 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis tcp模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str\tredis服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str\tredis服务器port</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_nopwd</span><span class=\"params\">(<span class=\"keyword\">char</span> *ip_str, <span class=\"keyword\">char</span>* port_str)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis tcp模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str    redis服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str  redis服务器port</span></span><br><span class=\"line\"><span class=\"comment\"> * @param pwd       redis服务器密码</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *            失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb</span><span class=\"params\">(<span class=\"keyword\">char</span> *ip_str, <span class=\"keyword\">char</span>* port_str, <span class=\"keyword\">char</span> *pwd)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis unix域模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str    unix域sock文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  pwd      redis服务器密码</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *            失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_unix</span><span class=\"params\">(<span class=\"keyword\">char</span> *sock_path, <span class=\"keyword\">char</span> *pwd)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  tcp 链接redis超时等待模式，timeval链接超时</span></span><br><span class=\"line\"><span class=\"comment\"> *            返回</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str        redis 服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str        redis 服务器端口</span></span><br><span class=\"line\"><span class=\"comment\"> * @param timeval        最大超时等待时间</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *        成功返回链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *        失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_timeout</span><span class=\"params\">(<span class=\"keyword\">char</span>* ip_str, <span class=\"keyword\">char</span> *port_str, struct timeval *timeout)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  关闭指定的链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn    已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_disconnect</span><span class=\"params\">(redisContext* conn)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  选择redis中 其中一个数据库</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已链接的数据库链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param db_no        redis数据库编号</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            -1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *            0  成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_selectdatabase</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> db_no)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief            清空当前数据库所有信息(慎用)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已链接的数据库链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            -1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *            0  成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_flush_database</span><span class=\"params\">(redisContext *conn)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  判断key值是否存在</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        需要寻找的key值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *                -1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *                1 存在</span></span><br><span class=\"line\"><span class=\"comment\"> *                0 不存在</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_is_key_exist</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* key)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief            删除一个key</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        </span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *                -1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *                0 成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_del_key</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  打印库中所有匹配pattern的key</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param pattern    匹配模式，pattern支持glob-style的通配符格式，</span></span><br><span class=\"line\"><span class=\"comment\"> *                    如 *表示任意一个或多个字符，</span></span><br><span class=\"line\"><span class=\"comment\"> *                       ?表示任意字符，</span></span><br><span class=\"line\"><span class=\"comment\"> *                    [abc]表示方括号中任意一个字母。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_show_keys</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* pattern)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  设置一个key的删除时间 ，系统到达一定时间</span></span><br><span class=\"line\"><span class=\"comment\"> *            将会自动删除该KEY</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn                已经建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param delete_time        到期事件 time_t 日历时间</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *        0    SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *        -1  FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_set_key_lifecycle</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">time_t</span> delete_time)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief            创建或者覆盖一个HASH表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn                已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key                hash 表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param element_num        hash 表区域个数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param fields            hash 表区域名称数组char(*)[FIELD_ID_SIZE]</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values            hash 表区域值数组  char(*)[VALUES_ID_SIZE]</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0   成功    </span></span><br><span class=\"line\"><span class=\"comment\"> *            -1  失败</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_create_or_replace_hash_table</span><span class=\"params\">(redisContext* conn,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                     <span class=\"keyword\">char</span>* key, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                     <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> element_num, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                     RFIELDS fields, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                     RVALUES values)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  给指定的hash表 指定的field对应的value自增num</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t\thash表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field\t\t\thash表下的区域名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tfail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hincrement_one_field</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行链表插入命令 插入链表头部</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values    封装好的域名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values    封装好的值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num    值个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_set_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RFIELDS fields, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  想一个hash表中添加一条 key-value 数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn  redis连接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key   哈希表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_set</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">char</span> *value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  从一个hash表中取出一条 key-value 数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn  redis连接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key   哈希表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field 字段名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 得到的数据， 需要先开辟内存</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_get</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">char</span> *value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief        将指定的zset表，对应的成员，值自增1</span></span><br><span class=\"line\"><span class=\"comment\"> *                （key 或 成员不存在 则创建）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        zset表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param member    zset成员名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0            succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1            fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_increment</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* key, <span class=\"keyword\">char</span>* member)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//得到zset一个member的score</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_get_score</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *member)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief     批量将指定的zset表，对应的成员，值自增1</span></span><br><span class=\"line\"><span class=\"comment\"> *                （key 或 成员不存在 则创建）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        有序集合名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values    封装好的成员数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num    数据个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_increment_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行链表插入命令 插入链表头部</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values    封装好的值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num    值个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_list_push_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  单条数据插入链表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value        数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_list_push</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  得到链表中元素的个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn    链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key    链表名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            &gt;=0 个数</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1 fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_get_list_cnt</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  按照一定范围截断链表中的数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param begin        阶段启示位置 从 0 开始</span></span><br><span class=\"line\"><span class=\"comment\"> * @param end        阶段结束位置 从 -1 开始</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *                    这里的范围定义举例 </span></span><br><span class=\"line\"><span class=\"comment\"> *                    如果得到全部范围(0, -1)</span></span><br><span class=\"line\"><span class=\"comment\"> *                    除了最后一个元素范围(0, -2)</span></span><br><span class=\"line\"><span class=\"comment\"> *                    前20各数据范围(0, 19)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0  SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1 FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_trim_list</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">int</span> begin, <span class=\"keyword\">int</span> end)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief          得到链表中的数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0  SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1 FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_range_list</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">int</span> from_pos, <span class=\"keyword\">int</span> count, RVALUES values, <span class=\"keyword\">int</span> *get_num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行已经封装好的redis 命令</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmds        封装好的命令数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmd_num    命令个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_redis_append</span><span class=\"params\">(redisContext *conn, RCOMMANDS cmds, <span class=\"keyword\">int</span> cmd_num)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  执行单向命令 无返回值 命令自行输入</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn        已建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmd        封装好的命令</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_redis_command</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *cmd)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  测试一个reply的结果类型</span></span><br><span class=\"line\"><span class=\"comment\"> *            得到对应的类型用对应的方法获取数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param reply        返回的命令结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_test_reply_type</span><span class=\"params\">(redisReply *reply)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  设置key对应的值为string类型的value</span></span><br><span class=\"line\"><span class=\"comment\"> *            </span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn          已经建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        \tkey值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value         value值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *        0    SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *        -1  FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_set_string</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  获取key对应的value值</span></span><br><span class=\"line\"><span class=\"comment\"> *            </span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn          已经建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key        \tkey值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value         value值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *        0    SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *        -1  FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_get_string</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @file redis_op.c</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis 操作基本接口和key的操作实现</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;redis_op.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  选择redis一个数据库</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已链接的数据库链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param db_no\t\tredis数据库编号</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0  成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_selectdatabase</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> db_no)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 选择一个数据库 */</span></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;select %d&quot;</span>, db_no);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]Select database %d error!\\n&quot;</span>, db_no);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Select database %d error!%s\\n&quot;</span>, db_no, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+][GMS_REDIS]Select database %d SUCCESS!\\n&quot;</span>, db_no);</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]Select database %d SUCCESS!\\n&quot;</span>, db_no);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief\t\t\t清空当前数据库所有信息(慎用)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已链接的数据库链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0  成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_flush_database</span><span class=\"params\">(redisContext *conn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;\t</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;FLUSHDB&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]Clear all data error\\n&quot;</span>);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Clear all data error\\n&quot;</span>);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+][GMS_REDIS]Clear all data!!\\n&quot;</span>);</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Clear all data!!\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  判断key值是否存在</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t需要寻找的key值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t-1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t1 存在</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t0 不存在</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_is_key_exist</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;EXISTS %s&quot;</span>, key);</span><br><span class=\"line\">\t<span class=\"comment\">//rop_test_reply_type(reply);</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]is key exist get wrong type!\\n&quot;</span>);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]is key exist get wrong type! %s\\n&quot;</span>, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;integer == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">1</span>;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief\t\t\t删除一个key</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t-1 失败</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t0 成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_del_key</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;DEL %s&quot;</span>, key);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS] DEL key %s ERROR\\n&quot;</span>, key);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS] DEL key %s ERROR %s\\n&quot;</span>, key, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;integer &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  设置一个key的删除时间 ，系统到达一定时间</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t将会自动删除该KEY</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t\t\t已经建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param delete_time\t\t到期事件 time_t 日历时间</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t0\tSUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t-1  FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_set_key_lifecycle</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">time_t</span> delete_time)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;EXPIREAT %s %d&quot;</span>, key, delete_time);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]Set key:%s delete time ERROR!\\n&quot;</span>, key);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Set key:%s delete time ERROR! %s\\n&quot;</span>, key, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;integer == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 成功 */</span></span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 错误 */</span></span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tfreeReplyObject(reply);\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  打印库中所有匹配pattern的key</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param pattern\t匹配模式，pattern支持glob-style的通配符格式，</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t如 *表示任意一个或多个字符，</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t   ?表示任意字符，</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t    [abc]表示方括号中任意一个字母。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_show_keys</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* pattern)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;keys %s&quot;</span>, pattern);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_ARRAY) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]show all keys and data wrong type!\\n&quot;</span>);</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]show all keys and data wrong type! %s\\n&quot;</span>, conn-&gt;errstr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; reply-&gt;elements; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;======[%s]======\\n&quot;</span>, reply-&gt;element[i]-&gt;str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行已经封装好的redis 命令</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmds\t\t封装好的命令数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmd_num\t命令个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tFAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_redis_append</span><span class=\"params\">(redisContext *conn, RCOMMANDS cmds, <span class=\"keyword\">int</span> cmd_num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 批量插入命令到缓冲命令管道 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cmd_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisAppendCommand(conn, cmds[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]Append Command: %s ERROR!\\n&quot;</span>, cmds[i]);</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Append Command: %s ERROR! %s\\n&quot;</span>, cmds[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 提交命令 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cmd_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisGetReply(conn, (<span class=\"keyword\">void</span>**)&amp;reply);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;[-][GMS_REDIS]Commit Command:%s ERROR!\\n&quot;</span>, cmds[i]);</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Commit Command:%s ERROR! %s\\n&quot;</span>, cmds[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  执行单向命令 无返回值 命令自行输入</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param cmd\t\t封装好的命令</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tFAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_redis_command</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *cmd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, cmd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Command : %s ERROR!%s\\n&quot;</span>, cmd, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  测试一个reply的结果类型</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t得到对应的类型用对应的方法获取数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param reply\t\t返回的命令结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_test_reply_type</span><span class=\"params\">(redisReply *reply)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (reply-&gt;type) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_STATUS:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_STATUS=[string] use reply-&gt;str to get data, reply-&gt;len get data len\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_ERROR:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_ERROR=[string] use reply-&gt;str to get data, reply-&gt;len get date len\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_INTEGER:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_INTEGER=[long long] use reply-&gt;integer to get data\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_NIL:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_NIL=[] data not exist\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_ARRAY:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_ARRAY=[array] use reply-&gt;elements to get number of data, reply-&gt;element[index] to get (struct redisReply*) Object\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REDIS_REPLY_STRING:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[+][GMS_REDIS]=REDIS_REPLY_string=[string] use reply-&gt;str to get data, reply-&gt;len get data len\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Can&#x27;t parse this type\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis tcp模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str\tredis服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str\tredis服务器port</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_nopwd</span><span class=\"params\">(<span class=\"keyword\">char</span> *ip_str, <span class=\"keyword\">char</span>* port_str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tredisContext *conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">uint16_t</span> port = atoi(port_str);</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn = redisConnect(ip_str, port);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn  == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:Can&#x27;t allocate redis context!\\n&quot;</span>, ip_str, port);\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn-&gt;err) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:%s\\n&quot;</span>, ip_str, port, conn-&gt;errstr);\t</span><br><span class=\"line\">\t\tredisFree(conn);</span><br><span class=\"line\">\t\tconn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n&quot;</span>, ip_str, port);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis tcp模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str\tredis服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str\tredis服务器port</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb</span><span class=\"params\">(<span class=\"keyword\">char</span> *ip_str, <span class=\"keyword\">char</span>* port_str, <span class=\"keyword\">char</span> *pwd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tredisContext *conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">uint16_t</span> port = atoi(port_str);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> auth_cmd[REDIS_COMMAND_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn = redisConnect(ip_str, port);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn  == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:Can&#x27;t allocate redis context!\\n&quot;</span>, ip_str, port);\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn-&gt;err) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:%s\\n&quot;</span>, ip_str, port, conn-&gt;errstr);\t</span><br><span class=\"line\">\t\tredisFree(conn);</span><br><span class=\"line\">\t\tconn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(auth_cmd, <span class=\"string\">&quot;auth %s&quot;</span>, pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">    reply = redisCommand(conn, auth_cmd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Command : auth %s ERROR!\\n&quot;</span>, pwd);</span><br><span class=\"line\">        conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    freeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n&quot;</span>, ip_str, port);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*</span></span><br><span class=\"line\"><span class=\"comment\">**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  redis unix域模式链接</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str\tunix域sock文件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t成功返回链接句柄 </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_unix</span><span class=\"params\">(<span class=\"keyword\">char</span> *sock_path, <span class=\"keyword\">char</span> *pwd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tredisContext *conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> auth_cmd[REDIS_COMMAND_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn = redisConnectUnix(sock_path);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn  == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect domain-unix:%s Error:Can&#x27;t allocate redis context!\\n&quot;</span>, sock_path);\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn-&gt;err) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect domain-unix:%s Error:%s\\n&quot;</span>, sock_path, conn-&gt;errstr);\t</span><br><span class=\"line\">\t\tredisFree(conn);</span><br><span class=\"line\">\t\tconn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(auth_cmd, <span class=\"string\">&quot;auth %s&quot;</span>, pwd);</span><br><span class=\"line\">    reply = redisCommand(conn, auth_cmd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Command : auth %s ERROR!\\n&quot;</span>, pwd);</span><br><span class=\"line\">        conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    freeReplyObject(reply);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Connect domain-unix:%s SUCCESS!\\n&quot;</span>, sock_path);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  tcp 链接redis超时等待模式，timeval链接超时</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t返回</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param ip_str\t\tredis 服务器ip</span></span><br><span class=\"line\"><span class=\"comment\"> * @param port_str\t\tredis 服务器端口</span></span><br><span class=\"line\"><span class=\"comment\"> * @param timeval\t\t最大超时等待时间</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t成功返回链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t失败返回NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\">redisContext* <span class=\"title\">rop_connectdb_timeout</span><span class=\"params\">(<span class=\"keyword\">char</span>* ip_str, <span class=\"keyword\">char</span> *port_str, struct timeval *timeout)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tredisContext *conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">uint16_t</span> port = atoi(port_str);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tconn = redisConnectWithTimeout(ip_str, port, *timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn  == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:Can&#x27;t allocate redis context!\\n&quot;</span>, ip_str, port);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn-&gt;err) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Connect %s:%d Error:%s\\n&quot;</span>, ip_str, port, conn-&gt;errstr);\t</span><br><span class=\"line\">\t\tredisFree(conn);</span><br><span class=\"line\">\t\tconn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Connect %s:%d SUCCESS!\\n&quot;</span>, ip_str, port);</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  关闭指定的链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rop_disconnect</span><span class=\"params\">(redisContext* conn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (conn == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tredisFree(conn);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC,<span class=\"string\">&quot;[+][GMS_REDIS]Disconnect SUCCESS!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 封装一个 hmset 命令 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span>* <span class=\"title\">make_hmset_command</span><span class=\"params\">(<span class=\"keyword\">char</span>* key, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> element_num, RFIELDS fields, RVALUES values)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *cmd = <span class=\"literal\">NULL</span>;\t</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> buf_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> use_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcmd = (<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(cmd, <span class=\"number\">0</span>, <span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\tbuf_size += <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">strncat</span>(cmd, <span class=\"string\">&quot;hmset&quot;</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">\tuse_size += <span class=\"number\">5</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">strncat</span>(cmd, <span class=\"string\">&quot; &quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\tuse_size += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">strncat</span>(cmd, key, <span class=\"number\">200</span>);</span><br><span class=\"line\">\tuse_size += <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; element_num; ++i) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">strncat</span>(cmd, <span class=\"string\">&quot; &quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuse_size += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (use_size &gt;= buf_size) &#123;</span><br><span class=\"line\">\t\t\tcmd = <span class=\"built_in\">realloc</span>(cmd, use_size + <span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbuf_size += <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">strncat</span>(cmd, fields[i], FIELD_ID_SIZE);</span><br><span class=\"line\">\t\tuse_size += <span class=\"built_in\">strlen</span>(fields[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (use_size &gt;= buf_size) &#123;</span><br><span class=\"line\">\t\t\tcmd = <span class=\"built_in\">realloc</span>(cmd, use_size + <span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbuf_size += <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">strncat</span>(cmd, <span class=\"string\">&quot; &quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuse_size += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (use_size &gt;= buf_size) &#123;</span><br><span class=\"line\">\t\t\tcmd = <span class=\"built_in\">realloc</span>(cmd, use_size + <span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbuf_size += <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">strncat</span>(cmd, values[i], VALUES_ID_SIZE);</span><br><span class=\"line\">\t\tuse_size += <span class=\"built_in\">strlen</span>(values[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (use_size &gt;= buf_size) &#123;</span><br><span class=\"line\">\t\t\tcmd = <span class=\"built_in\">realloc</span>(cmd, use_size + <span class=\"number\">1024</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbuf_size += <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cmd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行链表插入命令 插入链表头部</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values\t封装好的值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num\t值个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tFAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_set_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RFIELDS fields, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 批量插入命令到缓冲命令管道 */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">        retn = redisAppendCommand(conn, <span class=\"string\">&quot;hset %s %s %s&quot;</span>, key, fields[i], values[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">            LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]HSET %s %s %s ERROR![%s]\\n&quot;</span>, key, fields[i], values[i], conn-&gt;errstr);</span><br><span class=\"line\">            retn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 提交命令 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisGetReply(conn, (<span class=\"keyword\">void</span>**)&amp;reply);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Commit HSET %s %s %s ERROR![%s]\\n&quot;</span>, key, fields[i], values[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  想一个hash表中添加一条 key-value 数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn  redis连接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key   哈希表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_set</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">char</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    reply =  redisCommand(conn, <span class=\"string\">&quot;hset %s %s %s&quot;</span>, key, field, value);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span> || reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">        LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]hset %s %s %s error %s\\n&quot;</span>, key, field, value,conn-&gt;errstr);</span><br><span class=\"line\">        retn =  <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">    freeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  从一个hash表中取出一条 key-value 数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn  redis连接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key   哈希表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field 字段名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 得到的数据， 需要先开辟内存</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> *            0        succ</span></span><br><span class=\"line\"><span class=\"comment\"> *            -1        FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hash_get</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">char</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    reply =  redisCommand(conn, <span class=\"string\">&quot;hget %s %s&quot;</span>, key, field);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span> || reply-&gt;type != REDIS_REPLY_STRING) &#123;</span><br><span class=\"line\">        LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]hget %s %s  error %s\\n&quot;</span>, key, field, conn-&gt;errstr);</span><br><span class=\"line\">        retn =  <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    len = reply-&gt;len &gt; VALUES_ID_SIZE? VALUES_ID_SIZE:reply-&gt;len ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">strncpy</span>(value, reply-&gt;str, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    value[len] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">    freeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief\t\t\t创建或者覆盖一个HASH表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t\t\thash 表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param element_num\t\thash 表区域个数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param fields\t\t\thash 表区域名称数组char(*)[FIELD_ID_SIZE]</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values\t\t\thash 表区域值数组  char(*)[VALUES_ID_SIZE]</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0   成功\t</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1  失败</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_create_or_replace_hash_table</span><span class=\"params\">(redisContext* conn,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t\t\t\t\t\t\t <span class=\"keyword\">char</span>* key, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t\t\t\t\t\t\t <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> element_num, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t\t\t\t\t\t\t RFIELDS fields, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t\t\t\t\t\t\t RVALUES values)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *cmd = make_hmset_command(key, element_num, fields, values);\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cmd == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]create hash table %s error\\n&quot;</span>, key);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END_WITHOUT_FREE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, cmd);</span><br><span class=\"line\"><span class=\"comment\">//\trop_test_reply_type(reply);</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(reply-&gt;str, <span class=\"string\">&quot;OK&quot;</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Create hash table %s Error:%s,%s\\n&quot;</span>, key, reply-&gt;str, conn-&gt;errstr);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(cmd);</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">END_WITHOUT_FREE:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  给指定的hash表 指定的field对应的value自增num</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t\thash表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param field\t\t\thash表下的区域名\t</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tfail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_hincrement_one_field</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *field, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;HINCRBY %s %s %d&quot;</span>, key, field, num);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]increment %s %s error %s\\n&quot;</span>, key, field, conn-&gt;errstr);\t</span><br><span class=\"line\">\t\tretn =  <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  批量执行链表插入命令 插入链表头部</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values\t封装好的值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num\t值个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tFAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_list_push_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 批量插入命令到缓冲命令管道 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisAppendCommand(conn, <span class=\"string\">&quot;lpush %s %s&quot;</span>, key, values[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]PLUSH %s %s ERROR! %s\\n&quot;</span>, key, values[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 提交命令 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisGetReply(conn, (<span class=\"keyword\">void</span>**)&amp;reply);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Commit LPUSH %s %s ERROR! %s\\n&quot;</span>, key, values[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">END:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  单条数据插入链表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value\t\t数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_list_push</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;LPUSH %s %s&quot;</span>, key, value);</span><br><span class=\"line\">\t<span class=\"comment\">//rop_test_reply_type(reply);\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]LPUSH %s %s error!%s\\n&quot;</span>, key, value, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  得到链表中元素的个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t链接句柄</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t&gt;=0 个数</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1 fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_get_list_cnt</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;LLEN %s&quot;</span>, key);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_INTEGER) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]LLEN %s error %s\\n&quot;</span>, key, conn-&gt;errstr);</span><br><span class=\"line\">\t\tcnt = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcnt = reply-&gt;integer;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  按照一定范围截断链表中的数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已经建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t链表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param begin\t\t阶段启示位置 从 0 开始</span></span><br><span class=\"line\"><span class=\"comment\"> * @param end\t\t阶段结束位置 从 -1 开始</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t这里的范围定义举例 </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t如果得到全部范围(0, -1)</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t除了最后一个元素范围(0, -2)</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t\t前20各数据范围(0, 19)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0  SUCC</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1 FAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_trim_list</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">int</span> begin, <span class=\"keyword\">int</span> end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;LTRIM %s %d %d&quot;</span>, key, begin, end);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_STATUS) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]LTRIM %s %d %d error!%s\\n&quot;</span>, key, begin, end, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  rop_range_list 得到链表中的数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *          返回数据为 区间为</span></span><br><span class=\"line\"><span class=\"comment\"> *              [from_pos, end_pos)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key       表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param from_pos  查找表的起始数据下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param end_pos   查找表的结尾数据下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values    得到表中的value数据</span></span><br><span class=\"line\"><span class=\"comment\"> * @param get_num   得到结果value的个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *      0 succ, -1 fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_range_list</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">int</span> from_pos, <span class=\"keyword\">int</span> end_pos, RVALUES values, <span class=\"keyword\">int</span> *get_num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    redisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = end_pos - from_pos + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    reply = redisCommand(conn, <span class=\"string\">&quot;LRANGE %s %d %d&quot;</span>, key, from_pos, end_pos);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_ARRAY || reply-&gt;elements == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]LRANGE %s  error!%s\\n&quot;</span>, key, conn-&gt;errstr);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    max_count = (reply-&gt;elements &gt; count) ? count: reply-&gt;elements;</span><br><span class=\"line\">    *get_num = max_count;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; max_count; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">strncpy</span>(values[i], reply-&gt;element[i]-&gt;str, VALUES_ID_SIZE<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reply != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        freeReplyObject(reply);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief\t\t将指定的zset表，对应的成员，值自增1</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t（key 或 成员不存在 则创建）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\tzset表名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param member\tzset成员名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\t\tfail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_increment</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span>* key, <span class=\"keyword\">char</span>* member)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;ZINCRBY %s 1 %s&quot;</span>, key, member);</span><br><span class=\"line\">\t<span class=\"comment\">//rop_test_reply_type(reply);</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(reply-&gt;str, <span class=\"string\">&quot;OK&quot;</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Add or increment table: %s,member: %s Error:%s,%s\\n&quot;</span>, key, member,reply-&gt;str, conn-&gt;errstr);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief\t 批量将指定的zset表，对应的成员，值自增1</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t\t（key 或 成员不存在 则创建）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param conn\t\t已建立好的链接</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key\t\t有序集合名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param values\t封装好的成员数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param val_num\t数据个数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns   </span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t0\t\tsucc</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\t-1\t\tFAIL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* -------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_increment_append</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, RVALUES values, <span class=\"keyword\">int</span> val_num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> retn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 批量命令到缓冲管道 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisAppendCommand(conn, <span class=\"string\">&quot;ZINCRBY %s 1 %s&quot;</span>, key, values[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]ZINCRBY %s 1 %s ERROR! %s\\n&quot;</span>, key, values[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 提交命令 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val_num; ++i) &#123;</span><br><span class=\"line\">\t\tretn = redisGetReply(conn, (<span class=\"keyword\">void</span>**)&amp;reply);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retn != REDIS_OK) &#123;</span><br><span class=\"line\">\t\t\tretn = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]Commit ZINCRBY %s 1 %s ERROR!%s\\n&quot;</span>, key, values[i], conn-&gt;errstr);</span><br><span class=\"line\">\t\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfreeReplyObject(reply);</span><br><span class=\"line\">\t\tretn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">END: </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rop_zset_get_score</span><span class=\"params\">(redisContext *conn, <span class=\"keyword\">char</span> *key, <span class=\"keyword\">char</span> *member)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tredisReply *reply = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treply = redisCommand(conn, <span class=\"string\">&quot;ZSCORE %s %s&quot;</span>, key, member);</span><br><span class=\"line\">    rop_test_reply_type(reply);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (reply-&gt;type != REDIS_REPLY_STRING) &#123;</span><br><span class=\"line\">\t\tLOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, <span class=\"string\">&quot;[-][GMS_REDIS]ZSCORE %s %s error %s\\n&quot;</span>, key, member,conn-&gt;errstr);</span><br><span class=\"line\">        score = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> END;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    score = atoi(reply-&gt;str);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">END:</span><br><span class=\"line\">\tfreeReplyObject(reply);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> score;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span>  _MAKE_LOG_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  _MAKE_LOG_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;pthread.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">out_put_file</span><span class=\"params\">(<span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *buf)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">make_path</span><span class=\"params\">(<span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *module_name, <span class=\"keyword\">char</span> *proc_name)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dumpmsg_to_file</span><span class=\"params\">(<span class=\"keyword\">char</span> *module_name, <span class=\"keyword\">char</span> *proc_name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"keyword\">int</span> line, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *funcname, <span class=\"keyword\">char</span> *fmt, ...)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _LOG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOG(module_name, proc_name, x...) \\</span></span><br><span class=\"line\"><span class=\"meta\">        do&#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\tdumpmsg_to_file(module_name, proc_name, __FILE__, __LINE__, __FUNCTION__, ##x);\\</span></span><br><span class=\"line\"><span class=\"meta\">\t&#125;while(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOG(module_name, proc_name, x...)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">pthread_mutex_t</span> ca_log_lock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&quot;make_log.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//pthread_mutex_t lock;</span></span><br><span class=\"line\"><span class=\"comment\">//pthread_mutex_init(lock);</span></span><br><span class=\"line\"><span class=\"comment\">/*void *comm_log(void *p)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    pthread_mutex_lock(&amp;lock);</span></span><br><span class=\"line\"><span class=\"comment\">    pthread_mutex_unlock(&amp;lock);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">struct file_path&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    char *module_name;</span></span><br><span class=\"line\"><span class=\"comment\">    char *proc_name;</span></span><br><span class=\"line\"><span class=\"comment\">    const char *filename;</span></span><br><span class=\"line\"><span class=\"comment\">    int line;</span></span><br><span class=\"line\"><span class=\"comment\">    const char *funcname;</span></span><br><span class=\"line\"><span class=\"comment\">    char *fmt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">int lock_file(char *module, char *proc, const char *file,</span></span><br><span class=\"line\"><span class=\"comment\">                        int lines, const char *func, char *mt, ...)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    va_list ap;</span></span><br><span class=\"line\"><span class=\"comment\">    struct file_path path;</span></span><br><span class=\"line\"><span class=\"comment\">    path.module_name = module;</span></span><br><span class=\"line\"><span class=\"comment\">    path.proc_name = proc;</span></span><br><span class=\"line\"><span class=\"comment\">    path.filename = file;</span></span><br><span class=\"line\"><span class=\"comment\">    path.line = lines;</span></span><br><span class=\"line\"><span class=\"comment\">    path.funcname = func;</span></span><br><span class=\"line\"><span class=\"comment\">    //path.fmt  = mt;</span></span><br><span class=\"line\"><span class=\"comment\">    va_start(ap,mt);</span></span><br><span class=\"line\"><span class=\"comment\">    vsprintf(path.fmt,mt,ap);</span></span><br><span class=\"line\"><span class=\"comment\">    va_end(ap);</span></span><br><span class=\"line\"><span class=\"comment\">    pthread_mutex_init(&amp;lock,0); </span></span><br><span class=\"line\"><span class=\"comment\">    pthread_t comm;</span></span><br><span class=\"line\"><span class=\"comment\">        pthread_create(&amp;comm,0,dumpmsg_to_file,&amp;path);</span></span><br><span class=\"line\"><span class=\"comment\">    pthread_join(comm,0);</span></span><br><span class=\"line\"><span class=\"comment\">    pthread_mutex_destroy(&amp;lock);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pthread_mutex_t</span> ca_log_lock=PTHREAD_MUTEX_INITIALIZER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建目录并写入内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dumpmsg_to_file</span><span class=\"params\">(<span class=\"keyword\">char</span> *module_name, <span class=\"keyword\">char</span> *proc_name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"keyword\">int</span> line, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *funcname, <span class=\"keyword\">char</span> *fmt, ...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> mesg[<span class=\"number\">4096</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> buf[<span class=\"number\">4096</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t    <span class=\"keyword\">char</span> filepath[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">time_t</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> * <span class=\"title\">now</span>=</span><span class=\"literal\">NULL</span>;                                                                                     </span><br><span class=\"line\">        va_list ap;                                                                                               </span><br><span class=\"line\">        <span class=\"comment\">//struct file_path *path;</span></span><br><span class=\"line\">        <span class=\"comment\">//path = (struct file_path*)paths;</span></span><br><span class=\"line\">        time(&amp;t);                                                                                                 </span><br><span class=\"line\">        now = localtime(&amp;t);                                       </span><br><span class=\"line\">        va_start(ap, fmt);                                                                               </span><br><span class=\"line\">        <span class=\"built_in\">vsprintf</span>(mesg, fmt, ap);                                                                       </span><br><span class=\"line\">        va_end(ap);                        </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1</span></span><br><span class=\"line\">        <span class=\"built_in\">snprintf</span>(buf, <span class=\"number\">4096</span>, <span class=\"string\">&quot;[%04d-%02d-%02d %02d:%02d:%02d]--[%s:%d]--%s\\n&quot;</span>,</span><br><span class=\"line\">                                now -&gt; tm_year + <span class=\"number\">1900</span>, now -&gt; tm_mon + <span class=\"number\">1</span>,                                         </span><br><span class=\"line\">                                now -&gt; tm_mday, now -&gt; tm_hour, now -&gt; tm_min, now -&gt; tm_sec,                     </span><br><span class=\"line\">\t\t\t\t\t\t\t\tfilename, line, mesg);                                     </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></span><br><span class=\"line\">        <span class=\"built_in\">snprintf</span>(buf, <span class=\"number\">4096</span>, <span class=\"string\">&quot;===%04d%02d%02d-%02d%02d%02d,%s[%d]=== %s\\n&quot;</span>,</span><br><span class=\"line\">                                now -&gt; tm_year + <span class=\"number\">1900</span>, now -&gt; tm_mon + <span class=\"number\">1</span>,                                         </span><br><span class=\"line\">                                now -&gt; tm_mday, now -&gt; tm_hour, now -&gt; tm_min, now -&gt; tm_sec,</span><br><span class=\"line\">                                funcname, line, mesg);   </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">        make_path(filepath, module_name, proc_name);</span><br><span class=\"line\">        </span><br><span class=\"line\">        pthread_mutex_lock(&amp;ca_log_lock);</span><br><span class=\"line\">\t    out_put_file(filepath, buf);     </span><br><span class=\"line\">        pthread_mutex_unlock(&amp;ca_log_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;     </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"comment\">//写入内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">out_put_file</span><span class=\"params\">(<span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *buf)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fd;                                                                                                   </span><br><span class=\"line\">    fd = open(path, O_RDWR | O_CREAT | O_APPEND, <span class=\"number\">0777</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(write(fd, buf, <span class=\"built_in\">strlen</span>(buf)) != (<span class=\"keyword\">int</span>)<span class=\"built_in\">strlen</span>(buf)) &#123;                                      </span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;write error!\\n&quot;</span>);                           </span><br><span class=\"line\">            close(fd);                                                                                        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;                                                                                                  </span><br><span class=\"line\">            <span class=\"comment\">//write(fd, &quot;\\n&quot;, 1);</span></span><br><span class=\"line\">            close(fd);                                                                                        </span><br><span class=\"line\">    &#125;               </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">make_path</span><span class=\"params\">(<span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *module_name, <span class=\"keyword\">char</span> *proc_name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> t;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> *<span class=\"title\">now</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> top_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"string\">&quot;.&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> second_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"string\">&quot;./logs&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> third_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> y_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> m_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> d_dir[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;; </span><br><span class=\"line\">\ttime(&amp;t);</span><br><span class=\"line\">        now = localtime(&amp;t);</span><br><span class=\"line\">\t<span class=\"built_in\">snprintf</span>(path, <span class=\"number\">1024</span>, <span class=\"string\">&quot;./logs/%s/%04d/%02d/%s-%02d.log&quot;</span>, module_name, now -&gt; tm_year + <span class=\"number\">1900</span>, now -&gt; tm_mon + <span class=\"number\">1</span>, proc_name, now -&gt; tm_mday);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(third_dir, <span class=\"string\">&quot;%s/%s&quot;</span>, second_dir, module_name);</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(y_dir, <span class=\"string\">&quot;%s/%04d/&quot;</span>, third_dir, now -&gt; tm_year + <span class=\"number\">1900</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(m_dir, <span class=\"string\">&quot;%s/%02d/&quot;</span>, y_dir, now -&gt; tm_mon + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(d_dir,<span class=\"string\">&quot;%s/%02d/&quot;</span>, m_dir, now -&gt; tm_mday);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(access(top_dir, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mkdir(top_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;create %s failed!\\n&quot;</span>, top_dir);\t</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(second_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, top_dir, second_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(third_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, top_dir, third_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(y_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, top_dir, y_dir);                                                     </span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(m_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;                                                             </span><br><span class=\"line\">                        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, top_dir, m_dir);                                                     </span><br><span class=\"line\">                &#125;          \t</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(access(second_dir, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mkdir(second_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;create %s failed!\\n&quot;</span>, second_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(third_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, second_dir, third_dir);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(y_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, second_dir, y_dir);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(m_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, second_dir, m_dir);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(access(third_dir, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mkdir(third_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;create %s failed!\\n&quot;</span>, third_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(y_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, third_dir, y_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(m_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, third_dir, m_dir);</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (access(y_dir, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mkdir(y_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;create %s failed!\\n&quot;</span>, y_dir);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mkdir(m_dir, <span class=\"number\">0777</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;%s:create %s failed!\\n&quot;</span>, y_dir, m_dir);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (access(m_dir, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mkdir(m_dir, <span class=\"number\">0777</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;create %s failed!\\n&quot;</span>, m_dir);</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//printf(&quot;path:%s\\n&quot;, path);</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> path[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> proc_name[] = &#123;<span class=\"string\">&quot;sys_guard&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[] = &#123;<span class=\"string\">&quot;12345\\n&quot;</span>&#125;;</span><br><span class=\"line\">\tmake_path(path, proc_name);</span><br><span class=\"line\">\tout_put_file(path, buf);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;redis_op.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">    redisContext *conn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    conn = rop_connectdb_nopwd(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"string\">&quot;6379&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//set foo  hello</span></span><br><span class=\"line\">    ret = rop_set_string(conn, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;set succ!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;set fail\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> value[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tret = rop_get_string(conn, <span class=\"string\">&quot;foo&quot;</span>, value);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;get succ: %s - %s\\n&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;get fail\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//释放数据库</span></span><br><span class=\"line\">    rop_disconnect(conn);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"管道","date":"2020-08-22T16:00:00.000Z","keywords":"pipe, fifo,ipc","cover":"https://tva1.sinaimg.cn/large/008i3skNly1gsfvpx9u5cj30dc03yaab.jpg","_content":"\n###  管道\n\n- 进程间通信的方式之一\n- 本质是对内核缓冲区的读写，存储在一个环形队列中\n- 管道对应的内核缓冲区的大小是固定的，默认为4KB\n- 管道分为读写两端，数据从写端进入管道，从读端流出管道\n- 管道中的数据只能读一次，相当于出队列\n- 管道是单工的，数据单向流动，从写端到读端\n- 对管道的读写操作都是阻塞的\n  - 读管道：当管道中没有数据，读操作阻塞；有数据阻塞解除\n  - 写管道：写满后，写操作阻塞；有空闲后，继续写入      \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfvycavu3j316i0u0tcy.jpg\" alt=\"管道通信\" style=\"zoom: 50%;\" />\n\n### 管道的分类\n\n#### 匿名管道：只能实现血缘关系的进程间通信\n\n##### 创建匿名管道\n\n```c\n#include <unistd.h>\nint pipe(int fd[2]);\n```\n\n- 传出参数：\n  - fd[0]--->读端\n  - fd[1]--->写端\n\n- 返回值： 成功 0 ；失败 -1\n\n##### 匿名管道通信\n\n- 子进程执行shell命令`ps aux` ,父进程将结果显示到终端\n\n```c\n//要关闭管道的一部分，形成唯一的单向流通线路\n#include <stdio.h>\n#include <unistd.h>\n#include <string.h>\n#include <stdlib.h>\n#include <sys/wait.h>\n#include <fcntl.h>\n\nint main(void)\n{\n\tint fd[2];\n\tint ret = pipe(fd);\n\tif(ret == -1)\n\t{\n\t\tperror(\"pipe error!\");\n\t\treturn -1;\n\t}\n\n\tret = fork();\n\tif(ret == 0) //children\n\t{\n\t\t//close read\n\t\tclose(fd[0]);\n\t\tdup2(fd[1],STDOUT_FILENO);\n\t\texeclp(\"ps\",\"ps\",\"aux\",NULL);\n\t}\n\telse if(ret > 0 )//parent\n\t{\n\t\tclose(fd[1]);\n\t\tchar buf[1024];\n\n\t\twhile(1)\n\t\t{\n\t\t\tbzero(buf,sizeof(buf));\n\t\t\tret = read(fd[0],buf,sizeof(buf));\n\t\t\tif(ret == 0)\n\t\t\t\tbreak;\n\t\t\tprintf(\"%s-->%d\\n\",buf,ret);\n\t\t}\n\t\tclose(fd[0]);\n\t\twait(NULL);\n\t}\n\telse{\n\t\tperror(\"fork error\");\n\t\treturn -1;\n\t}\n\n\n\treturn 0;\n}\n\n```\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfwnvyrarj310d0u07ic.jpg\" alt=\"ps aux\" style=\"zoom:50%;\" />\n\n#### 有名管道\n\n##### 创建有名管道\n\n- 有名管道文件大小永远为 0，因为有名管道也是将数据存储到内存的缓冲区中\n- 有名管道可以在血缘关系的进程中使用，也可以在没有血缘关系的进程中使用\n\n```bash\n命令的方式\nmkfifo 管道名\n```\n\n```c\n#include <sys/types.h>\n#include <sys/stat.h>\nint mkfifo(const chra *pathname,mode_t mode);\n```\n\n- pathname 创建有名管道的名字\n- mode 文件的权限\n- 最终权限`mode & ~umask`\n- 返回值： 成功 0；失败 -1\n\n##### 进程间通信\n\n- 需要通过open操作得到读写管道的文件描述符，如果读写端只有一端打开，进程会阻塞在open函数，知道另一个进程打开对应端。\n\n  \n\n```c\n//有名管道进行写操作\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <string.h>\n\nint main(void)\n{\n    //创建有名管道\n    int ret = mkfifo(\"./fifotest\",0664);\n    if(ret == -1)\n    {\n        perror(\"mkfifo error!\");\n        exit(-1);\n    }\n    printf(\"管道文件创建成功！\\n\");\n\n    int ret_open = open(\"./fifotest\",O_WRONLY);\n    if(ret_open == -1)\n    {\n        perror(\"open fifo fail!\");\n        exit(-1);\n    }\n\n    //循环写入文件\n    int i = 0;\n    while(i<100)\n    {\n        char buf[4096]={0};\n        sprintf(buf,\"hello world %d\",i+1);\n        write(ret_open,buf,strlen(buf)); //如果只有写端，没有读端会阻塞的\n        i++;\n        sleep(1);\n    }\n    close(ret_open);\n    exit(0);\n}\n\n\n\n/*\n设置为非阻塞的形式\n// 通过fcntl 修改就可以, 一般情况下不建议修改\n// 管道操作对应两个文件描述符, 分别是管道的读端 和 写端\n\n// 1. 获取读端的文件描述符的flag属性\nint flag = fcntl(fd[0], F_GETFL);\n// 2. 添加非阻塞属性到 flag中\nflag |= O_NONBLOCK;\n// 3. 将新的flag属性设置给读端的文件描述符\nfcntl(fd[0], F_SETFL, flag);\n// 4. 非阻塞读管道\nchar buf[4096];\nread(fd[0], buf, sizeof(buf));\n\n*/\n```\n\n\n\n```c\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <string.h>\n\nint main(void)\n{\n\n    int fd_r = open(\"./fifotest\",O_RDONLY);\n    if(fd_r == -1)\n    {\n        perror(\"open fifotest error!\");\n        exit(-1);\n    }\n    //循环读取\n    \n    char buf[4096];\n    while (1)\n    {\n        memset(buf,0,sizeof(buf));\n        int ret = read(fd_r,buf,sizeof(buf));\n        if(ret == 0)\n        {\n            printf(\"已经读完，阻塞解除！\\n\");\n            break;\n        }\n        printf(\"%s--->%d\\n\",buf,ret);\n        \n    }\n    close(fd_r);\n\n    exit(0);\n}\n```\n\n#### pipe调用别的可执行文件\n\n```c\n//fdfs_upload_file\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/wait.h>\n#include \"make_log.h\"\n\n\nint main(int argc,char *argv[])\n{\n      //create pipe\n      int fd[2];\n      int ret = pipe(fd);\n      if(ret == -1)\n      {\n            LOG(\"pipe\",\"create pipe error\",\"ret = %d\",ret);\n            return -1;\n      }\n\n      ret = fork();\n      if(ret == 0)//children\n      {\n            close(fd[0]);\n            dup2(fd[1],STDOUT_FILENO);\n            execlp(\"fdfs_upload_file\",\"fdfs_upload_file\",\"/etc/fdfs/client.conf\",argv[1],NULL);\n      }\n      else if(ret > 0)//parent\n      {\n            close(fd[1]);\n            char buf[1024] ;\n            while(1)\n            {\n                  bzero(buf,sizeof(buf));\n                  ret = read(fd[0],buf,sizeof(buf));\n                  if(ret == 0)\n                        break;\n                  printf(\"%s\",buf);\n            }\n            \n            close(fd[0]);\n            wait(NULL);\n      }\n      else{\n            LOG(\"fork\",\"fork error\",\"fork ret = %d\",ret);\n            return -1;\n      }\n      LOG(\"interface\",\"interface ok!\",\"return 0\");\n\n      return 0 ;\n}\n```\n\n","source":"_posts/管道.md","raw":"---\ntitle: 管道\ndate: 2020-08-23\ntag:\n  - 管道\n  - IPC\ncategories:\n  - Linux\nkeywords: \"pipe, fifo,ipc\"\ncover: https://tva1.sinaimg.cn/large/008i3skNly1gsfvpx9u5cj30dc03yaab.jpg\n---\n\n###  管道\n\n- 进程间通信的方式之一\n- 本质是对内核缓冲区的读写，存储在一个环形队列中\n- 管道对应的内核缓冲区的大小是固定的，默认为4KB\n- 管道分为读写两端，数据从写端进入管道，从读端流出管道\n- 管道中的数据只能读一次，相当于出队列\n- 管道是单工的，数据单向流动，从写端到读端\n- 对管道的读写操作都是阻塞的\n  - 读管道：当管道中没有数据，读操作阻塞；有数据阻塞解除\n  - 写管道：写满后，写操作阻塞；有空闲后，继续写入      \n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfvycavu3j316i0u0tcy.jpg\" alt=\"管道通信\" style=\"zoom: 50%;\" />\n\n### 管道的分类\n\n#### 匿名管道：只能实现血缘关系的进程间通信\n\n##### 创建匿名管道\n\n```c\n#include <unistd.h>\nint pipe(int fd[2]);\n```\n\n- 传出参数：\n  - fd[0]--->读端\n  - fd[1]--->写端\n\n- 返回值： 成功 0 ；失败 -1\n\n##### 匿名管道通信\n\n- 子进程执行shell命令`ps aux` ,父进程将结果显示到终端\n\n```c\n//要关闭管道的一部分，形成唯一的单向流通线路\n#include <stdio.h>\n#include <unistd.h>\n#include <string.h>\n#include <stdlib.h>\n#include <sys/wait.h>\n#include <fcntl.h>\n\nint main(void)\n{\n\tint fd[2];\n\tint ret = pipe(fd);\n\tif(ret == -1)\n\t{\n\t\tperror(\"pipe error!\");\n\t\treturn -1;\n\t}\n\n\tret = fork();\n\tif(ret == 0) //children\n\t{\n\t\t//close read\n\t\tclose(fd[0]);\n\t\tdup2(fd[1],STDOUT_FILENO);\n\t\texeclp(\"ps\",\"ps\",\"aux\",NULL);\n\t}\n\telse if(ret > 0 )//parent\n\t{\n\t\tclose(fd[1]);\n\t\tchar buf[1024];\n\n\t\twhile(1)\n\t\t{\n\t\t\tbzero(buf,sizeof(buf));\n\t\t\tret = read(fd[0],buf,sizeof(buf));\n\t\t\tif(ret == 0)\n\t\t\t\tbreak;\n\t\t\tprintf(\"%s-->%d\\n\",buf,ret);\n\t\t}\n\t\tclose(fd[0]);\n\t\twait(NULL);\n\t}\n\telse{\n\t\tperror(\"fork error\");\n\t\treturn -1;\n\t}\n\n\n\treturn 0;\n}\n\n```\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfwnvyrarj310d0u07ic.jpg\" alt=\"ps aux\" style=\"zoom:50%;\" />\n\n#### 有名管道\n\n##### 创建有名管道\n\n- 有名管道文件大小永远为 0，因为有名管道也是将数据存储到内存的缓冲区中\n- 有名管道可以在血缘关系的进程中使用，也可以在没有血缘关系的进程中使用\n\n```bash\n命令的方式\nmkfifo 管道名\n```\n\n```c\n#include <sys/types.h>\n#include <sys/stat.h>\nint mkfifo(const chra *pathname,mode_t mode);\n```\n\n- pathname 创建有名管道的名字\n- mode 文件的权限\n- 最终权限`mode & ~umask`\n- 返回值： 成功 0；失败 -1\n\n##### 进程间通信\n\n- 需要通过open操作得到读写管道的文件描述符，如果读写端只有一端打开，进程会阻塞在open函数，知道另一个进程打开对应端。\n\n  \n\n```c\n//有名管道进行写操作\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <string.h>\n\nint main(void)\n{\n    //创建有名管道\n    int ret = mkfifo(\"./fifotest\",0664);\n    if(ret == -1)\n    {\n        perror(\"mkfifo error!\");\n        exit(-1);\n    }\n    printf(\"管道文件创建成功！\\n\");\n\n    int ret_open = open(\"./fifotest\",O_WRONLY);\n    if(ret_open == -1)\n    {\n        perror(\"open fifo fail!\");\n        exit(-1);\n    }\n\n    //循环写入文件\n    int i = 0;\n    while(i<100)\n    {\n        char buf[4096]={0};\n        sprintf(buf,\"hello world %d\",i+1);\n        write(ret_open,buf,strlen(buf)); //如果只有写端，没有读端会阻塞的\n        i++;\n        sleep(1);\n    }\n    close(ret_open);\n    exit(0);\n}\n\n\n\n/*\n设置为非阻塞的形式\n// 通过fcntl 修改就可以, 一般情况下不建议修改\n// 管道操作对应两个文件描述符, 分别是管道的读端 和 写端\n\n// 1. 获取读端的文件描述符的flag属性\nint flag = fcntl(fd[0], F_GETFL);\n// 2. 添加非阻塞属性到 flag中\nflag |= O_NONBLOCK;\n// 3. 将新的flag属性设置给读端的文件描述符\nfcntl(fd[0], F_SETFL, flag);\n// 4. 非阻塞读管道\nchar buf[4096];\nread(fd[0], buf, sizeof(buf));\n\n*/\n```\n\n\n\n```c\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <string.h>\n\nint main(void)\n{\n\n    int fd_r = open(\"./fifotest\",O_RDONLY);\n    if(fd_r == -1)\n    {\n        perror(\"open fifotest error!\");\n        exit(-1);\n    }\n    //循环读取\n    \n    char buf[4096];\n    while (1)\n    {\n        memset(buf,0,sizeof(buf));\n        int ret = read(fd_r,buf,sizeof(buf));\n        if(ret == 0)\n        {\n            printf(\"已经读完，阻塞解除！\\n\");\n            break;\n        }\n        printf(\"%s--->%d\\n\",buf,ret);\n        \n    }\n    close(fd_r);\n\n    exit(0);\n}\n```\n\n#### pipe调用别的可执行文件\n\n```c\n//fdfs_upload_file\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/wait.h>\n#include \"make_log.h\"\n\n\nint main(int argc,char *argv[])\n{\n      //create pipe\n      int fd[2];\n      int ret = pipe(fd);\n      if(ret == -1)\n      {\n            LOG(\"pipe\",\"create pipe error\",\"ret = %d\",ret);\n            return -1;\n      }\n\n      ret = fork();\n      if(ret == 0)//children\n      {\n            close(fd[0]);\n            dup2(fd[1],STDOUT_FILENO);\n            execlp(\"fdfs_upload_file\",\"fdfs_upload_file\",\"/etc/fdfs/client.conf\",argv[1],NULL);\n      }\n      else if(ret > 0)//parent\n      {\n            close(fd[1]);\n            char buf[1024] ;\n            while(1)\n            {\n                  bzero(buf,sizeof(buf));\n                  ret = read(fd[0],buf,sizeof(buf));\n                  if(ret == 0)\n                        break;\n                  printf(\"%s\",buf);\n            }\n            \n            close(fd[0]);\n            wait(NULL);\n      }\n      else{\n            LOG(\"fork\",\"fork error\",\"fork ret = %d\",ret);\n            return -1;\n      }\n      LOG(\"interface\",\"interface ok!\",\"return 0\");\n\n      return 0 ;\n}\n```\n\n","slug":"管道","published":1,"updated":"2021-07-14T08:00:33.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks2o0xfb001gk057gc016amr","content":"<h3 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h3><ul>\n<li>进程间通信的方式之一</li>\n<li>本质是对内核缓冲区的读写，存储在一个环形队列中</li>\n<li>管道对应的内核缓冲区的大小是固定的，默认为4KB</li>\n<li>管道分为读写两端，数据从写端进入管道，从读端流出管道</li>\n<li>管道中的数据只能读一次，相当于出队列</li>\n<li>管道是单工的，数据单向流动，从写端到读端</li>\n<li>对管道的读写操作都是阻塞的<ul>\n<li>读管道：当管道中没有数据，读操作阻塞；有数据阻塞解除</li>\n<li>写管道：写满后，写操作阻塞；有空闲后，继续写入      </li>\n</ul>\n</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfvycavu3j316i0u0tcy.jpg\" alt=\"管道通信\" style=\"zoom: 50%;\" />\n\n<h3 id=\"管道的分类\"><a href=\"#管道的分类\" class=\"headerlink\" title=\"管道的分类\"></a>管道的分类</h3><h4 id=\"匿名管道：只能实现血缘关系的进程间通信\"><a href=\"#匿名管道：只能实现血缘关系的进程间通信\" class=\"headerlink\" title=\"匿名管道：只能实现血缘关系的进程间通信\"></a>匿名管道：只能实现血缘关系的进程间通信</h4><h5 id=\"创建匿名管道\"><a href=\"#创建匿名管道\" class=\"headerlink\" title=\"创建匿名管道\"></a>创建匿名管道</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pipe</span><span class=\"params\">(<span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>])</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>传出参数：</p>\n<ul>\n<li>fd[0]—&gt;读端</li>\n<li>fd[1]—&gt;写端</li>\n</ul>\n</li>\n<li><p>返回值： 成功 0 ；失败 -1</p>\n</li>\n</ul>\n<h5 id=\"匿名管道通信\"><a href=\"#匿名管道通信\" class=\"headerlink\" title=\"匿名管道通信\"></a>匿名管道通信</h5><ul>\n<li>子进程执行shell命令<code>ps aux</code> ,父进程将结果显示到终端</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//要关闭管道的一部分，形成唯一的单向流通线路</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = pipe(fd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;pipe error!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = fork();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>) <span class=\"comment\">//children</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//close read</span></span><br><span class=\"line\">\t\tclose(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\tdup2(fd[<span class=\"number\">1</span>],STDOUT_FILENO);</span><br><span class=\"line\">\t\texeclp(<span class=\"string\">&quot;ps&quot;</span>,<span class=\"string\">&quot;ps&quot;</span>,<span class=\"string\">&quot;aux&quot;</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ret &gt; <span class=\"number\">0</span> )<span class=\"comment\">//parent</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tclose(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tbzero(buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\t\t\tret = read(fd[<span class=\"number\">0</span>],buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s--&gt;%d\\n&quot;</span>,buf,ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tclose(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\twait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;fork error&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfwnvyrarj310d0u07ic.jpg\" alt=\"ps aux\" style=\"zoom:50%;\" />\n\n<h4 id=\"有名管道\"><a href=\"#有名管道\" class=\"headerlink\" title=\"有名管道\"></a>有名管道</h4><h5 id=\"创建有名管道\"><a href=\"#创建有名管道\" class=\"headerlink\" title=\"创建有名管道\"></a>创建有名管道</h5><ul>\n<li>有名管道文件大小永远为 0，因为有名管道也是将数据存储到内存的缓冲区中</li>\n<li>有名管道可以在血缘关系的进程中使用，也可以在没有血缘关系的进程中使用</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令的方式</span><br><span class=\"line\">mkfifo 管道名</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mkfifo</span><span class=\"params\">(<span class=\"keyword\">const</span> chra *pathname,<span class=\"keyword\">mode_t</span> mode)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pathname 创建有名管道的名字</li>\n<li>mode 文件的权限</li>\n<li>最终权限<code>mode &amp; ~umask</code></li>\n<li>返回值： 成功 0；失败 -1</li>\n</ul>\n<h5 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a>进程间通信</h5><ul>\n<li>需要通过open操作得到读写管道的文件描述符，如果读写端只有一端打开，进程会阻塞在open函数，知道另一个进程打开对应端。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//有名管道进行写操作</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建有名管道</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = mkfifo(<span class=\"string\">&quot;./fifotest&quot;</span>,<span class=\"number\">0664</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;mkfifo error!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;管道文件创建成功！\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret_open = open(<span class=\"string\">&quot;./fifotest&quot;</span>,O_WRONLY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret_open == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;open fifo fail!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//循环写入文件</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> buf[<span class=\"number\">4096</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(buf,<span class=\"string\">&quot;hello world %d&quot;</span>,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        write(ret_open,buf,<span class=\"built_in\">strlen</span>(buf)); <span class=\"comment\">//如果只有写端，没有读端会阻塞的</span></span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(ret_open);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">设置为非阻塞的形式</span></span><br><span class=\"line\"><span class=\"comment\">// 通过fcntl 修改就可以, 一般情况下不建议修改</span></span><br><span class=\"line\"><span class=\"comment\">// 管道操作对应两个文件描述符, 分别是管道的读端 和 写端</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">// 1. 获取读端的文件描述符的flag属性</span></span><br><span class=\"line\"><span class=\"comment\">int flag = fcntl(fd[0], F_GETFL);</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 添加非阻塞属性到 flag中</span></span><br><span class=\"line\"><span class=\"comment\">flag |= O_NONBLOCK;</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 将新的flag属性设置给读端的文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">fcntl(fd[0], F_SETFL, flag);</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 非阻塞读管道</span></span><br><span class=\"line\"><span class=\"comment\">char buf[4096];</span></span><br><span class=\"line\"><span class=\"comment\">read(fd[0], buf, sizeof(buf));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd_r = open(<span class=\"string\">&quot;./fifotest&quot;</span>,O_RDONLY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fd_r == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;open fifotest error!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//循环读取</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">4096</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(buf,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = read(fd_r,buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;已经读完，阻塞解除！\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s---&gt;%d\\n&quot;</span>,buf,ret);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(fd_r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pipe调用别的可执行文件\"><a href=\"#pipe调用别的可执行文件\" class=\"headerlink\" title=\"pipe调用别的可执行文件\"></a>pipe调用别的可执行文件</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fdfs_upload_file</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;make_log.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//create pipe</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>];</span><br><span class=\"line\">      <span class=\"keyword\">int</span> ret = pipe(fd);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">            LOG(<span class=\"string\">&quot;pipe&quot;</span>,<span class=\"string\">&quot;create pipe error&quot;</span>,<span class=\"string\">&quot;ret = %d&quot;</span>,ret);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      ret = fork();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)<span class=\"comment\">//children</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">            close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            dup2(fd[<span class=\"number\">1</span>],STDOUT_FILENO);</span><br><span class=\"line\">            execlp(<span class=\"string\">&quot;fdfs_upload_file&quot;</span>,<span class=\"string\">&quot;fdfs_upload_file&quot;</span>,<span class=\"string\">&quot;/etc/fdfs/client.conf&quot;</span>,argv[<span class=\"number\">1</span>],<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ret &gt; <span class=\"number\">0</span>)<span class=\"comment\">//parent</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">            close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>] ;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                  bzero(buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">                  ret = read(fd[<span class=\"number\">0</span>],buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">                  <span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,buf);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            wait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            LOG(<span class=\"string\">&quot;fork&quot;</span>,<span class=\"string\">&quot;fork error&quot;</span>,<span class=\"string\">&quot;fork ret = %d&quot;</span>,ret);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      LOG(<span class=\"string\">&quot;interface&quot;</span>,<span class=\"string\">&quot;interface ok!&quot;</span>,<span class=\"string\">&quot;return 0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"},{"name":"Butterfly","limk":"https://github.com/jerryc127/hexo-theme-butterfly","avatar":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-github-avatar.png","descr":"主题Butterfly"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"朋友的站","link":"https://aurora811.gitee.io","avatar":"https://gitee.com/Aurora811/image/raw/master/touxiang.jpg","descr":"朋友的博客"},{"name":"Qt中文文档","link":"http://qt5.digitser.net/zh-CN.html","avatar":"http://81.68.126.32:8090/upload/2021/07/8f2e9dc7992789c8613f3a1b64976391-432f07a40dbb446a8c9dda38ccea6101.jpeg","descr":"Qt文档参考"},{"name":"C/C++参考文档","link":"https://zh.cppreference.com/w/%e9%a6%96%e9%a1%b5","avatar":"http://81.68.126.32:8090/upload/2021/07/src=http___i.loli.net_2020_07_25_YfUdMlncDQ8ItbC.png&refer=http___i.loli-a464436a43d0495e9da4ca51227759b6.jpg","descr":"C/C++"}]}]}},"excerpt":"","more":"<h3 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h3><ul>\n<li>进程间通信的方式之一</li>\n<li>本质是对内核缓冲区的读写，存储在一个环形队列中</li>\n<li>管道对应的内核缓冲区的大小是固定的，默认为4KB</li>\n<li>管道分为读写两端，数据从写端进入管道，从读端流出管道</li>\n<li>管道中的数据只能读一次，相当于出队列</li>\n<li>管道是单工的，数据单向流动，从写端到读端</li>\n<li>对管道的读写操作都是阻塞的<ul>\n<li>读管道：当管道中没有数据，读操作阻塞；有数据阻塞解除</li>\n<li>写管道：写满后，写操作阻塞；有空闲后，继续写入      </li>\n</ul>\n</li>\n</ul>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfvycavu3j316i0u0tcy.jpg\" alt=\"管道通信\" style=\"zoom: 50%;\" />\n\n<h3 id=\"管道的分类\"><a href=\"#管道的分类\" class=\"headerlink\" title=\"管道的分类\"></a>管道的分类</h3><h4 id=\"匿名管道：只能实现血缘关系的进程间通信\"><a href=\"#匿名管道：只能实现血缘关系的进程间通信\" class=\"headerlink\" title=\"匿名管道：只能实现血缘关系的进程间通信\"></a>匿名管道：只能实现血缘关系的进程间通信</h4><h5 id=\"创建匿名管道\"><a href=\"#创建匿名管道\" class=\"headerlink\" title=\"创建匿名管道\"></a>创建匿名管道</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pipe</span><span class=\"params\">(<span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>])</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>传出参数：</p>\n<ul>\n<li>fd[0]—&gt;读端</li>\n<li>fd[1]—&gt;写端</li>\n</ul>\n</li>\n<li><p>返回值： 成功 0 ；失败 -1</p>\n</li>\n</ul>\n<h5 id=\"匿名管道通信\"><a href=\"#匿名管道通信\" class=\"headerlink\" title=\"匿名管道通信\"></a>匿名管道通信</h5><ul>\n<li>子进程执行shell命令<code>ps aux</code> ,父进程将结果显示到终端</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//要关闭管道的一部分，形成唯一的单向流通线路</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = pipe(fd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;pipe error!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = fork();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>) <span class=\"comment\">//children</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//close read</span></span><br><span class=\"line\">\t\tclose(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\tdup2(fd[<span class=\"number\">1</span>],STDOUT_FILENO);</span><br><span class=\"line\">\t\texeclp(<span class=\"string\">&quot;ps&quot;</span>,<span class=\"string\">&quot;ps&quot;</span>,<span class=\"string\">&quot;aux&quot;</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ret &gt; <span class=\"number\">0</span> )<span class=\"comment\">//parent</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tclose(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tbzero(buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\t\t\tret = read(fd[<span class=\"number\">0</span>],buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s--&gt;%d\\n&quot;</span>,buf,ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tclose(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\twait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;fork error&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gsfwnvyrarj310d0u07ic.jpg\" alt=\"ps aux\" style=\"zoom:50%;\" />\n\n<h4 id=\"有名管道\"><a href=\"#有名管道\" class=\"headerlink\" title=\"有名管道\"></a>有名管道</h4><h5 id=\"创建有名管道\"><a href=\"#创建有名管道\" class=\"headerlink\" title=\"创建有名管道\"></a>创建有名管道</h5><ul>\n<li>有名管道文件大小永远为 0，因为有名管道也是将数据存储到内存的缓冲区中</li>\n<li>有名管道可以在血缘关系的进程中使用，也可以在没有血缘关系的进程中使用</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令的方式</span><br><span class=\"line\">mkfifo 管道名</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mkfifo</span><span class=\"params\">(<span class=\"keyword\">const</span> chra *pathname,<span class=\"keyword\">mode_t</span> mode)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pathname 创建有名管道的名字</li>\n<li>mode 文件的权限</li>\n<li>最终权限<code>mode &amp; ~umask</code></li>\n<li>返回值： 成功 0；失败 -1</li>\n</ul>\n<h5 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a>进程间通信</h5><ul>\n<li>需要通过open操作得到读写管道的文件描述符，如果读写端只有一端打开，进程会阻塞在open函数，知道另一个进程打开对应端。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//有名管道进行写操作</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建有名管道</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = mkfifo(<span class=\"string\">&quot;./fifotest&quot;</span>,<span class=\"number\">0664</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;mkfifo error!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;管道文件创建成功！\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret_open = open(<span class=\"string\">&quot;./fifotest&quot;</span>,O_WRONLY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret_open == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;open fifo fail!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//循环写入文件</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> buf[<span class=\"number\">4096</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(buf,<span class=\"string\">&quot;hello world %d&quot;</span>,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        write(ret_open,buf,<span class=\"built_in\">strlen</span>(buf)); <span class=\"comment\">//如果只有写端，没有读端会阻塞的</span></span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(ret_open);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">设置为非阻塞的形式</span></span><br><span class=\"line\"><span class=\"comment\">// 通过fcntl 修改就可以, 一般情况下不建议修改</span></span><br><span class=\"line\"><span class=\"comment\">// 管道操作对应两个文件描述符, 分别是管道的读端 和 写端</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">// 1. 获取读端的文件描述符的flag属性</span></span><br><span class=\"line\"><span class=\"comment\">int flag = fcntl(fd[0], F_GETFL);</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 添加非阻塞属性到 flag中</span></span><br><span class=\"line\"><span class=\"comment\">flag |= O_NONBLOCK;</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 将新的flag属性设置给读端的文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">fcntl(fd[0], F_SETFL, flag);</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 非阻塞读管道</span></span><br><span class=\"line\"><span class=\"comment\">char buf[4096];</span></span><br><span class=\"line\"><span class=\"comment\">read(fd[0], buf, sizeof(buf));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd_r = open(<span class=\"string\">&quot;./fifotest&quot;</span>,O_RDONLY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fd_r == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;open fifotest error!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//循环读取</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">4096</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(buf,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = read(fd_r,buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;已经读完，阻塞解除！\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s---&gt;%d\\n&quot;</span>,buf,ret);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(fd_r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pipe调用别的可执行文件\"><a href=\"#pipe调用别的可执行文件\" class=\"headerlink\" title=\"pipe调用别的可执行文件\"></a>pipe调用别的可执行文件</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fdfs_upload_file</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;make_log.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//create pipe</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>];</span><br><span class=\"line\">      <span class=\"keyword\">int</span> ret = pipe(fd);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">            LOG(<span class=\"string\">&quot;pipe&quot;</span>,<span class=\"string\">&quot;create pipe error&quot;</span>,<span class=\"string\">&quot;ret = %d&quot;</span>,ret);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      ret = fork();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)<span class=\"comment\">//children</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">            close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            dup2(fd[<span class=\"number\">1</span>],STDOUT_FILENO);</span><br><span class=\"line\">            execlp(<span class=\"string\">&quot;fdfs_upload_file&quot;</span>,<span class=\"string\">&quot;fdfs_upload_file&quot;</span>,<span class=\"string\">&quot;/etc/fdfs/client.conf&quot;</span>,argv[<span class=\"number\">1</span>],<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ret &gt; <span class=\"number\">0</span>)<span class=\"comment\">//parent</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">            close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>] ;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                  bzero(buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">                  ret = read(fd[<span class=\"number\">0</span>],buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">                  <span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,buf);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            wait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            LOG(<span class=\"string\">&quot;fork&quot;</span>,<span class=\"string\">&quot;fork error&quot;</span>,<span class=\"string\">&quot;fork ret = %d&quot;</span>,ret);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      LOG(<span class=\"string\">&quot;interface&quot;</span>,<span class=\"string\">&quot;interface ok!&quot;</span>,<span class=\"string\">&quot;return 0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cks2o0xej0001k0570ke5d6vh","category_id":"cks2o0xen0004k057cwx329zb","_id":"cks2o0xew000hk057c7tlbjhb"},{"post_id":"cks2o0xem0003k0576ij1dyny","category_id":"cks2o0xen0004k057cwx329zb","_id":"cks2o0xf0000mk0574v13c1am"},{"post_id":"cks2o0xev000fk0577gly75hi","category_id":"cks2o0xen0004k057cwx329zb","_id":"cks2o0xf1000pk0579oec3mad"},{"post_id":"cks2o0xep0007k057fcsn1vl5","category_id":"cks2o0xen0004k057cwx329zb","_id":"cks2o0xf2000sk0577l5q24ma"},{"post_id":"cks2o0xez000kk057be2id2fe","category_id":"cks2o0xen0004k057cwx329zb","_id":"cks2o0xf4000xk057azhc552w"},{"post_id":"cks2o0xer0009k057gawxfr7i","category_id":"cks2o0xen0004k057cwx329zb","_id":"cks2o0xf5000zk057exif3u73"},{"post_id":"cks2o0xer0009k057gawxfr7i","category_id":"cks2o0xf0000lk0577ipdesb2","_id":"cks2o0xf60013k057ehkjbdat"},{"post_id":"cks2o0xf3000wk057ff19ch6h","category_id":"cks2o0xf3000tk0570c50d26r","_id":"cks2o0xf70016k057g77i5svf"},{"post_id":"cks2o0xer000ak057ewk544qx","category_id":"cks2o0xf3000tk0570c50d26r","_id":"cks2o0xf8001ak057ewmc2y00"},{"post_id":"cks2o0xf60011k057ehcreoio","category_id":"cks2o0xf3000tk0570c50d26r","_id":"cks2o0xfb001ek057bkc73pk6"},{"post_id":"cks2o0xeu000ek057hnax7r4h","category_id":"cks2o0xf3000tk0570c50d26r","_id":"cks2o0xfc001hk057frdl8eq9"},{"post_id":"cks2o0xf80019k057hx3gbv9v","category_id":"cks2o0xf70017k057fd5r8zk3","_id":"cks2o0xfd001jk05727ryg9qp"},{"post_id":"cks2o0xf1000ok0576zh0gl4e","category_id":"cks2o0xf70017k057fd5r8zk3","_id":"cks2o0xfe001lk057503n9f77"},{"post_id":"cks2o0xfa001ck057d22396g6","category_id":"cks2o0xen0004k057cwx329zb","_id":"cks2o0xff001nk057gtrzbv3f"},{"post_id":"cks2o0xfb001gk057gc016amr","category_id":"cks2o0xf3000tk0570c50d26r","_id":"cks2o0xff001qk05775im10pp"},{"post_id":"cks2o0xf2000rk057agqt78b0","category_id":"cks2o0xf70017k057fd5r8zk3","_id":"cks2o0xfg001tk0573n3la6p7"},{"post_id":"cks2o0xf5000yk0576afoc4jq","category_id":"cks2o0xf70017k057fd5r8zk3","_id":"cks2o0xfg001uk057ebyf8f6f"},{"post_id":"cks2o0xf70015k0572ubd4jbv","category_id":"cks2o0xf70017k057fd5r8zk3","_id":"cks2o0xfg001wk0576hvk6qwc"}],"PostTag":[{"post_id":"cks2o0xej0001k0570ke5d6vh","tag_id":"cks2o0xep0005k057fiel3cuh","_id":"cks2o0xeu000dk0575yzb26vb"},{"post_id":"cks2o0xem0003k0576ij1dyny","tag_id":"cks2o0xes000ck05705jh67yk","_id":"cks2o0xf2000qk057cuvj01kt"},{"post_id":"cks2o0xem0003k0576ij1dyny","tag_id":"cks2o0xex000ik0577yi69dqq","_id":"cks2o0xf3000uk0571yku89fx"},{"post_id":"cks2o0xep0007k057fcsn1vl5","tag_id":"cks2o0xf0000nk057ckj92xd8","_id":"cks2o0xf70014k0570jjacdz9"},{"post_id":"cks2o0xep0007k057fcsn1vl5","tag_id":"cks2o0xf3000vk057h2ri3j5p","_id":"cks2o0xf80018k0576ae5dacq"},{"post_id":"cks2o0xer0009k057gawxfr7i","tag_id":"cks2o0xf60012k057htznckru","_id":"cks2o0xfa001dk057haht7tvo"},{"post_id":"cks2o0xer000ak057ewk544qx","tag_id":"cks2o0xf8001bk0578k8412c3","_id":"cks2o0xff001ok057fmh46zlz"},{"post_id":"cks2o0xer000ak057ewk544qx","tag_id":"cks2o0xfc001ik0575i2gbygp","_id":"cks2o0xff001rk057csui7ncn"},{"post_id":"cks2o0xeu000ek057hnax7r4h","tag_id":"cks2o0xfe001mk057gii147g1","_id":"cks2o0xfg001xk0571xcs1un3"},{"post_id":"cks2o0xeu000ek057hnax7r4h","tag_id":"cks2o0xff001sk0573j2y1w3z","_id":"cks2o0xfg001yk057735fa5hi"},{"post_id":"cks2o0xev000fk0577gly75hi","tag_id":"cks2o0xfe001mk057gii147g1","_id":"cks2o0xfh0021k057ah2g834p"},{"post_id":"cks2o0xev000fk0577gly75hi","tag_id":"cks2o0xf3000vk057h2ri3j5p","_id":"cks2o0xfh0022k05791u0050e"},{"post_id":"cks2o0xez000kk057be2id2fe","tag_id":"cks2o0xfh0020k057e8bge81w","_id":"cks2o0xfh0024k0575mq43apa"},{"post_id":"cks2o0xf1000ok0576zh0gl4e","tag_id":"cks2o0xfh0023k05709cd75v1","_id":"cks2o0xfi0026k05716oh9359"},{"post_id":"cks2o0xf2000rk057agqt78b0","tag_id":"cks2o0xfi0025k057am9z1xyb","_id":"cks2o0xfi0029k057bsap0ehw"},{"post_id":"cks2o0xf2000rk057agqt78b0","tag_id":"cks2o0xfi0027k057f0faf17a","_id":"cks2o0xfj002ak057hl2fevxd"},{"post_id":"cks2o0xf3000wk057ff19ch6h","tag_id":"cks2o0xf8001bk0578k8412c3","_id":"cks2o0xfj002dk057hwu2ar0f"},{"post_id":"cks2o0xf3000wk057ff19ch6h","tag_id":"cks2o0xfc001ik0575i2gbygp","_id":"cks2o0xfj002ek0577at5hclx"},{"post_id":"cks2o0xf5000yk0576afoc4jq","tag_id":"cks2o0xfj002ck057dglf5ifg","_id":"cks2o0xfk002gk0576nlb2ro1"},{"post_id":"cks2o0xf60011k057ehcreoio","tag_id":"cks2o0xfe001mk057gii147g1","_id":"cks2o0xfl002jk057cb8x3c3j"},{"post_id":"cks2o0xf60011k057ehcreoio","tag_id":"cks2o0xfc001ik0575i2gbygp","_id":"cks2o0xfl002kk057fj9vgocl"},{"post_id":"cks2o0xf70015k0572ubd4jbv","tag_id":"cks2o0xfk002ik057dc2u2thk","_id":"cks2o0xfn002nk05723k45suw"},{"post_id":"cks2o0xf70015k0572ubd4jbv","tag_id":"cks2o0xfe001mk057gii147g1","_id":"cks2o0xfn002ok057dmug0twq"},{"post_id":"cks2o0xf80019k057hx3gbv9v","tag_id":"cks2o0xfl002mk05790jw5hac","_id":"cks2o0xfo002rk0572b1hcmks"},{"post_id":"cks2o0xf80019k057hx3gbv9v","tag_id":"cks2o0xfn002pk057bg30e240","_id":"cks2o0xfo002sk0576vcbadsw"},{"post_id":"cks2o0xfa001ck057d22396g6","tag_id":"cks2o0xfo002qk057d5laarod","_id":"cks2o0xfp002wk057cdv9a68x"},{"post_id":"cks2o0xfa001ck057d22396g6","tag_id":"cks2o0xfo002tk0576p4yadfw","_id":"cks2o0xfp002xk057b80r53h4"},{"post_id":"cks2o0xfa001ck057d22396g6","tag_id":"cks2o0xfo002uk0571nahcv9w","_id":"cks2o0xfp002zk05787ebgr4b"},{"post_id":"cks2o0xfb001gk057gc016amr","tag_id":"cks2o0xfp002vk0574jpn7jf7","_id":"cks2o0xfp0030k0571ogubrsy"},{"post_id":"cks2o0xfb001gk057gc016amr","tag_id":"cks2o0xfp002yk057050te2cw","_id":"cks2o0xfq0031k057apwfbkdq"}],"Tag":[{"name":"fastcgi","_id":"cks2o0xep0005k057fiel3cuh"},{"name":"FastDFS","_id":"cks2o0xes000ck05705jh67yk"},{"name":"文件系统","_id":"cks2o0xex000ik0577yi69dqq"},{"name":"hexo","_id":"cks2o0xf0000nk057ckj92xd8"},{"name":"git","_id":"cks2o0xf3000vk057h2ri3j5p"},{"name":"JSON","_id":"cks2o0xf60012k057htznckru"},{"name":"网络","_id":"cks2o0xf8001bk0578k8412c3"},{"name":"底层","_id":"cks2o0xfc001ik0575i2gbygp"},{"name":"基础","_id":"cks2o0xfe001mk057gii147g1"},{"name":"shell","_id":"cks2o0xff001sk0573j2y1w3z"},{"name":"nginx","_id":"cks2o0xfh0020k057e8bge81w"},{"name":"数据解析","_id":"cks2o0xfh0023k05709cd75v1"},{"name":"static","_id":"cks2o0xfi0025k057am9z1xyb"},{"name":"C++","_id":"cks2o0xfi0027k057f0faf17a"},{"name":"变参","_id":"cks2o0xfj002ck057dglf5ifg"},{"name":"字节对齐","_id":"cks2o0xfk002ik057dc2u2thk"},{"name":"动态库","_id":"cks2o0xfl002mk05790jw5hac"},{"name":"静态库","_id":"cks2o0xfn002pk057bg30e240"},{"name":"非关系型数据库","_id":"cks2o0xfo002qk057d5laarod"},{"name":"redis","_id":"cks2o0xfo002tk0576p4yadfw"},{"name":"hiredis","_id":"cks2o0xfo002uk0571nahcv9w"},{"name":"管道","_id":"cks2o0xfp002vk0574jpn7jf7"},{"name":"IPC","_id":"cks2o0xfp002yk057050te2cw"}]}}